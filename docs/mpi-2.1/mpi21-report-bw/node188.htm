<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Error Classes, Error Codes, and Error Handlers</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node188">176. Error Classes, Error Codes, and Error Handlers</a></H1>
<A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node189.htm#Node189"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node189.htm#Node189"> Timers and Synchronization</a>
<b>Previous: </b><A HREF="node187.htm#Node187"> Error Codes and Classes</a>
<P>
  
  
Users may want to write a layered library on top of an existing  MPI  
implementation, and this library may have its own set of error codes  
and classes. An example of such a library is an I/O library based on  
 MPI, see Chapter <a href="node256.htm#Node256">I/O 
</a> on page <a href="node256.htm#Node256">I/O 
</a>.   
For this purpose, functions are needed to:  
<ol> 
 
1. add a new error class to the ones an  MPI implementation already  
knows.  
 
<BR> 
2. associate error codes with this error class, so that  
 MPI_ERROR_CLASS works.   
 
<BR> 
3. associate strings with these error codes, so that  
 MPI_ERROR_STRING works.   
  
 
<BR> 
4. invoke the error handler associated with a communicator, window, or  
object.  
</ol> 
  
  
Several   
functions are provided to do this.  They are all local.  
No functions are provided to free   
error classes: it  
is not expected that an application will generate them in significant  
numbers.  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CLASS(errorclass)</TD></TR>  
<TR><TD> OUT errorclass</TD><TD>value for the new error class (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_class(int *errorclass) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_CLASS(ERRORCLASS, IERROR)<BR> INTEGER ERRORCLASS, IERROR <BR></tt>  
<P> 
  
 <tt> int MPI::Add_error_class() <BR></tt>  
  
<P> 
Creates a new error class and returns the value for it.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value is  
set by the implementation and not by the user.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will return the value for a new  
 errorclass in the same deterministic way on all processes.  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Since a call to  MPI_ADD_ERROR_CLASS is local, the same  
 errorclass may not be returned on all processes that make  
this call.  Thus, it is not safe to assume that registering a new  
error on a set of processes at the same time will yield the same  
 errorclass on all of the processes.  However,  if an  
implementation returns the new  errorclass in a deterministic  
way, and they are always generated in the same order  
on the same set of processes (for  
example, all processes), then the value will be the same.  However,  
even if a deterministic algorithm is used, the value can vary across  
processes.  This can happen, for example, if different but overlapping  
groups of processes make a series of calls.  As a result of these issues,  
getting the ``same'' error on multiple processes may not cause the  
same value of error code to be generated.  
 (<em> End of advice to users.</em>) <BR> 
The value of  MPI_ERR_LASTCODE  
is a constant value and   
is not affected by new user-defined  
error codes and classes.    
Instead, a predefined attribute key  MPI_LASTUSEDCODE is  
associated with  
 MPI_COMM_WORLD.  The attribute value corresponding to this key  
  
is the current maximum error class including the user-defined ones.  
  
This is a local value and may be different on different processes.    
  
The value returned by this key is always greater than or equal to  
 MPI_ERR_LASTCODE.  
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
The value returned by the key  
 MPI_LASTUSEDCODE will not change unless the user calls a  
function to explicitly add an error class/code.  In a multi-threaded  
environment, the user must take extra care in assuming this value has  
not changed.  
  
Note that error codes and error classes are not necessarily dense.  A user may not assume that each error class below  MPI_LASTUSEDCODE is valid.  
  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CODE(errorclass, errorcode)</TD></TR>  
<TR><TD> IN errorclass</TD><TD>error class (integer)</TD></TR>  
<TR><TD> OUT errorcode</TD><TD>new error code to associated with  errorclass (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_code(int errorclass, int *errorcode) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_CODE(ERRORCLASS, ERRORCODE, IERROR)<BR> INTEGER ERRORCLASS, ERRORCODE, IERROR <BR></tt>  
<P> 
 <tt> int MPI::Add_error_code(int errorclass) <BR></tt>  
<P> 
Creates new error code associated with  
 errorclass and returns its value in  errorcode.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value  
of the new error code is set by the implementation and not by the  
user.   
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will return the value for a new  
 errorcode in the same deterministic way on all processes.  
 (<em> End of advice to implementors.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_STRING(errorcode, string)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code or class (integer)</TD></TR>  
<TR><TD> IN string</TD><TD>text corresponding to  errorcode (string)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_string(int errorcode, char *string) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_STRING(ERRORCODE, STRING, IERROR)<BR> INTEGER ERRORCODE, IERROR <BR>CHARACTER*(*) STRING <BR></tt>  
<P> 
  
 <tt> void MPI::Add_error_string(int errorcode, const char* string) <BR></tt>  
  
<P> 
Associates an error string with an error code or class.  
The string must be no more than  MPI_MAX_ERROR_STRING  
characters long.  The length of the string is as defined in the  
calling language.    
  
The length of the string does not include the null terminator in C or C++.  
  
Trailing blanks will be stripped in Fortran.  
  
Calling  MPI_ADD_ERROR_STRING for an  errorcode  
that already has a string will replace the old string with the new  
string.  It is erroneous to call  MPI_ADD_ERROR_STRING for  
an error code or class with a value <I>leq constiMPI_ERR_LASTCODE</I>.  
  
<P> 
If  MPI_ERROR_STRING is called when no string has been set,  
it will return a empty string (all spaces in Fortran, <tt> ""</tt> in C and  
C++).  
<P> 
  
  
Section <a href="node182.htm#Node182">Error Handling 
</a> on  
page <a href="node182.htm#Node182">Error Handling 
</a> describes the methods for creating  
and associating error handlers with communicators, files, and windows.  
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CALL_ERRHANDLER (comm, errorcode)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_COMM_CALL_ERRHANDLER(COMM, ERRORCODE, IERROR)<BR> INTEGER COMM, ERRORCODE, IERROR <BR></tt>  
<P> 
 <tt> void MPI::Comm::Call_errhandler(int errorcode) const <BR></tt>  
  
<P> 
This function invokes the error handler assigned to the communicator  
with the error code supplied.    
This function returns  MPI_SUCCESS in C and C++ and the same  
value in  IERROR if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Users should note that the default error handler is  
 MPI_ERRORS_ARE_FATAL.  Thus, calling  
 MPI_COMM_CALL_ERRHANDLER will abort the  comm  
processes if the default error handler has not been changed for this  
communicator or on the parent before the communicator was created.  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_CALL_ERRHANDLER (win, errorcode)</TD></TR>  
<TR><TD> IN win</TD><TD>window with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Win_call_errhandler(MPI_Win win, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_WIN_CALL_ERRHANDLER(WIN, ERRORCODE, IERROR)<BR> INTEGER WIN, ERRORCODE, IERROR <BR></tt>  
<P> 
 <tt> void MPI::Win::Call_errhandler(int errorcode) const <BR></tt>  
<P> 
This function invokes the error handler assigned to the window  
with the error code supplied.    
This function returns  MPI_SUCCESS in C and C++ and the same  
value in  IERROR if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
As with communicators, the default error handler for windows is  
 MPI_ERRORS_ARE_FATAL.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_FILE_CALL_ERRHANDLER (fh, errorcode)</TD></TR>  
<TR><TD> IN fh</TD><TD>file with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_call_errhandler(MPI_File fh, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_FILE_CALL_ERRHANDLER(FH, ERRORCODE, IERROR)<BR> INTEGER FH, ERRORCODE, IERROR <BR></tt>  
<P> 
 <tt> void MPI::File::Call_errhandler(int errorcode) const <BR></tt>  
  
<P> 
This function invokes the error handler assigned to the file  
with the error code supplied.    
This function returns  MPI_SUCCESS in C and C++ and the same  
value in  IERROR if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
  
Unlike errors on communicators and windows, the default behavior for files is to have  
  
 MPI_ERRORS_RETURN.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Users are warned that handlers should not be called recursively with  
 MPI_COMM_CALL_ERRHANDLER,  
 MPI_FILE_CALL_ERRHANDLER, or  
 MPI_WIN_CALL_ERRHANDLER.  Doing  
this can create a situation where an infinite recursion is created.  
This can occur if  MPI_COMM_CALL_ERRHANDLER,  
 MPI_FILE_CALL_ERRHANDLER, or  
 MPI_WIN_CALL_ERRHANDLER is called  
inside an error handler.  
  
<P> 
Error codes and classes are associated with a process.  As a result,  
they may be used in any error handler.  Error handlers should be  
prepared to deal with any error code   
they are   
given.  Furthermore, it is  
good practice to only call an error handler with the appropriate  
error codes.  For example, file errors would normally be sent to the  
file error   
handler.  
 (<em> End of advice to users.</em>) <BR> 
   
  

<P>
<HR>
<A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node189.htm#Node189"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node189.htm#Node189"> Timers and Synchronization</a>
<b>Previous: </b><A HREF="node187.htm#Node187"> Error Codes and Classes</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Address and Size Functions</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node72">71. Address and Size Functions</a></H2>
<A HREF="node71.htm#Node71"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node73.htm#Node73"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node73.htm#Node73"> Lower-Bound and Upper-Bound Markers</a>
<b>Previous: </b><A HREF="node71.htm#Node71"> Distributed Array Datatype Constructor</a>
<P>
  
  
The displacements in a general datatype are relative to some initial buffer  
address.  <b> Absolute addresses</b> can be substituted for these  
displacements: we treat them as displacements relative to ``address  
zero,'' the start of the address space.  This initial address zero is  
indicated by the constant  MPI_BOTTOM.  Thus, a datatype can  
specify the absolute address of the entries in the communication  
buffer, in which case the  buf argument is passed the value  
 MPI_BOTTOM.  
<P> 
The address of a location in memory can be found by invoking the  
function <BR>  
 MPI_GET_ADDRESS.  
  
<TABLE><TR><TD COLSPAN=2>MPI_GET_ADDRESS(location, address)</TD></TR>  
<TR><TD> IN location</TD><TD>location in caller memory (choice)</TD></TR>  
<TR><TD> OUT address</TD><TD>address of location (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Get_address(void *location, MPI_Aint *address) <BR></tt>  
<P> 
 <tt> MPI_GET_ADDRESS(LOCATION, ADDRESS, IERROR)<BR> &lt;type&gt; LOCATION(*) <BR>INTEGER IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ADDRESS <BR></tt>  
<P> 
 <tt> MPI::Aint MPI::Get_address(void* location) <BR></tt>  
  
This function replaces  MPI_ADDRESS, whose use is deprecated. See also Chapter <a href="node321.htm#Node321">Deprecated Functions 
</a>.   
  
<P> 
Returns the (byte) address of  location.  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Current Fortran  MPI codes will run unmodified, and will port to any  
system. However, they may fail if addresses larger than <I>2<SUP>32</SUP> -1</I>  
are used in the program.  New codes should be written so that they use  
the new functions. This provides compatibility  
with C/C++ and avoids errors on 64 bit architectures.  However, such  
newly written codes may need to be (slightly) rewritten to port to old  
Fortran 77 environments that do not support  KIND  
declarations.  
 (<em> End of advice to users.</em>) <BR> 
  
  
<BR><b> Example</b>   
  
  
  
Using  MPI_GET_ADDRESS for an array.  
  
<BR> 
<pre><tt>   REAL A(100,100) 
   INTEGER(KIND=MPI_ADDRESS_KIND) I1, I2, DIFF 
   CALL MPI_GET_ADDRESS(A(1,1), I1, IERROR) 
   CALL MPI_GET_ADDRESS(A(10,10), I2, IERROR) 
   DIFF = I2 - I1 
! The value of DIFF is 909*sizeofreal; the values of I1 and I2 are 
! implementation dependent. 
</tt></pre> 
   
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
C users may be tempted to avoid the usage of   
 MPI_GET_ADDRESS   
and rely on  
the availability of the address operator &amp;.  Note, however, that  
 &amp; <em> cast-expression</em> is a pointer, not an  
address.  
ISO C   
does not require that the value of a pointer  
(or the pointer cast to  int) be  
the absolute address of the object pointed at --- although this is  
commonly the case.  
Furthermore, referencing may not have a unique  
definition on machines with a segmented address space.  
The use of   
 MPI_GET_ADDRESS   
to ``reference'' C  
variables guarantees portability to such machines as well.  
 (<em> End of advice to users.</em>) <BR> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
To prevent problems with the argument copying and register optimization done  
  by Fortran compilers, please note the hints in subsections ``Problems Due to  
  Data Copying and Sequence Association,'' and ``A Problem with  
  Register Optimization''    
  in Section <a href="node337.htm#Node337">Problems With Fortran Bindings for  MPI 
</a> on  
  pages <a href="node337.htm#Node339">Problems Due to Data Copying and Sequence Association 
</a> and <a href="node337.htm#Node342">A Problem with Register Optimization 
</a>.  
 (<em> End of advice to users.</em>) <BR> 
  
The following auxiliary function provides useful information on  
derived datatypes.  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_SIZE(datatype, size)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT size</TD><TD>datatype size (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_size(MPI_Datatype datatype, int *size) <BR></tt>  
<P> 
 <tt> MPI_TYPE_SIZE(DATATYPE, SIZE, IERROR)<BR> INTEGER DATATYPE, SIZE, IERROR <BR></tt>  
 <tt> int MPI::Datatype::Get_size() const <BR></tt>  
  
 MPI_TYPE_SIZE returns the total size, in bytes, of the entries in  
the type signature  
associated with  datatype; i.e., the total size of  
the data in a message that would be created with this datatype.  Entries that  
occur multiple times in the datatype are counted with their multiplicity.  
<P> 
  
  
<P> 
<P> 
<P> 
  
  

<P>
<HR>
<A HREF="node71.htm#Node71"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node73.htm#Node73"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node73.htm#Node73"> Lower-Bound and Upper-Bound Markers</a>
<b>Previous: </b><A HREF="node71.htm#Node71"> Distributed Array Datatype Constructor</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

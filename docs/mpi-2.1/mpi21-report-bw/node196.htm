<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Introduction</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node196">184. Introduction</a></H1>
<A HREF="node195.htm#Node195"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node197.htm#Node197"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node197.htm#Node197"> The Dynamic Process Model</a>
<b>Previous: </b><A HREF="node195.htm#Node195"> Process Creation and Management</a>
<P>
  
<P> 
  
 MPI is primarily concerned with communication rather than process or   
resource management.  However, it is necessary to address these issues   
to some degree in order to define a useful framework for communication.    
This chapter presents a set of  MPI interfaces that allow for   
a variety of approaches to process management while placing minimal   
restrictions on the execution environment.  
<P> 
The  MPI model for process creation allows both the creation   
of an intial set of processes related by their membership in a common   
 MPI_COMM_WORLD and the creation and management of processes  
after an  MPI application has been started.    
A major impetus for the later form of process creation comes   
from the PVM [<a href="node427.htm#-Bib23">23</a>] research effort.  This work   
has provided a wealth of experience with process  
management and resource control that illustrates their benefits   
and potential pitfalls.    
<P> 
The  MPI Forum decided not to address resource   
control because  
it was not able to design a portable interface that would be  
appropriate for the broad spectrum of existing and potential resource and  
process controllers.  Resource control can encompass a wide range of  
abilities, including adding and deleting nodes from a virtual parallel  
machine, reserving and scheduling resources, managing compute  
partitions of an MPP, and returning information about available  
resources.  
assumes that resource control is provided externally --- probably  
by computer vendors, in the case of tightly coupled systems, or by a third  
party software package when the environment is a cluster of workstations.   
<P> 
The reasons for   
including process management in  MPI are both  
technical and practical.  Important classes of message-passing  
applications require process control. These include task  
farms, serial applications with parallel modules, and problems that  
require a run-time assessment of the number and type of processes that  
should be started.  On the practical side, users of workstation  
clusters who are migrating from PVM to  MPI may be accustomed to using  
PVM's capabilities for process and resource management. The lack of  
these features   
would be  
a practical stumbling block to migration.  
<P> 
The following goals are central to the design of  MPI process management:  
  
<ul> 
 
<li>The  
 MPI  
process model must apply  
to the vast majority of current parallel environments. These  
include everything from tightly integrated MPPs   
to heterogeneous networks of  
workstations.   
 
<li> MPI must not take over operating system responsibilities.  
It should instead provide a clean interface between an application  
and system software.   
<P> 
 
<li> MPI must guarantee communication determinism in the presense of  
dynamic processes, i.e.,   
dynamic process management must not introduce unavoidable race  
conditions.   
  
 
<li> MPI must not contain features that compromise performance.  
<P> 
</ul> 
<BR> 
The  
process management model addresses these issues in two  
ways. First,  MPI remains primarily a communication library. It  
does not manage the parallel environment in which  
a parallel program executes, though it provides a minimal  
interface between an application and external resource and  
process managers.   
<P> 
Second,  MPI maintains a consistent concept of a communicator, regardless  
of how its members came into existence.    
A communicator is never changed once created, and it is always  
created using deterministic collective operations.   
<P> 

<P>
<HR>
<A HREF="node195.htm#Node195"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node197.htm#Node197"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node197.htm#Node197"> The Dynamic Process Model</a>
<b>Previous: </b><A HREF="node195.htm#Node195"> Process Creation and Management</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Exceptions</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node332">301. Exceptions</a></H2>
<A HREF="node331.htm#Node331"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node324.htm#Node324"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node333.htm#Node333"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node324.htm#Node324"> C++</a>
<b>Next: </b><A HREF="node333.htm#Node333"> Mixed-Language Operability</a>
<b>Previous: </b><A HREF="node331.htm#Node331"> Communicators</a>
<P>
  
<P> 
The C++ language interface for  MPI includes the predefined error  
handler <tt> MPI::ERRORS_THROW_EXCEPTIONS</tt> for use with  
the <tt> Set_errhandler()</tt> member functions.  
  
<tt> MPI::ERRORS_THROW_EXCEPTIONS</tt> can only be set or retrieved   
by C++ functions.  
  
If a non-C++ program causes an error that invokes the  
<tt> MPI::ERRORS_THROW_EXCEPTIONS</tt> error handler, the exception  
will pass up the calling stack until C++ code can catch it.  If there  
is no C++ code to catch it, the behavior is undefined.  In a  
multi-threaded environment or if a non-blocking  MPI call throws an  
exception while making progress in the background, the behavior is  
implementation dependent.  
<P> 
  
<P> 
The error handler <tt> MPI::ERRORS_THROW_EXCEPTIONS</tt> causes an  
<tt> MPI::Exception</tt> to be thrown for any  MPI result code other  
than <tt> MPI::SUCCESS</tt>.  The public interface to  
<tt> MPI::Exception</tt> class is defined as follows:  
<P> 
   
 <P> 
<BR> 
<pre><tt>namespace MPI { 
  class Exception { 
  public: 
 
    Exception(int error_code);  
 
    int Get_error_code() const; 
    int Get_error_class() const; 
    const char *Get_error_string() const; 
  }; 
}; 
</tt></pre> 
  
<P> 
  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
The exception will be thrown within the body of  
  <tt> MPI::ERRORS_THROW_EXCEPTIONS</tt>.  It is expected that control  
  will be returned to the user when the exception is thrown.  
  Some  MPI functions specify certain return information in their  
  parameters in the case of an error and <tt> MPI_ERRORS_RETURN</tt>  
  is specified.  The same type of return information must be provided  
  when exceptions are thrown.  
  <P> 
For example,  MPI_WAITALL puts an error code for each  
  request in the corresponding entry in the status array and returns  
   MPI_ERR_IN_STATUS.  When using  
  <tt> MPI::ERRORS_THROW_EXCEPTIONS</tt>, it is expected that the  
  error codes in the status array will be set appropriately before the  
  exception is thrown.  
<P> 
 (<em> End of advice to implementors.</em>) <BR> 
  
<P> 

<P>
<HR>
<A HREF="node331.htm#Node331"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node324.htm#Node324"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node333.htm#Node333"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node324.htm#Node324"> C++</a>
<b>Next: </b><A HREF="node333.htm#Node333"> Mixed-Language Operability</a>
<b>Previous: </b><A HREF="node331.htm#Node331"> Communicators</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>File Views</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node269">252. File Views</a></H1>
<A HREF="node267.htm#Node268"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node270.htm#Node270"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node270.htm#Node270"> Data Access</a>
<b>Previous: </b><A HREF="node267.htm#Node268"> Reserved File Hints</a>
<P>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_SET_VIEW(fh, disp, etype, filetype, datarep, info)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN disp</TD><TD>displacement (integer)</TD></TR>  
<TR><TD> IN etype</TD><TD>elementary datatype (handle)</TD></TR>  
<TR><TD> IN filetype</TD><TD>filetype (handle)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, char *datarep, MPI_Info info) <BR></tt>  
 <tt> MPI_FILE_SET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, INFO, IERROR)<BR> INTEGER FH, ETYPE, FILETYPE, INFO, IERROR <BR>CHARACTER*(*) DATAREP <BR>INTEGER(KIND=MPI_OFFSET_KIND) DISP <BR></tt>  
 <tt> void MPI::File::Set_view(MPI::Offset disp, const MPI::Datatype&amp; etype, const MPI::Datatype&amp; filetype, const char* datarep, const MPI::Info&amp; info) <BR></tt>  
<P> 
The  MPI_FILE_SET_VIEW routine changes the process's view  
of the data in the file.  
The start of the view is set to  disp;  
  
the type of data is set to  etype;  
the distribution of data to processes is set to  filetype;  
and the representation of data in the file is set to  datarep.  
  
In addition,  
 MPI_FILE_SET_VIEW resets the individual file pointers and the  
shared file pointer to zero.  
 MPI_FILE_SET_VIEW is collective;  
the values for  datarep and  
  
the extents of  etype in the file data representation  
  
  
must be identical on all processes  
in the group;  
values for  disp,  filetype, and  info may vary.  
The datatypes passed in  etype and  filetype must  
be committed.  
<P> 
  
The  etype always specifies the data layout in the file.  
If  etype is a portable datatype (see Section <a href="node17.htm#Node17">Semantic Terms 
</a>, page <a href="node17.htm#Node17">Semantic Terms 
</a>),  
the extent of  etype is computed by scaling any displacements  
in the datatype to match the file data representation.  
If  etype is not a portable datatype,  
no scaling is done when computing the extent of  etype.  
The user must be careful when using nonportable  etypes  
in heterogeneous environments;  
see Section <a href="node284.htm#Node284">Datatypes for File Interoperability 
</a>, page <a href="node284.htm#Node284">Datatypes for File Interoperability 
</a> for further details.  
  
<P> 
If  MPI_MODE_SEQUENTIAL mode was specified when the file was opened,  
the special displacement  MPI_DISPLACEMENT_CURRENT must be  
passed in  disp.  
This sets the displacement to the current position  
of the shared file pointer.  
 MPI_DISPLACEMENT_CURRENT is invalid unless the amode for the  
file has  MPI_MODE_SEQUENTIAL set.    
  
 
<BR> 
<em> Rationale.</em>  
<P> 
For some sequential files,  
such as those corresponding to magnetic tapes or streaming network connections,  
the <em> displacement</em> may not be meaningful.  
 MPI_DISPLACEMENT_CURRENT allows the view to be changed  
for these types of files.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
It is expected that a call to  MPI_FILE_SET_VIEW  
will immediately follow  
 MPI_FILE_OPEN in numerous instances.  
A high-quality implementation will ensure that this behavior is efficient.  
 (<em> End of advice to implementors.</em>) <BR> 
The  disp displacement argument specifies the position  
  
(absolute offset in bytes from the beginning of the file)  
  
where the view begins.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
 disp can be used to skip headers or when the file includes a  
sequence of data segments that are to be accessed in different patterns  
(see Figure <a href="node269.htm#Figure27">27 
</a>).  
Separate views,  
each using a different displacement and filetype,  
  
can be used to access each segment.  
<P> 
  <CENTER><P><IMG WIDTH=598 HEIGHT=170 SRC="io-disp.gif"><P>
</CENTER>  
  <BR> 
<b>Figure 27: </b><A NAME="Figure27">Displacements</a><P> 
  
    
  
 (<em> End of advice to users.</em>) <BR> 
An <em> etype</em> (<em> elementary</em> datatype)  
is the unit of data access and positioning.  
It can be any  MPI predefined or derived datatype.  
Derived etypes can be constructed  
by using any of the  MPI datatype constructor routines,  
provided all resulting typemap displacements are  
nonnegative and monotonically nondecreasing.  
Data access is performed in etype units,  
reading or writing whole data items of type etype.  
Offsets are expressed as a count of  etypes;  
file pointers point to the beginning of etypes.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
In order to ensure interoperability in a heterogeneous environment,  
additional restrictions must be observed when constructing the  etype  
(see Section <a href="node283.htm#Node283">File Interoperability 
</a>, page <a href="node283.htm#Node283">File Interoperability 
</a>).  
 (<em> End of advice to users.</em>) <BR> 
A filetype is either a single etype or a derived  MPI datatype  
constructed from multiple instances of the same etype.  
In addition,  
the extent of any hole in the filetype  
must be a multiple of the etype's extent.  
  
These displacements are not required to be distinct,  
but they cannot be negative,  
and they must be monotonically nondecreasing.  
<P> 
If the file is opened for writing,  
neither the  etype nor the  filetype is permitted  
to contain overlapping regions.  
This restriction is equivalent to the ``datatype used in a receive  
cannot specify overlapping regions'' restriction for communication.  
Note that  filetypes from different processes may still  
overlap each other.  
<P> 
If  filetype has holes in it,  
then the data in the holes is inaccessible to the calling process.  
However, the  disp,  etype and  filetype  
arguments can be changed via future calls to  MPI_FILE_SET_VIEW  
to access a different part of the file.  
<P> 
It is erroneous to use absolute addresses in the construction  
of the  etype and  filetype.  
<P> 
The  info argument is used to provide information  
regarding file access patterns and file system specifics  
to direct optimization  
(see Section <a href="node267.htm#Node267">File Info 
</a>, page <a href="node267.htm#Node267">File Info 
</a>).  
The constant  MPI_INFO_NULL refers to the null info  
and can be used when no info needs to be specified.  
<P> 
The  datarep argument is a string that specifies  
the representation of data in the file.  
See the file interoperability section  
(Section <a href="node283.htm#Node283">File Interoperability 
</a>, page <a href="node283.htm#Node283">File Interoperability 
</a>)  
for details and a discussion of valid values.  
<P> 
The user is responsible for ensuring that all nonblocking requests  
and split collective operations  
on  fh have been completed before calling  
 MPI_FILE_SET_VIEW---otherwise, the call to  
 MPI_FILE_SET_VIEW is erroneous.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_GET_VIEW(fh, disp, etype, filetype, datarep)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> OUT disp</TD><TD>displacement (integer)</TD></TR>  
<TR><TD> OUT etype</TD><TD>elementary datatype (handle)</TD></TR>  
<TR><TD> OUT filetype</TD><TD>filetype (handle)</TD></TR>  
<TR><TD> OUT datarep</TD><TD>data representation (string)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep) <BR></tt>  
 <tt> MPI_FILE_GET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, IERROR)<BR> INTEGER FH, ETYPE, FILETYPE, IERROR <BR>CHARACTER*(*) DATAREP <BR>INTEGER(KIND=MPI_OFFSET_KIND) DISP <BR></tt>  
 <tt> void MPI::File::Get_view(MPI::Offset&amp; disp, MPI::Datatype&amp; etype, MPI::Datatype&amp; filetype, char* datarep) const <BR></tt>  
<P> 
 MPI_FILE_GET_VIEW returns the process's view  
of the data in the file.  
The current value of the displacement is returned in  disp.  
The  etype and  filetype are new datatypes  
with typemaps equal to the typemaps  
of the current etype and filetype, respectively.  
<P> 
The data representation is returned in  datarep.  
The user is responsible for ensuring that  datarep is  
large enough to hold the returned data representation string.  
The length of a data representation string is limited to the value of  
 MPI_MAX_DATAREP_STRING.  
<P> 
In addition, if a portable datatype was used to set the current view,  
then the corresponding datatype returned by  MPI_FILE_GET_VIEW  
is also a portable datatype.  
If  etype or  filetype are derived datatypes,  
the user is responsible for freeing them.  
  
  
The  etype and  filetype returned are both in a  
committed state.  
  
<P> 

<P>
<HR>
<A HREF="node267.htm#Node268"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node270.htm#Node270"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node270.htm#Node270"> Data Access</a>
<b>Previous: </b><A HREF="node267.htm#Node268"> Reserved File Hints</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

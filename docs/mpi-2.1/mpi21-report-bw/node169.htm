<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-topol/topol.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Cartesian Shift Coordinates</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node169">161. Cartesian Shift Coordinates</a></H2>
<A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node164.htm#Node164"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node170.htm#Node170"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node164.htm#Node164"> Topology Constructors</a>
<b>Next: </b><A HREF="node170.htm#Node170"> Partitioning of Cartesian structures</a>
<b>Previous: </b><A HREF="node168.htm#Node168"> Topology Inquiry Functions</a>
<P>
  
<P> 
If the process topology is a Cartesian structure,   
an   
 MPI_SENDRECV  
operation is likely to be used along a coordinate direction to perform a shift  
of data.  As input,  MPI_SENDRECV takes the rank of a source process  
for the receive, and the rank of a destination process for the send.  If the  
function  MPI_CART_SHIFT is called for a Cartesian process group, it  
provides the calling process with the above identifiers, which then can be  
passed to  MPI_SENDRECV. The user specifies the coordinate direction  
and the size of the step (positive or negative).  The function is local.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CART_SHIFT(comm, direction, disp, rank_source, rank_dest)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with Cartesian structure (handle)</TD></TR>  
<TR><TD> IN  direction</TD><TD> coordinate dimension of shift (integer)</TD></TR>  
<TR><TD> IN  disp</TD><TD> displacement (<I>&gt; 0</I>: upwards shift, <I>&lt; 0</I>: downwards shift) (integer)</TD></TR>  
<TR><TD> OUT  rank_source</TD><TD> rank of source process (integer)</TD></TR>  
<TR><TD> OUT  rank_dest</TD><TD> rank of destination process (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest) <BR></tt>  
<P> 
 <tt> MPI_CART_SHIFT(COMM, DIRECTION, DISP, RANK_SOURCE, RANK_DEST, IERROR)<BR> INTEGER COMM, DIRECTION, DISP, RANK_SOURCE, RANK_DEST, IERROR <BR></tt>  
 <tt> void MPI::Cartcomm::Shift(int direction, int disp, int&amp; rank_source, int&amp; rank_dest) const <BR></tt>  
  
  
The  direction argument indicates the dimension of the shift, i.e.,  
the coordinate which value is modified by the shift.  The coordinates  
are numbered from 0 to <tt> ndims-1</tt>, when <tt> ndims</tt> is the number  
of dimensions.  
  
<P> 
Depending on the periodicity of the Cartesian group in the specified  
coordinate direction,  MPI_CART_SHIFT provides the identifiers for a  
circular or an end-off shift. In the case of an end-off shift,  
the value  MPI_PROC_NULL may be returned in  rank_source or  
 rank_dest,  
indicating that the source or the destination for the shift is out of range.  
 <P> 
It is erroneous to call  MPI_CART_SHIFT with a direction that is either  
negative or greater than or equal to the number of dimensions in the Cartesian  
communicator. This implies that it is erroneous to call  MPI_CART_SHIFT with a  
 comm that is associated with a zero-dimensional Cartesian topology.  
  
<BR><b> Example</b>    
  
  
  
  
<P> 
The communicator,  comm, has a two-dimensional, periodic, Cartesian  
topology associated with it.  A two-dimensional array of <tt> REAL</tt>s is stored  
one element per process, in variable <tt> A</tt>.  One wishes to skew this array,  
by shifting column <tt> i</tt> (vertically, i.e., along the column) by  
<tt> i</tt> steps.  
<BR> 
<pre><tt>.... 
C find process rank 
      CALL MPI_COMM_RANK(comm, rank, ierr)) 
C find Cartesian coordinates 
      CALL MPI_CART_COORDS(comm, rank, maxdims, coords, ierr) 
C compute shift source and destination 
      CALL MPI_CART_SHIFT(comm, 0, coords(2), source, dest, ierr) 
C skew array 
      CALL MPI_SENDRECV_REPLACE(A, 1, MPI_REAL, dest, 0, source, 0, comm, 
     +                          status, ierr) 
</tt></pre> 
    
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
In Fortran, the dimension indicated by  DIRECTION  
= i has  
 DIMS(i+1) nodes, where  
 DIMS is the array that  
was used to create the grid.  In C, the dimension  
indicated by  direction = i is the dimension specified by  
 dims[i].  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 

<P>
<HR>
<A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node164.htm#Node164"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node170.htm#Node170"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node164.htm#Node164"> Topology Constructors</a>
<b>Next: </b><A HREF="node170.htm#Node170"> Partitioning of Cartesian structures</a>
<b>Previous: </b><A HREF="node168.htm#Node168"> Topology Inquiry Functions</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

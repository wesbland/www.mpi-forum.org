<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Attributes Example</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node151">146. Attributes Example</a></H2>
<A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node145.htm#Node145"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node152.htm#Node152"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node145.htm#Node145"> Caching</a>
<b>Next: </b><A HREF="node152.htm#Node152"> Naming Objects</a>
<b>Previous: </b><A HREF="node150.htm#Node150"> Error Class for Invalid Keyval</a>
<P>
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
This example shows how to write a collective communication operation  
that uses caching to be more efficient after the first call.  
The coding style assumes that  MPI function results return only error statuses.  
 (<em> End of advice to users.</em>) <BR> 
  
<BR> 
<pre><tt>   /* key for this module's stuff: */ 
   static int gop_key = MPI_KEYVAL_INVALID; 
 
   typedef struct 
   { 
      int ref_count;          /* reference count */ 
      /* other stuff, whatever else we want */ 
   } gop_stuff_type; 
 
   Efficient_Collective_Op (comm, ...) 
   MPI_Comm comm; 
   { 
     gop_stuff_type *gop_stuff; 
     MPI_Group       group; 
     int             foundflag; 
 
     MPI_Comm_group(comm, &amp;group); 
 
     if (gop_key == MPI_KEYVAL_INVALID) /* get a key on first call ever */ 
     { 
       if ( ! MPI_Comm_create_keyval( gop_stuff_copier, 
                                gop_stuff_destructor, 
                                &amp;gop_key, (void *)0)); 
       /* get the key while assigning its copy and delete callback 
          behavior. */ 
 
       MPI_Abort (comm, 99); 
     } 
 
     MPI_Comm_get_attr (comm, gop_key, &amp;gop_stuff, &amp;foundflag); 
     if (foundflag) 
     { /* This module has executed in this group before. 
          We will use the cached information */ 
     } 
     else 
     { /* This is a group that we have not yet cached anything in. 
          We will now do so. 
       */ 
 
       /* First, allocate storage for the stuff we want, 
          and initialize the reference count */ 
 
       gop_stuff = (gop_stuff_type *) malloc (sizeof(gop_stuff_type)); 
       if (gop_stuff == NULL) { /* abort on out-of-memory error */ } 
 
       gop_stuff -&gt; ref_count = 1; 
 
       /* Second, fill in *gop_stuff with whatever we want. 
          This part isn't shown here */ 
 
       /* Third, store gop_stuff as the attribute value */ 
       MPI_Comm_set_attr ( comm, gop_key, gop_stuff); 
     } 
     /* Then, in any case, use contents of *gop_stuff 
        to do the global op ... */ 
   } 
 
   /* The following routine is called by MPI when a group is freed */ 
 
   gop_stuff_destructor (comm, keyval, gop_stuff, extra) 
   MPI_Comm comm; 
   int keyval; 
   gop_stuff_type *gop_stuff; 
   void *extra; 
   { 
     if (keyval != gop_key) { /* abort -- programming error */ } 
 
     /* The group's being freed removes one reference to gop_stuff */ 
     gop_stuff -&gt; ref_count -= 1; 
 
     /* If no references remain, then free the storage */ 
     if (gop_stuff -&gt; ref_count == 0) { 
       free((void *)gop_stuff); 
     } 
   } 
 
   /* The following routine is called by MPI when a group is copied */ 
   gop_stuff_copier (comm, keyval, extra, gop_stuff_in, gop_stuff_out, flag) 
   MPI_Comm comm; 
   int keyval; 
   gop_stuff_type *gop_stuff_in, *gop_stuff_out; 
   void *extra; 
   { 
     if (keyval != gop_key) { /* abort -- programming error */ } 
 
     /* The new group adds one reference to this gop_stuff */ 
     gop_stuff -&gt; ref_count += 1; 
     gop_stuff_out = gop_stuff_in; 
   } 
</tt></pre> 
  

<P>
<HR>
<A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node145.htm#Node145"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node152.htm#Node152"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node145.htm#Node145"> Caching</a>
<b>Next: </b><A HREF="node152.htm#Node152"> Naming Objects</a>
<b>Previous: </b><A HREF="node150.htm#Node150"> Error Class for Invalid Keyval</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>C++ Datatypes</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node330">299. C++ Datatypes</a></H2>
<A HREF="node329.htm#Node329"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node324.htm#Node324"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node331.htm#Node331"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node324.htm#Node324"> C++</a>
<b>Next: </b><A HREF="node331.htm#Node331"> Communicators</a>
<b>Previous: </b><A HREF="node329.htm#Node329"> Semantics</a>
<P>
  
<P> 
  
<P> 
Table <a href="node330.htm#Table12">12 
</a> lists all of the C++ predefined  
 MPI datatypes and their corresponding C and C++ datatypes,  
Table <a href="node330.htm#Table13">13 
</a> lists all of the Fortran  
predefined  MPI datatypes and their corresponding Fortran 77 datatypes.  
Table <a href="node330.htm#Table14">14 
</a> lists the C++ names for all other MPI  
datatypes.  
<P> 
 MPI::BYTE and  MPI::PACKED conform to the same  
restrictions as  MPI_BYTE and  MPI_PACKED, listed in  
Sections <a href="node42.htm#Node42">Message Data 
</a> on page <a href="node42.htm#Node42">Message Data 
</a> and  
Sections <a href="node82.htm#Node82">Pack and Unpack 
</a> on page <a href="node82.htm#Node82">Pack and Unpack 
</a>,  
respectively.  
<P> 
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> C datatype</TD><TD ALIGN="LEFT"> C++ datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 MPI::CHAR</TD><TD ALIGN="LEFT"> <tt> char</tt></TD><TD ALIGN="LEFT"> <tt> char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::SHORT</TD><TD ALIGN="LEFT"> <tt> signed short</tt></TD><TD ALIGN="LEFT"> <tt> signed short</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::INT</TD><TD ALIGN="LEFT"> <tt> signed int</tt></TD><TD ALIGN="LEFT"> <tt> signed int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG</TD><TD ALIGN="LEFT"> <tt> signed long</tt></TD><TD ALIGN="LEFT"> <tt> signed long</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG_LONG</TD><TD ALIGN="LEFT"> <tt> signed long long</tt></TD><TD ALIGN="LEFT"> <tt> signed long long</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::SIGNED_CHAR</TD><TD ALIGN="LEFT"> <tt> signed char</tt></TD><TD ALIGN="LEFT"> <tt> signed char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::UNSIGNED_CHAR</TD><TD ALIGN="LEFT"> <tt> unsigned char</tt></TD><TD ALIGN="LEFT"> <tt> unsigned char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::UNSIGNED_SHORT</TD><TD ALIGN="LEFT"> <tt> unsigned short</tt></TD><TD ALIGN="LEFT"> <tt> unsigned short</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::UNSIGNED</TD><TD ALIGN="LEFT"> <tt> unsigned int</tt></TD><TD ALIGN="LEFT"> <tt> unsigned int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::UNSIGNED_LONG</TD><TD ALIGN="LEFT"> <tt> unsigned long</tt></TD><TD ALIGN="LEFT"> <tt> unsigned long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::UNSIGNED_LONG_LONG</TD><TD ALIGN="LEFT"> <tt> unsigned long long</tt></TD><TD ALIGN="LEFT"> <tt> unsigned long long</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::FLOAT</TD><TD ALIGN="LEFT"> <tt> float</tt></TD><TD ALIGN="LEFT"> <tt> float</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::DOUBLE</TD><TD ALIGN="LEFT"> <tt> double</tt></TD><TD ALIGN="LEFT"> <tt> double</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG_DOUBLE</TD><TD ALIGN="LEFT"> <tt> long double</tt></TD><TD ALIGN="LEFT"> <tt> long double</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::BOOL</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> <tt> bool</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::COMPLEX</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> <tt> Complex&lt;float&gt;</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::DOUBLE_COMPLEX</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> <tt> Complex&lt;double&gt;</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG_DOUBLE_COMPLEX</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> <tt> Complex&lt;long double&gt;</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::WCHAR</TD><TD ALIGN="LEFT"> <tt> wchar_t</tt></TD><TD ALIGN="LEFT"> <tt> wchar_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::BYTE</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::PACKED</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 12: </b><A NAME="Table12">C++ names for the  MPI C and C++ predefined datatypes, and their
  corresponding C/C++ datatypes.</a><P> 
  
  
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> Fortran datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 MPI::INTEGER</TD><TD ALIGN="LEFT"> <tt> INTEGER</tt></TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::REAL</TD><TD ALIGN="LEFT"> <tt> REAL</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::DOUBLE_PRECISION</TD><TD ALIGN="LEFT"> <tt> DOUBLE PRECISION</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::F_COMPLEX</TD><TD ALIGN="LEFT"> <tt> COMPLEX</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LOGICAL</TD><TD ALIGN="LEFT"> <tt> LOGICAL</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::CHARACTER</TD><TD ALIGN="LEFT"> <tt> CHARACTER(1)</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::BYTE</TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::PACKED</TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 13: </b><A NAME="Table13">C++ names for the  MPI Fortran predefined datatypes, and their
  corresponding Fortran 77 datatypes.</a><P> 
  
  
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> Description </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 MPI::FLOAT_INT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::DOUBLE_INT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG_INT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::TWOINT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::SHORT_INT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::LONG_DOUBLE_INT</TD><TD ALIGN="LEFT"> C/C++ reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 MPI::TWOREAL</TD><TD ALIGN="LEFT"> Fortran reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::TWODOUBLE_PRECISION</TD><TD ALIGN="LEFT"> Fortran reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::TWOINTEGER</TD><TD ALIGN="LEFT"> Fortran reduction type </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 MPI::F_DOUBLE_COMPLEX</TD><TD ALIGN="LEFT"> Optional Fortran type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::INTEGER1</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::INTEGER2</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::INTEGER4</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::INTEGER8</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::REAL4</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::REAL8</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
 MPI::REAL16</TD><TD ALIGN="LEFT"> Explicit size type </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 14: </b><A NAME="Table14">C++ names for other  MPI datatypes.  Implementations may also
  define other optional types (e.g., <tt> MPI::INTEGER8</tt>).</a><P> 
  
  
The following table defines groups of MPI predefined datatypes:  
    
      
      
     
<BR> 
 C integer: MPI::INT, MPI::LONG, MPI::SHORT,  
 
<BR> 
  MPI::UNSIGNED_SHORT, MPI::UNSIGNED,  
  
 
<BR> 
  MPI::UNSIGNED_LONG,  
 
<BR> 
                   MPI::_LONG_LONG, MPI::UNSIGNED_LONG_LONG,  
 
<BR> 
  MPI::SIGNED_CHAR, MPI::UNSIGNED_CHAR  
  
 
<BR> 
 Fortran integer: MPI::INTEGER  
 
<BR> 
 Floating point: MPI::FLOAT, MPI::DOUBLE, MPI::REAL,  
 
<BR> 
  MPI::DOUBLE_PRECISION,  
 
<BR> 
  MPI::LONG_DOUBLE  
 
<BR> 
 Logical: MPI::LOGICAL, MPI::BOOL  
 
<BR> 
 Complex: MPI::F_COMPLEX, MPI::COMPLEX,  
 
<BR> 
  MPI::F_DOUBLE_COMPLEX,  
 
<BR> 
  MPI::DOUBLE_COMPLEX,  
 
<BR> 
  MPI::LONG_DOUBLE_COMPLEX  
 
<BR> 
 Byte: MPI::BYTE  
<BR> 
  
<P> 
Valid datatypes for each reduction operation   
are  
specified below in  
terms of the groups defined above.  
<P> 
    
      
      
     
<BR> 
 Op Allowed Types  
 
<BR> 
    
 
<BR> 
 MPI::MAX, MPI::MIN C integer, Fortran integer, Floating point  
 
<BR> 
 MPI::SUM, MPI::PROD C integer, Fortran integer,  
    Floating point, Complex  
 
<BR> 
 MPI::LAND, MPI::LOR, MPI::LXOR C integer, Logical  
 
<BR> 
 MPI::BAND, MPI::BOR, MPI::BXOR C integer, Fortran integer, Byte  
<BR> 
  
<P> 
  
 MPI::MINLOC and  MPI::MAXLOC perform just as their C  
and Fortran counterparts; see   
Section <a href="node104.htm#Node104">MINLOC and MAXLOC 
</a> on page <a href="node104.htm#Node104">MINLOC and MAXLOC 
</a>.   
  
<P> 
  
<P> 

<P>
<HR>
<A HREF="node329.htm#Node329"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node324.htm#Node324"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node331.htm#Node331"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node324.htm#Node324"> C++</a>
<b>Next: </b><A HREF="node331.htm#Node331"> Communicators</a>
<b>Previous: </b><A HREF="node329.htm#Node329"> Semantics</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

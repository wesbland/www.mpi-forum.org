<HTML>
<HEAD>
<!-- This file was generated by tohtml from appLang-CppNames.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Point-to-Point Communication C++ Bindings</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node406">360. Point-to-Point Communication C++ Bindings</a></H2>
<A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node407.htm#Node407"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node407.htm#Node407"> Datatypes C++ Bindings</a>
<b>Previous: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<P>
<BR> 
<pre><tt>namespace MPI { 
</tt></pre> 
 <tt> void Attach_buffer(void* buffer, int size) <BR></tt>  
 <tt> void Comm::Bsend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> Prequest Comm::Bsend_init(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> void Request::Cancel() const <BR></tt>  
 <tt> int Detach_buffer(void*&amp; buffer) <BR></tt>  
 <tt> void Request::Free() <BR></tt>  
 <tt> int Status::Get_count(const Datatype&amp; datatype) const <BR></tt>  
 <tt> int Status::Get_error() const <BR></tt>  
 <tt> int Status::Get_source() const <BR></tt>  
 <tt> bool Request::Get_status() const <BR></tt>  
 <tt> bool Request::Get_status(Status&amp; status) const <BR></tt>  
 <tt> int Status::Get_tag() const <BR></tt>  
 <tt> Request Comm::Ibsend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> bool Comm::Iprobe(int source, int tag) const <BR></tt>  
 <tt> bool Comm::Iprobe(int source, int tag, Status&amp; status) const <BR></tt>  
 <tt> Request Comm::Irecv(void* buf, int count, const Datatype&amp; datatype, int source, int tag) const <BR></tt>  
 <tt> Request Comm::Irsend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> bool Status::Is_cancelled() const <BR></tt>  
 <tt> Request Comm::Isend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> Request Comm::Issend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> void Comm::Probe(int source, int tag) const <BR></tt>  
 <tt> void Comm::Probe(int source, int tag, Status&amp; status) const <BR></tt>  
 <tt> void Comm::Recv(void* buf, int count, const Datatype&amp; datatype, int source, int tag) const <BR></tt>  
 <tt> void Comm::Recv(void* buf, int count, const Datatype&amp; datatype, int source, int tag, Status&amp; status) const <BR></tt>  
 <tt> Prequest Comm::Recv_init(void* buf, int count, const Datatype&amp; datatype, int source, int tag) const <BR></tt>  
 <tt> void Comm::Rsend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> Prequest Comm::Rsend_init(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> void Comm::Send(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> Prequest Comm::Send_init(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> void Comm::Sendrecv(const void *sendbuf, int sendcount, const Datatype&amp; sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype&amp; recvtype, int source, int recvtag) const <BR></tt>  
 <tt> void Comm::Sendrecv(const void *sendbuf, int sendcount, const Datatype&amp; sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype&amp; recvtype, int source, int recvtag, Status&amp; status) const <BR></tt>  
 <tt> void Comm::Sendrecv_replace(void* buf, int count, const Datatype&amp; datatype, int dest, int sendtag, int source, int recvtag) const <BR></tt>  
 <tt> void Comm::Sendrecv_replace(void* buf, int count, const Datatype&amp; datatype, int dest, int sendtag, int source, int recvtag, Status&amp; status) const <BR></tt>  
 <tt> void Status::Set_error(int error) <BR></tt>  
 <tt> void Status::Set_source(int source) <BR></tt>  
 <tt> void Status::Set_tag(int tag) <BR></tt>  
 <tt> void Comm::Ssend(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> Prequest Comm::Ssend_init(const void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
 <tt> void Prequest::Start() <BR></tt>  
 <tt> static void Prequest::Startall(int count, Prequest array_of_requests[]) <BR></tt>  
 <tt> bool Request::Test() <BR></tt>  
 <tt> bool Request::Test(Status&amp; status) <BR></tt>  
 <tt> static bool Request::Testall(int count, Request array_of_requests[]) <BR></tt>  
 <tt> static bool Request::Testall(int count, Request array_of_requests[], Status array_of_statuses[]) <BR></tt>  
 <tt> static bool Request::Testany(int count, Request array_of_requests[], int&amp; index) <BR></tt>  
 <tt> static bool Request::Testany(int count, Request array_of_requests[], int&amp; index, Status&amp; status) <BR></tt>  
 <tt> static int Request::Testsome(int incount, Request array_of_requests[], int array_of_indices[]) <BR></tt>  
 <tt> static int Request::Testsome(int incount, Request array_of_requests[], int array_of_indices[], Status array_of_statuses[]) <BR></tt>  
 <tt> void Request::Wait() <BR></tt>  
 <tt> void Request::Wait(Status&amp; status) <BR></tt>  
 <tt> static void Request::Waitall(int count, Request array_of_requests[]) <BR></tt>  
 <tt> static void Request::Waitall(int count, Request array_of_requests[], Status array_of_statuses[]) <BR></tt>  
 <tt> static int Request::Waitany(int count, Request array_of_requests[]) <BR></tt>  
 <tt> static int Request::Waitany(int count, Request array_of_requests[], Status&amp; status) <BR></tt>  
 <tt> static int Request::Waitsome(int incount, Request array_of_requests[], int array_of_indices[]) <BR></tt>  
 <tt> static int Request::Waitsome(int incount, Request array_of_requests[], int array_of_indices[], Status array_of_statuses[]) <BR></tt>  
<BR> 
<pre><tt>}; 
</tt></pre> 

<P>
<HR>
<A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node407.htm#Node407"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node407.htm#Node407"> Datatypes C++ Bindings</a>
<b>Previous: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

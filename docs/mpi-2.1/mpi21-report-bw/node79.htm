<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Correct Use of Addresses</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node79">78. Correct Use of Addresses</a></H2>
<A HREF="node78.htm#Node78"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node80.htm#Node80"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node80.htm#Node80"> Decoding a Datatype</a>
<b>Previous: </b><A HREF="node78.htm#Node78"> Use of General Datatypes in Communication</a>
<P>
  
<P> 
Successively declared variables in C or Fortran are not necessarily  
stored at contiguous locations.  Thus, care must be exercised  
that displacements do not cross from one variable  
to another.  Also, in machines with a segmented address space,  
addresses are not unique and address arithmetic has some peculiar  
properties.   Thus, the use of <b> addresses</b>,  
that is, displacements relative to the  
start address  MPI_BOTTOM, has to be restricted.  
<P> 
Variables belong  
to the same <b> sequential storage</b> if they belong to the same  
array,  
to the same  COMMON block in Fortran, or to the same structure in C.  
Valid addresses are defined recursively as follows:  
<P> 
<ol> 
 
1. The function   
 MPI_GET_ADDRESS   
returns a valid address, when  
passed as argument a variable of the calling program.  
 
<BR> 
2. The  buf argument of a communication function evaluates to a  
valid address, when passed as argument a variable of the calling program.  
 
<BR> 
3. If  v is a valid address, and  i is an  
integer, then  v+i is a valid address, provided  v and  
 v+i are in the same sequential storage.  
 
<BR> 
4. If  v is a valid address then  MPI_BOTTOM +  v is a valid  
address.  
</ol> 
A correct program uses only valid addresses to identify the  
locations of entries in communication buffers.  
Furthermore, if  u and  v are two valid addresses, then  
the (integer)  
difference  u - v can be computed only if both  u and  v  
are in the same sequential storage.  
No other arithmetic operations can be meaningfully executed on addresses.  
<P> 
The rules above impose no constraints on the use of derived  
datatypes, as long as they are used to define a communication buffer  
that is wholly contained within the same sequential storage.  
However, the construction of a communication buffer that contains  
variables that are not within the same sequential storage must obey  
certain restrictions.  Basically, a communication buffer with  
variables that are not within the same sequential storage can be used  
only by specifying in the communication call  buf =  
MPI_BOTTOM,  count = 1, and using a  datatype  
argument where all displacements are valid (absolute) addresses.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
It is not expected that  MPI implementations will be able to detect  
erroneous, ``out of bound'' displacements --- unless those overflow the  
user address space --- since the  MPI call may not know the extent of the  
arrays and records in the host program.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
There is no need to distinguish (absolute) addresses and (relative)  
displacements on a machine with contiguous address space:  
 MPI_BOTTOM is  
zero, and both addresses and displacements are integers.  On machines where the  
distinction is required, addresses are recognized as expressions that involve  
 MPI_BOTTOM.  
 (<em> End of advice to implementors.</em>) <BR> 
  

<P>
<HR>
<A HREF="node78.htm#Node78"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node80.htm#Node80"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node80.htm#Node80"> Decoding a Datatype</a>
<b>Previous: </b><A HREF="node78.htm#Node78"> Use of General Datatypes in Communication</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

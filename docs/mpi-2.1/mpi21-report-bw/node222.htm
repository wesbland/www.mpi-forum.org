<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Another Way to Establish  MPI Communication</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node222">206. Another Way to Establish  MPI Communication</a></H2>
<A HREF="node221.htm#Node221"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node223.htm#Node223"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node217.htm#Node217"> Other Functionality</a>
<b>Next: </b><A HREF="node223.htm#Node223"> One-Sided Communications</a>
<b>Previous: </b><A HREF="node221.htm#Node221"> Releasing Connections</a>
<P>
<TABLE><TR><TD COLSPAN=2>MPI_COMM_JOIN(fd, intercomm)</TD></TR>  
<TR><TD> IN fd</TD><TD>socket file descriptor</TD></TR>  
<TR><TD> OUT intercomm</TD><TD>new intercommunicator (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Comm_join(int fd, MPI_Comm *intercomm) <BR></tt>  
 <tt> MPI_COMM_JOIN(FD, INTERCOMM, IERROR)<BR> INTEGER FD, INTERCOMM, IERROR <BR></tt>  
 <tt> static MPI::Intercomm MPI::Comm::Join(const int fd) <BR></tt>  
<P> 
 MPI_COMM_JOIN is intended for  MPI implementations  
that exist in an environment supporting the Berkeley Socket  
interface [<a href="node427.htm#-Bib33">33</a>,<a href="node427.htm#-Bib37">37</a>].   
  
Implementations that exist in an environment not supporting Berkeley Sockets  
should provide the entry point for  MPI_COMM_JOIN  
and should return  MPI_COMM_NULL.  
  
<P> 
This call creates an intercommunicator from the union of two  MPI  
processes which are connected by a socket.   
 MPI_COMM_JOIN should normally  
succeed if the local and remote processes have access to   
the same implementation-defined  MPI communication universe.   
<P> 
 
<BR> 
<em> Advice to users.</em>  
 An  MPI implementation may require a specific  
communication medium for  MPI communication, such as a shared memory  
segment or a special switch. In this case, it may not be possible for  
two processes to successfully join even if there is a socket  
connecting them and they are using the same  MPI implementation.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will attempt to establish  
communication over a slow medium if its preferred one  
is not available.   
If implementations do not do this, they must document  
why they cannot do  MPI communication over the medium  
used by the socket (especially if the socket is a TCP  
connection).  
 (<em> End of advice to implementors.</em>) <BR> 
 fd is a file descriptor representing a socket of type  
 SOCK_STREAM (a two-way reliable byte-stream connection).  
Non-blocking I/O and asynchronous notification via  SIGIO  
must not be enabled for the socket. The socket must be in a connected  
state.  The socket must be quiescent when  
 MPI_COMM_JOIN is called (see below). It is the responsibility  
of the application to create the socket using standard socket API  
calls.  
<P> 
 MPI_COMM_JOIN must be called by the process at each end of the  
socket. It does not return until both processes have called  
 MPI_COMM_JOIN. The two processes are referred to as the local  
and remote processes.  
<P> 
 MPI uses the socket to bootstrap creation of the intercommunicator,  
and for nothing else. Upon return from  MPI_COMM_JOIN, the  
file descriptor will be open and quiescent (see below).  
<P> 
If  MPI is unable to create an intercommunicator, but  
is able to leave the socket in its original state, with no   
  
pending communication, it succeeds and   
sets  intercomm to  MPI_COMM_NULL.  
  
<P> 
The socket must be quiescent before  
 MPI_COMM_JOIN is called and  
after  MPI_COMM_JOIN returns. More specifically, on entry to  
 MPI_COMM_JOIN, a <tt> read</tt> on the socket will not read any data  
that was written to the socket before the remote process called  
 MPI_COMM_JOIN. On exit from  MPI_COMM_JOIN, a <tt> read</tt>  
will not read any data that was written to the socket before the  
remote process returned from  MPI_COMM_JOIN. It is the  
responsibility of the application to ensure the first condition, and  
the responsibility of the  MPI implementation to ensure the second.  
In a multithreaded application, the application must ensure that  
one thread does not access the socket while another is calling  
 MPI_COMM_JOIN, or call  MPI_COMM_JOIN concurrently.   
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
 MPI is free to use any available communication path(s) for  MPI  
messages in the new communicator; the socket is only used for the  
initial handshaking.  
 (<em> End of advice to implementors.</em>) <BR> 
  
 MPI_COMM_JOIN uses non- MPI communication to do its work.   
The interaction of non- MPI communication with pending  MPI  
communication is not defined. Therefore, the result of calling  
 MPI_COMM_JOIN on two connected processes   
(see Section <a href="node221.htm#Node221">Releasing Connections 
</a> on page  
<a href="node221.htm#Node221">Releasing Connections 
</a> for the definition of connected) is  
undefined.  
  
<P> 
The returned communicator may be used to establish  MPI  
communication with additional processes, through the usual  MPI  
communicator creation mechanisms.   
  
<P> 
  
  
<P> 
<P> 

<P>
<HR>
<A HREF="node221.htm#Node221"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node223.htm#Node223"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node217.htm#Node217"> Other Functionality</a>
<b>Next: </b><A HREF="node223.htm#Node223"> One-Sided Communications</a>
<b>Previous: </b><A HREF="node221.htm#Node221"> Releasing Connections</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

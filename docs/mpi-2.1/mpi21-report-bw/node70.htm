<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Subarray Datatype Constructor</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node70">69. Subarray Datatype Constructor</a></H2>
<A HREF="node69.htm#Node69"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node71.htm#Node71"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node71.htm#Node71"> Distributed Array Datatype Constructor</a>
<b>Previous: </b><A HREF="node69.htm#Node69"> Datatype Constructors</a>
<P>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_CREATE_SUBARRAY(ndims, array_of_sizes, array_of_subsizes,  
array_of_starts, order, oldtype, newtype)</TD></TR>  
<TR><TD> IN ndims</TD><TD>number of array dimensions (positive integer)</TD></TR>  
<TR><TD> IN array_of_sizes</TD><TD>number of elements of type  oldtype  
                        in each dimension of the full array  
                        (array of positive integers)</TD></TR>  
<TR><TD> IN array_of_subsizes</TD><TD>number of elements of type  oldtype  
                        in each dimension of the subarray  
                        (array of positive integers)</TD></TR>  
<TR><TD> IN array_of_starts</TD><TD>starting coordinates of the subarray  
                    in each dimension (array of nonnegative integers)</TD></TR>  
<TR><TD> IN order</TD><TD>array storage order flag (state)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>array element datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_create_subarray(int ndims, int array_of_sizes[], int array_of_subsizes[], int array_of_starts[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
  
 <tt> MPI_TYPE_CREATE_SUBARRAY(NDIMS, ARRAY_OF_SIZES, ARRAY_OF_SUBSIZES, ARRAY_OF_STARTS, ORDER, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER NDIMS, ARRAY_OF_SIZES(*), ARRAY_OF_SUBSIZES(*), ARRAY_OF_STARTS(*), ORDER, OLDTYPE, NEWTYPE, IERROR <BR></tt>  
  
 <tt> MPI::Datatype MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const <BR></tt>  
  
<P> 
The subarray type constructor creates an  MPI datatype  
describing an   
<I>n</I>-dimensional  
subarray of an   
<I>n</I>-dimensional  
array.  
The subarray may be situated anywhere within the full array,  
and may be of any nonzero size up to the size of the larger array  
as long as it is confined within this array.  
  
This type constructor facilitates creating filetypes to access  
  
arrays distributed in blocks among processes to a  
single file that contains the global array,  
see  MPI I/O, especially Section <a href="node258.htm#Node258">Definitions 
</a> on page <a href="node258.htm#Node258">Definitions 
</a>.  
  
This type constructor can handle arrays with an arbitrary number of  
dimensions and works for both C and Fortran ordered matrices  
(i.e., row-major or column-major).  Note that a C program may use Fortran  
order and a Fortran program may use C order.  
  
<P> 
  
The  ndims parameter specifies the number of dimensions in the full  
data array and gives the number of elements in   
 array_of_sizes,  array_of_subsizes,   
and  array_of_starts.  
<P> 
The number of elements of type  oldtype in  
each dimension of the   
<I>n</I>-dimensional  
array and the  
requested subarray are specified by   
 array_of_sizes and  array_of_subsizes,  
respectively.  
For any dimension   
 i,   
it is erroneous to specify   
 array_of_subsizes[i] <I>&lt;</I> 1 or   
 array_of_subsizes[i] <I>&gt;</I>  array_of_sizes[i].  
  
<P> 
The  array_of_starts contains the  
starting coordinates of each  
dimension of the subarray.  
Arrays are assumed to be indexed starting from zero.  
For any dimension <I>i</I>, it is erroneous to specify   
 array_of_starts[i] <I>&lt;</I> 0 or   
 array_of_starts[i]  
<I>&gt;</I> ( array_of_sizes[i] <I>-</I>  array_of_subsizes[i]).  
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
In a Fortran program with arrays indexed starting from 1,  
if the starting coordinate of a particular dimension  
of the subarray is  n,  
then the entry in  array_of_starts  
for that dimension is  n-1.  
 (<em> End of advice to users.</em>) <BR> 
  
The  order argument specifies the storage order for the  
subarray as well as the full array.  
  
It must be set to one  
of the following:  
<dl> 
 
<dt> 
<b>{</b> MPI_ORDER_C}</b><dd> 
The ordering used by C arrays, (i.e., row-major order)  
 
<dt> 
<b>{</b> MPI_ORDER_FORTRAN}</b><dd> 
The ordering used by Fortran arrays,  
(i.e., column-major order)  
</dl> 
<BR> 
  
A  ndims-dimensional subarray ( newtype) with no  
extra padding can be defined by the function Subarray() as  
follows:  
<P><IMG WIDTH=294 HEIGHT=45 SRC="img30.gif"><P>
Let the typemap of  oldtype have the form:  
<I> 
{(type<SUB>0</SUB>,disp<SUB>0</SUB>),(type<SUB>1</SUB>,disp<SUB>1</SUB>),...,(type<SUB>n-1</SUB>,disp<SUB>n-1</SUB>)} 
</I>  
where <I>type<SUB>i</SUB></I> is a predefined  MPI datatype, and let <I>ex</I> be the  
extent of  oldtype.  Then we define the Subarray() function  
recursively using the following three equations.  
Equation <a href="node70.htm#Equation2">2 
</a> defines the base step.  
Equation <a href="node70.htm#Equation2">2 
</a> defines the recursion step when  
 order =  MPI_ORDER_FORTRAN, and  
Equation <a href="node70.htm#Equation2">2 
</a> defines the recursion step when  
 order =  MPI_ORDER_C.  
<P> 
<P><A NAME="node70.htm#Equation2"><IMG WIDTH=394 HEIGHT=409 SRC="img31.gif"></a><P>
  
  
For an example use of  MPI_TYPE_CREATE_SUBARRAY in the  
context of I/O see Section <a href="node306.htm#Node306">Subarray Filetype Constructor 
</a>.  
  
<P> 
  

<P>
<HR>
<A HREF="node69.htm#Node69"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node71.htm#Node71"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node71.htm#Node71"> Distributed Array Datatype Constructor</a>
<b>Previous: </b><A HREF="node69.htm#Node69"> Datatype Constructors</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Memory Allocation</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node181">169. Memory Allocation</a></H1>
<A HREF="node176.htm#Node180"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node182.htm#Node182"> Error Handling</a>
<b>Previous: </b><A HREF="node176.htm#Node180"> Clock Synchronization</a>
<P>
  
<P> 
In some systems, message-passing and remote-memory-access ( RMA) operations  
run faster when accessing specially allocated memory (e.g., memory that is  
shared by the other processes in the communicating group on an SMP).   MPI  
provides a mechanism for allocating and freeing such special memory.  The use  
of such memory for message-passing or  RMA is not mandatory, and this memory  
can be used without restrictions as any other dynamically allocated memory.  
However, implementations may restrict the use of the  MPI_WIN_LOCK  
and  MPI_WIN_UNLOCK functions to windows allocated in such memory  
(see Section <a href="node236.htm#Node236">Lock 
</a>.)  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLOC_MEM(size, info, baseptr)</TD></TR>  
<TR><TD> IN size</TD><TD>size of memory segment in bytes (nonnegative integer)</TD></TR>  
<TR><TD> IN info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD> OUT baseptr</TD><TD>pointer to beginning of memory segment allocated</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) <BR></tt>  
<P> 
 <tt> MPI_ALLOC_MEM(SIZE, INFO, BASEPTR, IERROR) <BR> INTEGER INFO, IERROR <BR>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR <BR></tt>  
<P> 
 <tt> void* MPI::Alloc_mem(MPI::Aint size, const MPI::Info&amp; info) <BR></tt>  
<P> 
The  info argument can be used to provide  
directives that control the desired location of the allocated memory.  
Such a directive does not affect the semantics of the call. Valid  
 info values are implementation-dependent; a null directive  
value of  info = MPI_INFO_NULL is always valid.  
<P> 
The  function  MPI_ALLOC_MEM may return an error code of class   
 MPI_ERR_NO_MEM   
to indicate it failed because memory   
is exhausted.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FREE_MEM(base)</TD></TR>  
<TR><TD> IN base</TD><TD>initial address of memory segment allocated by <BR>  
 MPI_ALLOC_MEM (choice)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Free_mem(void *base) <BR></tt>  
<P> 
  
 <tt> MPI_FREE_MEM(BASE, IERROR) <BR>  &lt;type&gt; BASE(*) <BR>INTEGER IERROR <BR></tt>  
  
<P> 
 <tt> void MPI::Free_mem(void *base) <BR></tt>  
<P> 
  
The function  MPI_FREE_MEM may return an error code of class  
 MPI_ERR_BASE to indicate an invalid base argument.  
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The C and C++ bindings of  MPI_ALLOC_MEM and  
 MPI_FREE_MEM are similar to the bindings for the  
<tt> malloc</tt> and <tt> free</tt> C library calls:  
a call to  
 MPI_Alloc_mem(..., &amp;base) should be paired with a call to  
 MPI_Free_mem(base) (one less   
level of indirection). Both arguments are declared to  
be of same type  void* so as to facilitate type casting.  
  
The Fortran binding is consistent with the C and C++ bindings:  
the Fortran  MPI_ALLOC_MEM call returns in  
 baseptr the (integer valued) address of the allocated memory.  
The  base argument of  MPI_FREE_MEM is a choice  
argument, which passes (a reference to) the variable stored at that location.  
  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
If  MPI_ALLOC_MEM allocates special memory, then  
a design similar to the design of C <tt> malloc</tt> and <tt> free</tt>  
functions has to  
be used, in order to find out the size of a memory segment, when the segment is freed.  
If no special memory is used,  
 MPI_ALLOC_MEM simply invokes <tt> malloc</tt>, and  MPI_FREE_MEM invokes <tt> free</tt>.  
<P> 
A call to  MPI_ALLOC_MEM can be used in shared memory  
systems to allocate  memory in a shared memory segment.  
 (<em> End of advice to implementors.</em>) <BR> 
<BR><b> Example</b>  
  
  
  
<P> 
Example of use of  MPI_ALLOC_MEM, in Fortran with pointer  
support. We assume 4-byte  REALs, and assume that pointers  
are address-sized.  
  
<BR> 
<pre><tt>REAL A 
POINTER (P, A(100,100))   ! no memory is allocated 
CALL MPI_ALLOC_MEM(4*100*100, MPI_INFO_NULL, P, IERR) 
! memory is allocated 
... 
A(3,5) = 2.71; 
... 
CALL MPI_FREE_MEM(A, IERR) ! memory is freed 
</tt></pre> 
Since standard Fortran does not support (C-like) pointers, this code is not Fortran 77 or Fortran 90 code.  
Some compilers (in particular, at the time of writing,  
g77 and Fortran compilers for  
Intel) do not support this code.  
  
  
<P> 
  
<BR><b> Example</b>  
  
Same example, in C  
<BR> 
<pre><tt>float  (* f)[100][100] ; 
/* no memory is allocated */ 
MPI_Alloc_mem(sizeof(float)*100*100, MPI_INFO_NULL, &amp;f); 
/* memory allocated */ 
... 
(*f)[5][3] = 2.71; 
... 
MPI_Free_mem(f); 
</tt></pre> 
  
  
  

<P>
<HR>
<A HREF="node176.htm#Node180"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node182.htm#Node182"> Error Handling</a>
<b>Previous: </b><A HREF="node176.htm#Node180"> Clock Synchronization</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

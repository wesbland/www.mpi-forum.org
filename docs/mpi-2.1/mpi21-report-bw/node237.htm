<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Assertions</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node237">221. Assertions</a></H2>
<A HREF="node236.htm#Node236"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node233.htm#Node233"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node238.htm#Node238"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node233.htm#Node233"> Synchronization Calls</a>
<b>Next: </b><A HREF="node238.htm#Node238"> Miscellaneous Clarifications</a>
<b>Previous: </b><A HREF="node236.htm#Node236"> Lock</a>
<P>
  
<P> 
The  assert argument in the calls   
 MPI_WIN_POST,  MPI_WIN_START,  MPI_WIN_FENCE   
and  MPI_WIN_LOCK is used to provide assertions on the context of the   
call that may be used to optimize performance.  The  assert argument does not change program  
semantics if it provides correct information on the program ---  
it is erroneous to provides incorrect information.  
Users may always provide  
 assert = 0 to indicate a general case, where no guarantees are made.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Many implementations may not take advantage of the information in  assert; some of the information is relevant only for noncoherent, shared memory machines.  Users should consult their implementation manual  
to  
find which information is useful on each system. On the other hand,  
applications that provide correct  
assertions whenever applicable are portable and will  
take advantage of assertion specific optimizations, whenever available.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Implementations can always ignore the  assert argument.  
Implementors should  
document which  assert values are significant on their implementation.  
 (<em> End of advice to implementors.</em>) <BR> 
 assert is the bit-vector OR of zero or more of the following  
integer constants:  
 MPI_MODE_NOCHECK,  MPI_MODE_NOSTORE,  
 MPI_MODE_NOPUT,  
 MPI_MODE_NOPRECEDE and  MPI_MODE_NOSUCCEED.  
The significant options are listed below, for each call.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
C/C++ users can use bit vector or (<IMG WIDTH=1 HEIGHT=11 SRC="img104.gif">
) to combine these constants;  
Fortran 90 users  
can use the bit-vector <tt> IOR</tt> intrinsic.   
Fortran 77 users can use (nonportably)  
bit  
vector <tt> IOR</tt> on systems that support it.  Alternatively, Fortran users can   
portably use integer addition to OR the constants (each constant should  
appear at most once in the addition!).  
 (<em> End of advice to users.</em>) <BR> 
<dl> 
 
<dt> 
<b></b><dd> 
<b> MPI_WIN_START:</b>  
<dl> 
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOCHECK  
--- the matching calls to  MPI_WIN_POST  
have  
already completed on all target processes when the call to  
 MPI_WIN_START is made.    
  
The nocheck option can be  
specified in a start call if and only if it is specified in each  
matching post call.  
This is similar to the optimization  
of ``ready-send'' that may save a handshake when the handshake is  
implicit in the code.  
(However, ready-send is matched by a regular receive, whereas  
both start and post must specify the nocheck option.)  
</dl> 
<BR> 
   
 
<dt> 
<b></b><dd> 
<b> MPI_WIN_POST:</b>  
<dl> 
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOCHECK    
  
--- the matching calls to  MPI_WIN_START  
have not yet occurred  
on any origin processes when the call to  
 MPI_WIN_POST is made.  
The nocheck option can be specified by a post call if and only if it  
is specified by each matching start call.  
    
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOSTORE   
--- the local window was not updated by  
local  
stores (or local get or receive calls) since  
last synchronization.  This may avoid the need for cache synchronization at  
the  
post call.  
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOPUT  
--- the local window will not be updated by  
put or accumulate  
calls after the post call, until the ensuing (wait) synchronization.  
This may avoid the need for cache synchronization at the wait call.  
</dl> 
<BR> 
 
<dt> 
<b></b><dd> 
<b> MPI_WIN_FENCE:</b>  
<dl> 
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOSTORE  
--- the local window was not updated by  
local stores (or local get or receive calls) since last synchronization.  
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOPUT  
--- the local window will not be updated  
by put or accumulate calls after  
the fence call, until the ensuing (fence) synchronization.  
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOPRECEDE  
--- the fence does not complete any  
sequence of locally issued  RMA calls.  If this assertion is given by  
any process in the window group, then it must be given by all  
processes in the group.   
 
<dt> 
<b>{</b> MPI_MODE_NOSUCCEED}</b><dd> 
--- the fence does not start any sequence  
of locally issued  RMA calls.  If the assertion is given by any process  
in the window group, then it must be given by all processes in the group.  
</dl> 
<BR> 
 
<dt> 
<b></b><dd> 
<b>  MPI_WIN_LOCK:</b>  
<dl> 
 
<dt> 
<b> </b><dd> 
 MPI_MODE_NOCHECK  
--- no other process holds, or will attempt  
to acquire a  
conflicting lock, while the caller holds the window lock.   This is useful  
when  
mutual exclusion is achieved by other means, but the coherence operations  
that  
may be attached to the lock and unlock calls are still required.  
</dl> 
<BR> 
</dl> 
<BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Note that the nostore and noprecede flags provide  
information on what happened <em> before</em>  
the call; the noput and nosucceed  
flags provide information on what will happen <em>  
after</em> the call.  
 (<em> End of advice to users.</em>) <BR> 
  

<P>
<HR>
<A HREF="node236.htm#Node236"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node233.htm#Node233"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node238.htm#Node238"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node233.htm#Node233"> Synchronization Calls</a>
<b>Next: </b><A HREF="node238.htm#Node238"> Miscellaneous Clarifications</a>
<b>Previous: </b><A HREF="node236.htm#Node236"> Lock</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from appLang-CppNames.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>I/O C++ Bindings</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node416">370. I/O C++ Bindings</a></H2>
<A HREF="node415.htm#Node415"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node417.htm#Node417"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node417.htm#Node417"> Language Bindings C++ Bindings</a>
<b>Previous: </b><A HREF="node415.htm#Node415"> External Interfaces C++ Bindings</a>
<P>
<BR> 
<pre><tt>namespace MPI { 
</tt></pre> 
 <tt> void File::Close() <BR></tt>  
 <tt> static void File::Delete(const char* filename, const Info&amp; info) <BR></tt>  
 <tt> int File::Get_amode() const <BR></tt>  
 <tt> bool File::Get_atomicity() const <BR></tt>  
 <tt> Offset File::Get_byte_offset(const Offset disp) const <BR></tt>  
 <tt> Group File::Get_group() const <BR></tt>  
 <tt> Info File::Get_info() const <BR></tt>  
 <tt> Offset File::Get_position() const <BR></tt>  
 <tt> Offset File::Get_position_shared() const <BR></tt>  
 <tt> Offset File::Get_size() const <BR></tt>  
 <tt> Aint File::Get_type_extent(const Datatype&amp; datatype) const <BR></tt>  
 <tt> void File::Get_view(Offset&amp; disp, Datatype&amp; etype, Datatype&amp; filetype, char* datarep) const <BR></tt>  
 <tt> Request File::Iread(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> Request File::Iread_at(Offset offset, void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> Request File::Iread_shared(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> Request File::Iwrite(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> Request File::Iwrite_at(Offset offset, const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> Request File::Iwrite_shared(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> static File File::Open(const Intracomm&amp; comm, const char* filename, int amode, const Info&amp; info) <BR></tt>  
 <tt> void File::Preallocate(Offset size) <BR></tt>  
 <tt> void File::Read(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read(void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Read_all(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_all(void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Read_all_begin(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_all_end(void* buf) <BR></tt>  
 <tt> void File::Read_all_end(void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Read_at(Offset offset, void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_at(Offset offset, void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Read_at_all(Offset offset, void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_at_all(Offset offset, void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Read_at_all_begin(Offset offset, void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_at_all_end(void* buf) <BR></tt>  
 <tt> void File::Read_at_all_end(void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Read_ordered(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_ordered(void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Read_ordered_begin(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_ordered_end(void* buf) <BR></tt>  
 <tt> void File::Read_ordered_end(void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Read_shared(void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Read_shared(void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void Register_datarep(const char* datarep, Datarep_conversion_function* read_conversion_fn, Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state) <BR></tt>  
 <tt> void File::Seek(Offset offset, int whence) <BR></tt>  
 <tt> void File::Seek_shared(Offset offset, int whence) <BR></tt>  
 <tt> void File::Set_atomicity(bool flag) <BR></tt>  
 <tt> void File::Set_info(const Info&amp; info) <BR></tt>  
 <tt> void File::Set_size(Offset size) <BR></tt>  
 <tt> void File::Set_view(Offset disp, const Datatype&amp; etype, const Datatype&amp; filetype, const char* datarep, const Info&amp; info) <BR></tt>  
 <tt> void File::Sync() <BR></tt>  
 <tt> void File::Write(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write(const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Write_all(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_all(const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Write_all_begin(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_all_end(const void* buf) <BR></tt>  
 <tt> void File::Write_all_end(const void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Write_at(Offset offset, const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_at(Offset offset, const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Write_at_all(Offset offset, const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_at_all(Offset offset, const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Write_at_all_begin(Offset offset, const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_at_all_end(const void* buf) <BR></tt>  
 <tt> void File::Write_at_all_end(const void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Write_ordered(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_ordered(const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
 <tt> void File::Write_ordered_begin(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_ordered_end(const void* buf) <BR></tt>  
 <tt> void File::Write_ordered_end(const void* buf, Status&amp; status) <BR></tt>  
 <tt> void File::Write_shared(const void* buf, int count, const Datatype&amp; datatype) <BR></tt>  
 <tt> void File::Write_shared(const void* buf, int count, const Datatype&amp; datatype, Status&amp; status) <BR></tt>  
<BR> 
<pre><tt>}; 
</tt></pre> 

<P>
<HR>
<A HREF="node415.htm#Node415"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node417.htm#Node417"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node417.htm#Node417"> Language Bindings C++ Bindings</a>
<b>Previous: </b><A HREF="node415.htm#Node415"> External Interfaces C++ Bindings</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

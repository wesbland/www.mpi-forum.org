<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Interlanguage Communication</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node366">320. Interlanguage Communication</a></H2>
<A HREF="node365.htm#Node365"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node351.htm#Node351"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node367.htm#Node367"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node351.htm#Node351"> Language Interoperability</a>
<b>Next: </b><A HREF="node367.htm#Node367"> Language Bindings Summary</a>
<b>Previous: </b><A HREF="node365.htm#Node365"> Constants</a>
<P>
The type matching rules for communications in  MPI are not changed:  
the datatype specification for each item sent should match,  
in type signature, the datatype specification used to receive this item  
(unless one of the types is  MPI_PACKED).  
Also, the  
type of a message item should match the type declaration for the  
corresponding communication buffer location, unless the type is  
 MPI_BYTE or  MPI_PACKED.  Interlanguage  
communication is allowed if it complies with these rules.  
<P> 
  
<BR><b> Example</b>  
In the example below, a Fortran array is sent from Fortran and received in  
C.  
<P> 
<BR> 
<pre><tt>! FORTRAN CODE 
REAL R(5) 
INTEGER TYPE, IERR, MYRANK, AOBLEN(1), AOTYPE(1) 
INTEGER (KIND=MPI_ADDRESS_KIND) AODISP(1) 
 
! create an absolute datatype for array R 
AOBLEN(1) = 5 
CALL MPI_GET_ADDRESS( R, AODISP(1), IERR) 
AOTYPE(1) = MPI_REAL 
CALL MPI_TYPE_CREATE_STRUCT(1, AOBLEN,AODISP,AOTYPE, TYPE, IERR) 
CALL MPI_TYPE_COMMIT(TYPE, IERR) 
 
CALL MPI_COMM_RANK( MPI_COMM_WORLD, MYRANK, IERR) 
IF (MYRANK.EQ.0) THEN 
   CALL MPI_SEND( MPI_BOTTOM, 1, TYPE, 1, 0, MPI_COMM_WORLD, IERR) 
ELSE 
   CALL C_ROUTINE(TYPE) 
END IF 
</tt></pre> 
  
<BR> 
<pre><tt>/* C code */ 
 
void C_ROUTINE(MPI_Fint *fhandle) 
{ 
   MPI_Datatype type; 
   MPI_Status status; 
    
   type = MPI_Type_f2c(*fhandle); 
    
   MPI_Recv( MPI_BOTTOM, 1, type, 0, 0, MPI_COMM_WORLD, &amp;status); 
} 
</tt></pre> 
  
  
<P> 
 MPI implementors may weaken these type matching rules, and allow  
messages to be sent with Fortran types and received with C types, and  
vice versa, when those types match.  I.e., if the Fortran type  
 INTEGER is identical to the C type  
 int, then an  MPI implementation may allow data to be sent  
with datatype  MPI_INTEGER and be received with datatype  
 MPI_INT.  However, such code is not portable.  
  
<P> 
  
<P> 
   
   
   
   
   
   
   
   
   
   
   
   
 <P> 

<P>
<HR>
<A HREF="node365.htm#Node365"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node351.htm#Node351"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node367.htm#Node367"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node351.htm#Node351"> Language Interoperability</a>
<b>Next: </b><A HREF="node367.htm#Node367"> Language Bindings Summary</a>
<b>Previous: </b><A HREF="node365.htm#Node365"> Constants</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

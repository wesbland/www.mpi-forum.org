<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Datatypes</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node149">144. Datatypes</a></H2>
<A HREF="node148.htm#Node148"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node145.htm#Node145"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node145.htm#Node145"> Caching</a>
<b>Next: </b><A HREF="node150.htm#Node150"> Error Class for Invalid Keyval</a>
<b>Previous: </b><A HREF="node148.htm#Node148"> Windows</a>
<P>
  
<P> 
The new functions for caching on datatypes are:  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_CREATE_KEYVAL(type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state)</TD></TR>  
<TR><TD> IN type_copy_attr_fn</TD><TD>copy callback function for  type_keyval (function)</TD></TR>  
<TR><TD> IN type_delete_attr_fn</TD><TD>delete callback function for  type_keyval (function)</TD></TR>  
<TR><TD> OUT type_keyval</TD><TD>key value for future access (integer)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state for callback functions</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) <BR></tt>  
<P> 
 <tt> MPI_TYPE_CREATE_KEYVAL(TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN, TYPE_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN<BR>INTEGER TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
<P> 
  
 <tt> static int MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state) <BR></tt>  
  
<P> 
  
The argument  type_copy_attr_fn may be specified as  
  
 MPI_TYPE_NULL_COPY_FN or  
  
 MPI_TYPE_DUP_FN  
from either C, C++, or Fortran.  
 MPI_TYPE_NULL_COPY_FN  
is a function that does nothing other than returning  flag = 0  
and  MPI_SUCCESS.  
 MPI_TYPE_DUP_FN is a simple-minded  
copy function that sets  flag = 1,  
returns the value of  
 attribute_val_in in  attribute_val_out, and  
returns  MPI_SUCCESS.  
<P> 
  
  
  
The argument  type_delete_attr_fn may be specified as  
  
  
 MPI_TYPE_NULL_DELETE_FN from either C, C++, or Fortran.  
 MPI_TYPE_NULL_DELETE_FN is a function that does nothing, other  
than returning  MPI_SUCCESS.    
<P> 
  
  
  
<P> 
The C callback functions are:  
<P> 
  
 <tt> typedef int MPI_Type_copy_attr_function(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag); <BR></tt>  
<P> 
and  
<P> 
 <tt> typedef int MPI_Type_delete_attr_function(MPI_Datatype type, int type_keyval, void *attribute_val, void *extra_state); <BR></tt>  
  
<P> 
The Fortran callback functions are:  
<P> 
 <tt> SUBROUTINE TYPE_COPY_ATTR_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE,<BR>    ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
<P> 
and  
<P> 
 <tt> SUBROUTINE TYPE_DELETE_ATTR_FN(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
<P> 
The C++ callbacks are:  
<P> 
  
 <tt> typedef int MPI::Datatype::Copy_attr_function(const MPI::Datatype&amp; oldtype, int type_keyval, void* extra_state, const void* attribute_val_in, void* attribute_val_out, bool&amp; flag); <BR></tt>  
<P> 
and  
<P> 
 <tt> typedef int MPI::Datatype::Delete_attr_function(MPI::Datatype&amp; type, int type_keyval, void* attribute_val, void* extra_state); <BR></tt>  
  
  
  
If an attribute copy function or attribute delete function returns other than  
 MPI_SUCCESS, then the call that caused it to be invoked (for example,  
 MPI_TYPE_FREE), is erroneous.  
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_FREE_KEYVAL(type_keyval)</TD></TR>  
<TR><TD> INOUT type_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_free_keyval(int *type_keyval) <BR></tt>  
<P> 
 <tt> MPI_TYPE_FREE_KEYVAL(TYPE_KEYVAL, IERROR)<BR> INTEGER TYPE_KEYVAL, IERROR <BR></tt>   
<P> 
 <tt> static void MPI::Datatype::Free_keyval(int&amp; type_keyval) <BR></tt>  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_SET_ATTR(type, type_keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT type</TD><TD>datatype to which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_set_attr(MPI_Datatype type, int type_keyval, void *attribute_val) <BR></tt>  
 <P> 
 <tt> MPI_TYPE_SET_ATTR(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
<P> 
 <tt> void MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val) <BR></tt>  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_GET_ATTR(type, type_keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN type</TD><TD>datatype to which the attribute is attached (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless  flag =  
false</TD></TR>  
<TR><TD> OUT flag</TD><TD> false if no attribute is associated with  
the key (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag) <BR></tt>  
<P> 
 <tt> MPI_TYPE_GET_ATTR(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
<P> 
 <tt> bool MPI::Datatype::Get_attr(int type_keyval, void* attribute_val) const <BR></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_DELETE_ATTR(type, type_keyval)</TD></TR>  
<TR><TD> INOUT type</TD><TD>datatype from which the attribute is deleted (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval) <BR></tt>  
<P> 
 <tt> MPI_TYPE_DELETE_ATTR(TYPE, TYPE_KEYVAL, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR <BR></tt>    
<P> 
  
 <tt> void MPI::Datatype::Delete_attr(int type_keyval) <BR></tt>  
  
  

<P>
<HR>
<A HREF="node148.htm#Node148"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node145.htm#Node145"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node145.htm#Node145"> Caching</a>
<b>Next: </b><A HREF="node150.htm#Node150"> Error Class for Invalid Keyval</a>
<b>Previous: </b><A HREF="node148.htm#Node148"> Windows</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

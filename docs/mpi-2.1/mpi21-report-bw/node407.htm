<HTML>
<HEAD>
<!-- This file was generated by tohtml from appLang-CppNames.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Datatypes C++ Bindings</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node407">361. Datatypes C++ Bindings</a></H2>
<A HREF="node406.htm#Node406"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node408.htm#Node408"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node408.htm#Node408"> Collective Communication C++ Bindings</a>
<b>Previous: </b><A HREF="node406.htm#Node406"> Point-to-Point Communication C++ Bindings</a>
<P>
<BR> 
<pre><tt>namespace MPI { 
</tt></pre> 
 <tt> void Datatype::Commit() <BR></tt>  
 <tt> Datatype Datatype::Create_contiguous(int count) const <BR></tt>  
 <tt> Datatype Datatype::Create_darray(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const <BR></tt>  
 <tt> Datatype Datatype::Create_hindexed(int count, const int array_of_blocklengths[], const Aint array_of_displacements[]) const <BR></tt>  
 <tt> Datatype Datatype::Create_hvector(int count, int blocklength, Aint stride) const <BR></tt>  
 <tt> Datatype Datatype::Create_indexed(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const <BR></tt>  
 <tt> Datatype Datatype::Create_indexed_block(int count, int blocklength, const int array_of_displacements[]) const <BR></tt>  
 <tt> Datatype Datatype::Create_resized(const Aint lb, const Aint extent) const <BR></tt>  
 <tt> static Datatype Datatype::Create_struct(int count, const int array_of_blocklengths[], const Aint array_of_displacements[], const Datatype array_of_types[]) <BR></tt>  
 <tt> Datatype Datatype::Create_subarray(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const <BR></tt>  
 <tt> Datatype Datatype::Create_vector(int count, int blocklength, int stride) const <BR></tt>  
 <tt> Datatype Datatype::Dup() const <BR></tt>  
 <tt> void Datatype::Free() <BR></tt>  
 <tt> Aint Get_address(void* location) <BR></tt>  
 <tt> void Datatype::Get_contents(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], Aint array_of_addresses[], Datatype array_of_datatypes[]) const <BR></tt>  
 <tt> int Status::Get_elements(const Datatype&amp; datatype) const <BR></tt>  
 <tt> void Datatype::Get_envelope(int&amp; num_integers, int&amp; num_addresses, int&amp; num_datatypes, int&amp; combiner) const <BR></tt>  
 <tt> void Datatype::Get_extent(Aint&amp; lb, Aint&amp; extent) const <BR></tt>  
 <tt> int Datatype::Get_size() const <BR></tt>  
 <tt> void Datatype::Get_true_extent(Aint&amp; true_lb, Aint&amp; true_extent) const <BR></tt>  
 <tt> void Datatype::Pack(const void* inbuf, int incount, void *outbuf, int outsize, int&amp; position, const Comm &amp;comm) const <BR></tt>  
 <tt> void Datatype::Pack_external(const char* datarep, const void* inbuf, int incount, void* outbuf, Aint outsize, Aint&amp; position) const <BR></tt>  
 <tt> Aint Datatype::Pack_external_size(const char* datarep, int incount) const <BR></tt>  
 <tt> int Datatype::Pack_size(int incount, const Comm&amp; comm) const <BR></tt>  
 <tt> void Datatype::Unpack(const void* inbuf, int insize, void *outbuf, int outcount, int&amp; position, const Comm&amp; comm) const <BR></tt>  
 <tt> void Datatype::Unpack_external(const char* datarep, const void* inbuf, Aint insize, Aint&amp; position, void* outbuf, int outcount) const  <BR></tt>  
<BR> 
<pre><tt>}; 
</tt></pre> 

<P>
<HR>
<A HREF="node406.htm#Node406"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node405.htm#Node405"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node408.htm#Node408"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node405.htm#Node405"> C++ Bindings</a>
<b>Next: </b><A HREF="node408.htm#Node408"> Collective Communication C++ Bindings</a>
<b>Previous: </b><A HREF="node406.htm#Node406"> Point-to-Point Communication C++ Bindings</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Data Conversion</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node50">49. Data Conversion</a></H2>
<A HREF="node48.htm#Node49"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node47.htm#Node47"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node51.htm#Node51"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node47.htm#Node47"> Data Type Matching and Data Conversion</a>
<b>Next: </b><A HREF="node51.htm#Node51"> Communication Modes</a>
<b>Previous: </b><A HREF="node48.htm#Node49"> Type  MPI_CHARACTER</a>
<P>
  
<P> 
One of the goals of  MPI is to support parallel computations across  
heterogeneous environments.  Communication in a heterogeneous  
environment may require data conversions.  
We use the following terminology.  
<dl> 
 
<dt> 
<b>type conversion</b><dd> 
changes the datatype of a value, e.g., by rounding a  
<tt> REAL</tt> to an <tt> INTEGER</tt>.  
 
<dt> 
<b>representation conversion</b><dd> 
changes the binary representation of a value,  
e.g., from Hex floating point to IEEE floating point.  
</dl> 
<BR> 
The type matching rules imply that  MPI communication never entails type  
conversion.  On the other hand,  MPI requires that a representation  
conversion be  
performed when a typed value is transferred across environments that use  
different representations for the datatype of this value.  
 MPI does not specify rules for representation conversion.  Such conversion is  
expected to preserve integer, logical or character values, and to  
convert a floating point value to the nearest value that can be  
represented on the target system.  
<P> 
Overflow and underflow exceptions may occur during floating point conversions.  
Conversion of integers or characters may also lead to exceptions when a value  
that can be represented in one system cannot be represented in the other  
system.  An exception  
occurring during representation conversion results in a failure of the  
communication. An error occurs either in the send operation, or the receive  
operation, or both.  
<P> 
If a value sent in a message is untyped (i.e., of type  MPI_BYTE),  
then the binary representation of the byte stored at the receiver is  
identical to the binary representation of the byte loaded at the sender.  This  
holds true, whether sender and receiver run in the same or in distinct  
environments. No representation conversion is required.  
(Note that representation conversion may  
occur when values of type  MPI_CHARACTER or  
 MPI_CHAR are transferred, for example, from an  
EBCDIC encoding to an ASCII encoding.)  
<P> 
No conversion need occur when an  MPI program executes in  
a homogeneous system, where all processes run in the same environment.  
<P> 
Consider the three examples, <a href="node48.htm#Node48">Type Matching Rules 
</a>--<a href="node48.htm#Node48">Type Matching Rules 
</a>.  
The first program is correct, assuming that  a and  b are  
<tt> REAL</tt> arrays of size <IMG WIDTH=21 HEIGHT=9 SRC="img3.gif">
.  
If the sender and receiver execute in different environments,  
then the ten real values that are fetched from the send buffer will  
be converted to the representation for reals on the receiver site  
before they are stored in the receive buffer.  While the  
number of real elements fetched from the send buffer equal the  
number of real elements stored in the receive buffer, the number of  
bytes stored need not equal the number of bytes loaded. For example, the  
sender may use a four byte representation and the receiver an eight  
byte representation for reals.  
<P> 
The second program is erroneous, and its behavior is undefined.  
<P> 
The third program is correct.  The exact same  
sequence of forty bytes that were loaded from the send buffer will be  
stored in the receive buffer, even  
if sender and receiver run in a different environment.  The message  
sent has exactly the same length (in bytes) and the same binary  
representation as the message received.  If  a and  b are  
of different types,  
or if they are of the same type but different data representations are used,  
then the bits stored in the receive buffer may encode values that are  
different from the values they encoded in the send buffer.  
<P> 
Data representation conversion also applies to the envelope of a message:  
source, destination and tag are all integers that may need to be converted.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
The current definition does not require messages to carry data  
type information.  Both sender and receiver provide complete data  
type information.  
In a heterogeneous environment, one can either use  
a machine independent encoding  
such as XDR, or have the receiver convert from the sender representation to its  
own, or even have the sender do the conversion.  
<P> 
Additional type information might be added to messages  
in order to allow the system to detect mismatches between  
datatype at sender and receiver.  
This might be particularly useful in a slower but safer debug mode.  
 (<em> End of advice to implementors.</em>) <BR> 
 MPI requires support for inter-language communication, i.e.,  
if messages are sent  
by a C or C++ process and received by a Fortran process, or vice-versa.  
The behavior is defined in   
Section <a href="node351.htm#Node351">Language Interoperability 
</a> on page <a href="node351.htm#Node351">Language Interoperability 
</a>.    
  
<P> 

<P>
<HR>
<A HREF="node48.htm#Node49"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node47.htm#Node47"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node51.htm#Node51"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node47.htm#Node47"> Data Type Matching and Data Conversion</a>
<b>Next: </b><A HREF="node51.htm#Node51"> Communication Modes</a>
<b>Previous: </b><A HREF="node48.htm#Node49"> Type  MPI_CHARACTER</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Extent and Bounds of Datatypes</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node74">73. Extent and Bounds of Datatypes</a></H2>
<A HREF="node73.htm#Node73"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node75.htm#Node75"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node75.htm#Node75"> True Extent of Datatypes</a>
<b>Previous: </b><A HREF="node73.htm#Node73"> Lower-Bound and Upper-Bound Markers</a>
<P>
  
<P> 
The following function   
  
replaces  
  
the three functions  
 MPI_TYPE_UB,  MPI_TYPE_LB and  MPI_TYPE_EXTENT.  It  
also returns address  
sized integers, in the Fortran binding.  
  
The use of  MPI_TYPE_UB, MPI_TYPE_LB and  
 MPI_TYPE_EXTENT is deprecated.  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_GET_EXTENT(datatype, lb, extent)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype to get information on (handle)</TD></TR>  
<TR><TD> OUT lb</TD><TD>lower bound of datatype (integer)</TD></TR>  
<TR><TD> OUT extent</TD><TD>extent of datatype (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_get_extent(MPI_Datatype datatype, MPI_Aint *lb, MPI_Aint *extent) <BR></tt>  
<P> 
 <tt> MPI_TYPE_GET_EXTENT(DATATYPE, LB, EXTENT, IERROR)<BR> INTEGER  DATATYPE,  IERROR<BR>INTEGER(KIND = MPI_ADDRESS_KIND) LB, EXTENT <BR></tt>  
<P> 
  
<P> 
 <tt> void MPI::Datatype::Get_extent(MPI::Aint&amp; lb, MPI::Aint&amp; extent) const <BR></tt>  
  
<P> 
Returns the lower bound and the extent of  
 datatype   
(as defined in Section <a href="node73.htm#Node73">Lower-Bound and Upper-Bound Markers 
</a> on page <a href="node73.htm#Node73">Lower-Bound and Upper-Bound Markers 
</a>).  
  
<P> 
 MPI allows one to change the extent of a datatype, using lower bound  
and upper bound markers ( MPI_LB and  MPI_UB).  
This is useful, as it allows to control the stride of successive  
datatypes that are replicated by datatype constructors, or are  
replicated by the  count argument in a send or receive  
call.  However, the current mechanism for achieving it is  
painful; also it is restrictive.  MPI_LB and  
 MPI_UB are ``sticky'': once present in a datatype, they  
cannot be overridden (e.g., the upper bound can be moved up, by  
adding a new  MPI_UB marker, but cannot be moved down  
below an existing  MPI_UB marker).  
  
A new type constructor is  provided to facilitate these changes.    
  
The use of  MPI_LB and  MPI_UB is deprecated.  
  
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_CREATE_RESIZED(oldtype, lb, extent, newtype)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>input datatype (handle)</TD></TR>  
<TR><TD> IN lb</TD><TD>new lower bound of datatype (integer)</TD></TR>  
<TR><TD> IN extent</TD><TD>new extent of datatype (integer)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>output datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_CREATE_RESIZED(OLDTYPE, LB, EXTENT, NEWTYPE, IERROR)<BR> INTEGER OLDTYPE,  NEWTYPE, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) LB, EXTENT <BR></tt>  
<P> 
 <tt> MPI::Datatype MPI::Datatype::Create_resized(const MPI::Aint lb, const MPI::Aint extent) const <BR></tt>  
  
  
<P> 
Returns in  newtype a handle to a new datatype that is  
identical to  oldtype, except that the lower bound of this new  
datatype is set to be  lb, and its upper bound is set to be  
 lb <I>+</I> extent.  
  
Any previous <b> lb</b> and <b> ub</b> markers are erased,  
and a new pair of lower bound and upper bound markers are put in the  
positions indicated by the  lb and  extent arguments.  
This affects the behavior of the datatype when used in communication  
operations, with   count <I>&gt;1</I>,  and when used in the  
construction of new derived datatypes.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
It is strongly recommended that users use these two new functions,  
rather than the old  MPI-1 functions to set and access lower bound, upper  
bound and extent of datatypes.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 

<P>
<HR>
<A HREF="node73.htm#Node73"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node67.htm#Node67"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node75.htm#Node75"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node67.htm#Node67"> Derived Datatypes</a>
<b>Next: </b><A HREF="node75.htm#Node75"> True Extent of Datatypes</a>
<b>Previous: </b><A HREF="node73.htm#Node73"> Lower-Bound and Upper-Bound Markers</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from appLang-CNames.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Groups, Contexts, Communicators, and Caching C Bindings</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node379">333. Groups, Contexts, Communicators, and Caching C Bindings</a></H2>
<A HREF="node378.htm#Node378"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node375.htm#Node375"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node380.htm#Node380"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node375.htm#Node375"> C Bindings</a>
<b>Next: </b><A HREF="node380.htm#Node380"> Process Topologies C Bindings</a>
<b>Previous: </b><A HREF="node378.htm#Node378"> Collective Communication C Bindings</a>
<P>
 <tt> int MPI_COMM_DUP_FN(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_COMM_NULL_COPY_FN(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_COMM_NULL_DELETE_FN(MPI_Comm comm, int comm_keyval, void *attribute_val, void *extra_state) <BR></tt>  
 <tt> int MPI_Comm_compare(MPI_Comm comm1,MPI_Comm comm2, int *result) <BR></tt>  
 <tt> int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm) <BR></tt>  
 <tt> int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) <BR></tt>  
 <tt> int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm) <BR></tt>  
 <tt> int MPI_Comm_free(MPI_Comm *comm) <BR></tt>  
 <tt> int MPI_Comm_free_keyval(int *comm_keyval) <BR></tt>  
 <tt> int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Comm_group(MPI_Comm comm, MPI_Group *group) <BR></tt>  
 <tt> int MPI_Comm_rank(MPI_Comm comm, int *rank) <BR></tt>  
 <tt> int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group) <BR></tt>  
 <tt> int MPI_Comm_remote_size(MPI_Comm comm, int *size) <BR></tt>  
 <tt> int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Comm_set_name(MPI_Comm comm, char *comm_name) <BR></tt>  
 <tt> int MPI_Comm_size(MPI_Comm comm, int *size) <BR></tt>  
 <tt> int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) <BR></tt>  
 <tt> int MPI_Comm_test_inter(MPI_Comm comm, int *flag) <BR></tt>  
 <tt> int MPI_Group_compare(MPI_Group group1,MPI_Group group2, int *result) <BR></tt>  
 <tt> int MPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_excl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_free(MPI_Group *group) <BR></tt>  
 <tt> int MPI_Group_incl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Group_rank(MPI_Group group, int *rank) <BR></tt>  
 <tt> int MPI_Group_size(MPI_Group group, int *size) <BR></tt>  
 <tt> int MPI_Group_translate_ranks (MPI_Group group1, int n, int *ranks1, MPI_Group group2, int *ranks2) <BR></tt>  
 <tt> int MPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <BR></tt>  
 <tt> int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) <BR></tt>  
 <tt> int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) <BR></tt>  
 <tt> int MPI_TYPE_DUP_FN(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_TYPE_NULL_COPY_FN(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_TYPE_NULL_DELETE_FN(MPI_Datatype type, int type_keyval, void *attribute_val, void *extra_state) <BR></tt>  
 <tt> int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval) <BR></tt>  
 <tt> int MPI_Type_free_keyval(int *type_keyval) <BR></tt>  
 <tt> int MPI_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Type_get_name(MPI_Datatype type, char *type_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Type_set_attr(MPI_Datatype type, int type_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Type_set_name(MPI_Datatype type, char *type_name) <BR></tt>  
 <tt> int MPI_WIN_DUP_FN(MPI_Win oldwin, int win_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_WIN_NULL_COPY_FN(MPI_Win oldwin, int win_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <BR></tt>  
 <tt> int MPI_WIN_NULL_DELETE_FN(MPI_Win win, int win_keyval, void *attribute_val, void *extra_state) <BR></tt>  
 <tt> int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Win_delete_attr(MPI_Win win, int win_keyval) <BR></tt>  
 <tt> int MPI_Win_free_keyval(int *win_keyval) <BR></tt>  
 <tt> int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Win_set_name(MPI_Win win, char *win_name) <BR></tt>  
<P> 

<P>
<HR>
<A HREF="node378.htm#Node378"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node375.htm#Node375"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node380.htm#Node380"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node375.htm#Node375"> C Bindings</a>
<b>Next: </b><A HREF="node380.htm#Node380"> Process Topologies C Bindings</a>
<b>Previous: </b><A HREF="node378.htm#Node378"> Collective Communication C Bindings</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-changes/changes.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Changes from Version 2.0 to Version 2.1</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node426">380. Changes from Version 2.0 to Version 2.1</a></H1>
<A HREF="node425.htm#Node425"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node427.htm#Node427"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node427.htm#Node427"> Bibliography</a>
<b>Previous: </b><A HREF="node425.htm#Node425"> Change-Log</a>
<P>
  
<ol> 
 
1. Section <a href="node42.htm#Node42">Message Data 
</a> on page <a href="node42.htm#Node42">Message Data 
</a>,  
                                       Section <a href="node330.htm#Node330">C++ Datatypes 
</a> on page <a href="node330.htm#Node330">C++ Datatypes 
</a>, and  
                                       Annex <a href="node368.htm#Node368">Defined  Values and Handles 
</a> on page <a href="node368.htm#Node368">Defined  Values and Handles 
</a>.   
<BR>  
   
In addition, the  MPI_LONG_LONG should be added as an optional  
type; it is a synonym for  MPI_LONG_LONG_INT.  
<P> 
 
<BR> 
2. Section <a href="node42.htm#Node42">Message Data 
</a> on page <a href="node42.htm#Node42">Message Data 
</a>,  
                                       Section <a href="node330.htm#Node330">C++ Datatypes 
</a> on page <a href="node330.htm#Node330">C++ Datatypes 
</a>, and  
                                       Annex <a href="node368.htm#Node368">Defined  Values and Handles 
</a> on page <a href="node368.htm#Node368">Defined  Values and Handles 
</a>.   
<BR>  
 MPI_LONG_LONG_INT,  MPI_LONG_LONG (as synonym),  MPI_UNSIGNED_LONG_LONG,     
 MPI_SIGNED_CHAR,  
and  MPI_WCHAR are moved from optional to official and they are therefore  
defined for all three language bindings.  
  
 
<BR> 
3. Section <a href="node45.htm#Node45">Return Status 
</a> on page <a href="node45.htm#Node45">Return Status 
</a>.  
<BR>  
 MPI_GET_COUNT with zero-length datatypes:  
   
The value returned as the  count argument of  
 MPI_GET_COUNT for a datatype of length zero where zero bytes  
have been transferred is zero.  If the number of bytes transferred is  
greater than zero,  MPI_UNDEFINED is returned.   
<P> 
 
<BR> 
4. Section <a href="node67.htm#Node67">Derived Datatypes 
</a> on page <a href="node67.htm#Node67">Derived Datatypes 
</a>.  
<BR>  
General rule about derived datatypes:  
   
Most datatype constructors have replication count or block length arguments.  
Allowed values are nonnegative integers. If the value is zero, no elements are  
generated in the type map and there is no effect on datatype bounds or  
extent.   
<P> 
 
<BR> 
5. Section <a href="node83.htm#Node83">Canonical  MPI_PACK and  MPI_UNPACK 
</a> on page <a href="node83.htm#Node83">Canonical  MPI_PACK and  MPI_UNPACK 
</a>.  
<BR>  
   
 MPI_BYTE should be used to send and receive data that is packed  
using  MPI_PACK_EXTERNAL.  
<P> 
 
<BR> 
6. Section <a href="node107.htm#Node107">All-Reduce 
</a> on page <a href="node107.htm#Node107">All-Reduce 
</a>.  
<BR>  
If  comm is an intercommunicator in  MPI_ALLREDUCE, then  
   
both groups should  
provide  count and  datatype arguments that specify the same type  
signature  
(i.e., it is not necessary that both groups provide the same  count value).   
  
 
<BR> 
7. Section <a href="node124.htm#Node124">Group Accessors 
</a> on page <a href="node124.htm#Node124">Group Accessors 
</a>.  
<BR>  
 MPI_GROUP_TRANSLATE_RANKS and  MPI_PROC_NULL:  
   
 MPI_PROC_NULL is a valid rank for input to  
 MPI_GROUP_TRANSLATE_RANKS, which returns  
 MPI_PROC_NULL as the translated rank.  
<P> 
 
<BR> 
8. Section <a href="node145.htm#Node145">Caching 
</a> on page <a href="node145.htm#Node145">Caching 
</a>.  
<BR>  
About the attribute caching functions:   
   
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations should raise an error when a keyval  
that was created by a call to  MPI_XXX_CREATE_KEYVAL is  
used with an object of the wrong type with a call to  
 MPI_YYY_GET_ATTR,  MPI_YYY_SET_ATTR,  MPI_YYY_DELETE_ATTR, or  
 MPI_YYY_FREE_KEYVAL. To do so, it is necessary to maintain, with  
each keyval, information on the type of the associated user  
function.  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
9. Section <a href="node152.htm#Node152">Naming Objects 
</a> on page <a href="node152.htm#Node152">Naming Objects 
</a>.  
<BR>  
In  MPI_COMM_GET_NAME:   
   
In C, a null character is additionally stored at  name[resultlen].   
 resultlen cannot be larger then  MPI_MAX_OBJECT-1.   
In Fortran, name is padded on the right with blank characters.   
 resultlen cannot be larger then  MPI_MAX_OBJECT.   
<P> 
 
<BR> 
10. Section <a href="node163.htm#Node163">Overview of the Functions 
</a> on page <a href="node163.htm#Node163">Overview of the Functions 
</a>.  
<BR>  
About  MPI_GRAPH_CREATE and  MPI_CART_CREATE:  
   
All input arguments must have identical values on all processes  
of the group of  comm_old.   
<P> 
 
<BR> 
11. Section <a href="node165.htm#Node165">Cartesian Constructor 
</a> on page <a href="node165.htm#Node165">Cartesian Constructor 
</a>.  
<BR>  
In  MPI_CART_CREATE:  
   
If  ndims is zero then a zero-dimensional Cartesian topology is created. The  
call is erroneous if it specifies a grid that is larger than the group size or if  
 ndims is negative.  
<P> 
 
<BR> 
12. Section <a href="node167.htm#Node167">General (Graph) Constructor 
</a> on page <a href="node167.htm#Node167">General (Graph) Constructor 
</a>.  
<BR>  
In  MPI_GRAPH_CREATE:  
   
If the graph is empty, i.e.,  nnodes == 0,   
then  MPI_COMM_NULL is returned in all processes.   
<P> 
 
<BR> 
13. Section <a href="node167.htm#Node167">General (Graph) Constructor 
</a> on page <a href="node167.htm#Node167">General (Graph) Constructor 
</a>.  
<BR>  
In  MPI_GRAPH_CREATE:  
   
A single process is allowed to be defined multiple times in the list of  
neighbors of a process (i.e., there may be multiple edges between two  
processes). A process is also allowed to be a neighbor to itself (i.e., a self  
loop in the graph). The adjacency matrix is allowed to be non-symmetric.  
 
<BR> 
<em> Advice to users.</em>  
 <P> 
Performance implications of using multiple edges or a non-symmetric  
adjacency matrix are not defined. The definition of a node-neighbor  
edge does not imply a direction of the communication.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
14. Section <a href="node168.htm#Node168">Topology Inquiry Functions 
</a> on page <a href="node168.htm#Node168">Topology Inquiry Functions 
</a>.  
<BR>  
In  MPI_CARTDIM_GET and  MPI_CART_GET:   
   
If  comm is associated with a zero-dimensional Cartesian topology,  
 MPI_CARTDIM_GET returns  ndims=0 and  MPI_CART_GET will keep  
all output arguments unchanged.   
<P> 
 
<BR> 
15. Section <a href="node168.htm#Node168">Topology Inquiry Functions 
</a> on page <a href="node168.htm#Node168">Topology Inquiry Functions 
</a>.  
<BR>  
In  MPI_CART_RANK:  
   
If  comm is associated with a zero-dimensional Cartesian topology,  
 coord is not significant and 0 is returned in  rank.   
<P> 
 
<BR> 
16. Section <a href="node168.htm#Node168">Topology Inquiry Functions 
</a> on page <a href="node168.htm#Node168">Topology Inquiry Functions 
</a>.  
<BR>  
In  MPI_CART_COORDS:  
   
If  comm is associated with a zero-dimensional Cartesian topology,  
 coords will be unchanged.   
<P> 
 
<BR> 
17. Section <a href="node169.htm#Node169">Cartesian Shift Coordinates 
</a> on page <a href="node169.htm#Node169">Cartesian Shift Coordinates 
</a>.  
<BR>  
In  MPI_CART_SHIFT:  
   
It is erroneous to call  MPI_CART_SHIFT with a direction that is either  
negative or greater than or equal to the number of dimensions in the Cartesian  
communicator. This implies that it is erroneous to call  MPI_CART_SHIFT with a  
 comm that is associated with a zero-dimensional Cartesian topology.  
<P> 
 
<BR> 
18. Section <a href="node170.htm#Node170">Partitioning of Cartesian structures 
</a> on page <a href="node170.htm#Node170">Partitioning of Cartesian structures 
</a>.  
<BR>  
In  MPI_CART_SUB:   
   
If all entries in  remain_dims are false or  comm is already associated  
with a zero-dimensional Cartesian topology then  newcomm is associated  
with a zero-dimensional Cartesian topology.   
<P> 
 
<BR> 
19. Section <a href="node176.htm#Node176">Environmental Inquiries 
</a> on page <a href="node176.htm#Node176">Environmental Inquiries 
</a>.  
<BR>  
In  MPI_GET_PROCESSOR_NAME:   
   
In C, a null character is additionally stored at  name[resultlen].   
 resultlen cannot be larger then  MPI_MAX_PROCESSOR_NAME-1.   
In Fortran, name is padded on the right with blank characters.   
 resultlen cannot be larger then  MPI_MAX_PROCESSOR_NAME.   
<P> 
 
<BR> 
20. Section <a href="node182.htm#Node182">Error Handling 
</a> on page <a href="node182.htm#Node182">Error Handling 
</a>.  
<BR>  
   
 MPI_{COMM,WIN,FILE}_GET_ERRHANDLER behave as if a  
new error handler object is created.  
That is, once the error handler is no longer needed,  
 MPI_ERRHANDLER_FREE should be called with the error handler returned  
from  MPI_ERRHANDLER_GET or  
 MPI_{COMM,WIN,FILE}_GET_ERRHANDLER  
to mark the error handler for deallocation.  
This provides behavior similar to that of  MPI_COMM_GROUP and  
 MPI_GROUP_FREE.  
<P> 
 
<BR> 
21. Section <a href="node190.htm#Node190">Startup 
</a> on page <a href="node190.htm#Node190">Startup 
</a>, see explanations to  MPI_FINALIZE.  
<BR>  
   
 MPI_FINALIZE is collective over all connected processes.  
If no processes were spawned, accepted or connected then this means  
over  MPI_COMM_WORLD; otherwise it is collective over the  
union of all processes that have been and continue to be connected,  
as explained in Section <a href="node221.htm#Node221">Releasing Connections 
</a> on page <a href="node221.htm#Node221">Releasing Connections 
</a>.  
<P> 
 
<BR> 
22. Section <a href="node190.htm#Node190">Startup 
</a> on page <a href="node190.htm#Node190">Startup 
</a>.  
<BR>  
About  MPI_ABORT:  
   
 
<BR> 
<em> Advice to users.</em>  
 <P> 
Whether the errorcode is returned from the executable or  
from the  MPI process startup mechanism (e.g., mpiexec), is an aspect of  
quality of the  MPI library but not mandatory.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
 <P> 
Where possible, a high-quality implementation will  
try to return the errorcode from the  MPI process startup mechanism (e.g.  
mpiexec or singleton init).  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
23. Section <a href="node194.htm#Node194">The  Info Object 
</a> on page <a href="node194.htm#Node194">The  Info Object 
</a>.  
<BR>  
   
An implementation must support info objects as caches for arbitrary ( key,  
 value) pairs, regardless of whether it recognizes the key. Each function that  
takes hints in the form of an  MPI_Info must be prepared to ignore any key it  
does not recognize. This description of info objects does not attempt to  
define how a particular function should react if it recognizes a key but not the  
associated value.   
 MPI_INFO_GET_NKEYS,  MPI_INFO_GET_NTHKEY,  
 MPI_INFO_GET_VALUELEN, and  MPI_INFO_GET  
must retain all ( key, value)  
pairs so that layered functionality can also use the  Info object.   
<P> 
 
<BR> 
24.   
Section <a href="node228.htm#Node228">Communication Calls 
</a> on page <a href="node228.htm#Node228">Communication Calls 
</a>.  
<BR>  
   
 MPI_PROC_NULL is a valid target rank in the  MPI RMA calls  
 MPI_ACCUMULATE,  MPI_GET, and  MPI_PUT.    
The effect is the same as for  MPI_PROC_NULL in  MPI point-to-point  
communication.  
See also item <a href="node426.htm#Node426">Changes from Version 2.0 to Version 2.1 
</a> in this list.   
  
 
<BR> 
25.   
Section <a href="node228.htm#Node228">Communication Calls 
</a> on page <a href="node228.htm#Node228">Communication Calls 
</a>.  
<BR>  
   
After any RMA operation with rank  MPI_PROC_NULL, it is still necessary to  
finish the RMA epoch with the synchronization method that started the epoch.   
See also item <a href="node426.htm#Node426">Changes from Version 2.0 to Version 2.1 
</a> in this list.   
  
 
<BR> 
26. Section <a href="node232.htm#Node232">Accumulate Functions 
</a> on page <a href="node232.htm#Node232">Accumulate Functions 
</a>.  
<BR>  
   
 MPI_REPLACE  
in  MPI_ACCUMULATE,   
   
like the other predefined operations,   
is defined only for the predefined  MPI datatypes.  
<P> 
 
<BR> 
27. Section <a href="node267.htm#Node267">File Info 
</a> on page <a href="node267.htm#Node267">File Info 
</a>.  
<BR>  
About  MPI_FILE_SET_VIEW and  MPI_FILE_SET_INFO:  
   
When an info object that specifies a subset of valid hints is passed to  
 MPI_FILE_SET_VIEW or  MPI_FILE_SET_INFO,   
there will be no effect on  
previously set or defaulted hints that the  info does not specify.   
<P> 
 
<BR> 
28. Section <a href="node267.htm#Node267">File Info 
</a> on page <a href="node267.htm#Node267">File Info 
</a>.  
<BR>  
About  MPI_FILE_GET_INFO:  
   
If no hint exists   
for the file associated with  fh,   
   
a handle to a newly created info object is returned that  
contains no key/value pair.   
<P> 
 
<BR> 
29. Section <a href="node269.htm#Node269">File Views 
</a> on page <a href="node269.htm#Node269">File Views 
</a>.  
<BR>  
If a file does not have the mode  MPI_MODE_SEQUENTIAL,  
then  MPI_DISPLACEMENT_CURRENT is invalid as  disp in   
 MPI_FILE_SET_VIEW.    
  
 
<BR> 
30. Section <a href="node285.htm#Node285">External Data Representation: ``external32'' 
</a> on page <a href="node285.htm#Node285">External Data Representation: ``external32'' 
</a>.  
<BR>  
The bias of 16 byte doubles was defined with 10383. The correct value is 16383.   
  
 
<BR> 
31. Section <a href="node328.htm#Node328">Class Member Functions for  MPI 
</a> on page <a href="node328.htm#Node328">Class Member Functions for  MPI 
</a>.  
<BR>  
In the example in this section,  
the buffer should be declared as <tt> const void* buf</tt>.   
  
 
<BR> 
32. Section <a href="node347.htm#Node347">Additional Support for Fortran Numeric Intrinsic Types 
</a> on page <a href="node347.htm#Node347">Additional Support for Fortran Numeric Intrinsic Types 
</a>.  
<BR>  
About  MPI_TYPE_CREATE_F90_xxxx:  
   
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
An application may often repeat a call to  
 MPI_TYPE_CREATE_F90_xxxx with the same combination of   
( xxxx, p, r).  
The application is not allowed to free the returned predefined, unnamed  
datatype handles. To prevent the creation of a potentially huge amount of  
handles, the  MPI implementation should return the same datatype handle for  
the same ( REAL/COMPLEX/INTEGER, p, r) combination.   
Checking for the  
combination ( p, r) in the preceding call to   
 MPI_TYPE_CREATE_F90_xxxx and  
using a hash-table to find formerly generated handles should limit the  
overhead of finding a previously generated datatype with same combination  
of ( xxxx, p, r).  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
33. Section <a href="node369.htm#Node369">Defined Constants 
</a> on page <a href="node369.htm#Node369">Defined Constants 
</a>.  
<BR>  
 MPI_BOTTOM is defined as  
   
<tt> void * const MPI::BOTTOM</tt>.   
 <P> 
</ol> 
  
<P> 
   
   
  
  
  

<P>
<HR>
<A HREF="node425.htm#Node425"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node427.htm#Node427"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node427.htm#Node427"> Bibliography</a>
<b>Previous: </b><A HREF="node425.htm#Node425"> Change-Log</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Gather</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node93">92. Gather</a></H1>
<A HREF="node92.htm#Node92"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node94.htm#Node94"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node94.htm#Node94"> Examples using  MPI_GATHER,  MPI_GATHERV</a>
<b>Previous: </b><A HREF="node92.htm#Node92"> Example using  MPI_BCAST</a>
<P>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GATHER( sendbuf, sendcount, sendtype, recvbuf,  
recvcount, recvtype, root, comm) </TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice,  
significant only at root)</TD></TR>  
<TR><TD> IN  recvcount</TD><TD> number of elements for any single receive (non-negative  
integer, significant only at root)</TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of recv buffer elements  
(significant only at root) (handle)</TD></TR>  
<TR><TD> IN  root</TD><TD> rank of receiving process (integer)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Gather(void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)  <BR></tt>  
<P> 
 <tt> MPI_GATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <BR> &lt;type&gt; SENDBUF(*), RECVBUF(*) <BR>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR <BR></tt>  
  
  
 <tt> void MPI::Comm::Gather(const void* sendbuf, int sendcount,  const MPI::Datatype&amp; sendtype, void* recvbuf, int recvcount,  const MPI::Datatype&amp; recvtype, int root) const = 0 <BR></tt>  
  
  
<P> 
If  comm is an intracommunicator,   
each process (root process included) sends the contents of its send  
buffer to the root process.  The root process receives the messages and  
stores them in rank order.  
The outcome is <em> as if</em> each of the <tt> n</tt> processes in the group  
(including the root process) had executed a call to  
<p><I> 
MPI_Send(sendbuf, sendcount, sendtype, root , ...), 
</I><p>  
and the  
root had executed <tt> n</tt> calls to  
<p><I> 
MPI_Recv(recvbuf+i&#183; recvcount&#183; extent(recvtype), recvcount, recvtype, i ,...), 
</I><p>  
where <tt> extent(recvtype)</tt> is the type extent obtained from a call to  
<tt> MPI_Type_extent()</tt>.  
<P> 
An alternative description is that the <tt> n</tt> messages sent by the  
processes in the group are concatenated in rank order, and the  
resulting message is received by the root as if by a call to  
 MPI_RECV(recvbuf, recvcount<I>&#183;</I>n, recvtype, ...).  
<P> 
The receive buffer is ignored for all non-root processes.  
<P> 
General, derived datatypes are allowed for both  sendtype  
and  recvtype.  
The type signature of  sendcount, sendtype on  
each process  
must be equal to the type signature of  
 recvcount, recvtype at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each process and the root.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
All arguments to the function are significant on process  root,  
while on other processes, only arguments  sendbuf, sendcount,  
sendtype, root,  
and  
 comm are significant.  
The arguments  root and  comm  
must have identical values on all processes.  
<P> 
The specification of counts and types  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
<P> 
Note that the  recvcount argument at the root indicates  
the number of items it receives from <em> each</em> process, not the total number  
of items it receives.  
  
The ``in place'' option  for intracommunicators is specified by passing  
 MPI_IN_PLACE as   
the value of  sendbuf at the root.  In such a case,  
 sendcount and  sendtype are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer.  
<P> 
If  comm is an intercommunicator, then the call involves all   
processes in the intercommunicator, but with one group (group A) defining the  
root process.  All processes in the other group (group B) pass the same value  
in argument   
 root, which is the rank of the root in group A.  The root  
passes the value  MPI_ROOT in  root.  
All other processes in group A pass the value  MPI_PROC_NULL in  
 root.   
Data is gathered from all processes in group B to the root.  
The send  
buffer arguments of the processes in group B must be consistent with  
the receive buffer argument of the root.  
  
<TABLE><TR><TD COLSPAN=2>MPI_GATHERV( sendbuf, sendcount, sendtype, recvbuf,  
recvcounts, displs, recvtype, root, comm) </TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice,  
significant only at root)</TD></TR>  
<TR><TD> IN  recvcounts</TD><TD>non-negative  
integer array (of length group size)  
containing the number of elements that are received from each process  
(significant only at root)</TD></TR>  
<TR><TD> IN  displs</TD><TD> integer array (of length group size).  Entry  
<tt> i</tt> specifies the displacement relative to  recvbuf at  
which to place the incoming data from process <tt> i</tt> (significant only  
at root)</TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of recv buffer elements  
(significant only at root) (handle)</TD></TR>  
<TR><TD> IN  root</TD><TD> rank of receiving process (integer)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Gatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int *recvcounts, int *displs, MPI_Datatype recvtype, int root, MPI_Comm comm)  <BR></tt>  
<P> 
 <tt> MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, ROOT, COMM, IERROR) <BR> &lt;type&gt; SENDBUF(*), RECVBUF(*) <BR>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, ROOT, COMM, IERROR <BR></tt>  
  
  
 <tt> void MPI::Comm::Gatherv(const void* sendbuf, int sendcount,  const MPI::Datatype&amp; sendtype, void* recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype&amp; recvtype, int root) const = 0 <BR></tt>  
  
  
<P> 
 MPI_GATHERV extends the functionality of  MPI_GATHER  
by allowing a varying count of data from each process, since  
 recvcounts  
is now an array.  It also allows more flexibility as to where the data  
is placed on the root, by providing the new argument,  displs.  
<P> 
If  comm is an intracommunicator,   
the outcome is <em> as if</em> each process, including the root process,  
sends a message to the root,  
<p><I> 
MPI_Send(sendbuf, sendcount, sendtype, root, ...), 
</I><p>  
and the root executes <tt> n</tt> receives,  
  
<P><IMG WIDTH=58 HEIGHT=9 SRC="img42.gif"><P>
  
<P> 
The   
data received from process  j is placed into  recvbuf of the  root  
process beginning at offset  displs[j] elements (in terms of the  
 recvtype).  
  
The receive buffer is ignored for all non-root processes.  
<P> 
The type signature implied by  sendcount, sendtype on process <tt> i</tt>  
must be equal to the type signature implied by  recvcounts[i], recvtype  
at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each process and the root.  
Distinct type maps between sender and receiver are still allowed,  
as illustrated in Example <a href="node94.htm#Node94">Examples using  MPI_GATHER,  MPI_GATHERV 
</a>.  
<P> 
All arguments to the function are significant on process  root,  
while on other processes, only arguments  sendbuf, sendcount,  
sendtype, root,  
and  
 comm are significant.  
The arguments  root and  comm  
must have identical values on all processes.  
<P> 
The specification of counts, types, and displacements  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
  
The ``in place'' option  for intracommunicators is specified by passing  
 MPI_IN_PLACE as   
the value of  sendbuf at the root.  In such a case,  
 sendcount and  sendtype are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer  
<P> 
If  comm is an intercommunicator, then the call involves all   
processes in the intercommunicator, but with one group (group A) defining the  
root process.  All processes in the other group (group B) pass the same value  
in argument   
 root, which is the rank of the root in group A.  The root  
passes the value  MPI_ROOT in  root.  
All other processes in group A pass the value  MPI_PROC_NULL in  
 root.   
Data is gathered from all processes in group B to the root.  
The send  
buffer arguments of the processes in group B must be consistent with  
the receive buffer argument of the root.  
  
<menu> 
</menu> 

<P>
<HR>
<A HREF="node92.htm#Node92"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node94.htm#Node94"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node94.htm#Node94"> Examples using  MPI_GATHER,  MPI_GATHERV</a>
<b>Previous: </b><A HREF="node92.htm#Node92"> Example using  MPI_BCAST</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-deprecated/deprecated.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Deprecated since  MPI-2.0</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node322">291. Deprecated since  MPI-2.0</a></H1>
<A HREF="node321.htm#Node321"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node323.htm#Node323"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node323.htm#Node323"> Language Bindings</a>
<b>Previous: </b><A HREF="node321.htm#Node321"> Deprecated Functions</a>
<P>
  
The following function is deprecated and is superseded by  MPI_TYPE_CREATE_HVECTOR in  MPI-2.0.   
The   
language   
independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_HVECTOR( count, blocklength, stride,  
oldtype, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks (nonnegative integer)</TD></TR>  
<TR><TD> IN blocklength</TD><TD>number of elements in each block  
(nonnegative integer)</TD></TR>  
<TR><TD> IN stride</TD><TD>number of bytes between start of each block (integer)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>old datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_HVECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER  COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_TYPE_CREATE_HINDEXED in  MPI-2.0.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_HINDEXED( count, array_of_blocklengths,  
array_of_displacements, oldtype, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks  -- also number of entries in  
<BR> array_of_displacements and  array_of_blocklengths   
(nonnegative integer)</TD></TR>  
<TR><TD> IN array_of_blocklengths</TD><TD>number of elements in each block  
(array of nonnegative integers)</TD></TR>  
<TR><TD> IN array_of_displacements</TD><TD>byte displacement of each block  
(array of integer)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>old datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_hindexed(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_HINDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_DISPLACEMENTS(*), OLDTYPE, NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_TYPE_CREATE_STRUCT in  MPI-2.0.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_STRUCT(count, array_of_blocklengths,  
array_of_displacements, array_of_types, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks   
(integer)  
(nonnegative integer)  
-- also number of entries in arrays  array_of_types,  
 array_of_displacements and  array_of_blocklengths</TD></TR>  
<TR><TD> IN array_of_blocklength</TD><TD>number of elements in each block  
(array of nonnegative integer)</TD></TR>   
<TR><TD> IN array_of_displacements</TD><TD>byte displacement of each block  
(array of integer)</TD></TR>  
<TR><TD> IN array_of_types</TD><TD>type of elements in each block (array  
of handles to datatype objects)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_struct(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR)<BR> INTEGER  COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_DISPLACEMENTS(*), ARRAY_OF_TYPES(*), NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_GET_ADDRESS in  MPI-2.0.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_ADDRESS(location, address)</TD></TR>  
<TR><TD> IN location</TD><TD>location in caller memory (choice)</TD></TR>  
<TR><TD> OUT address</TD><TD>address of location (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Address(void* location, MPI_Aint *address) <BR></tt>  
<P> 
 <tt> MPI_ADDRESS(LOCATION, ADDRESS, IERROR)<BR> &lt;type&gt; LOCATION(*) <BR>INTEGER  ADDRESS, IERROR <BR></tt>  
  
The following functions are deprecated and are superseded by  MPI_TYPE_GET_EXTENT in  MPI-2.0.   
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_EXTENT(datatype, extent)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT extent</TD><TD>datatype extent (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_extent(MPI_Datatype datatype, MPI_Aint *extent) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_EXTENT(DATATYPE, EXTENT, IERROR)<BR> INTEGER DATATYPE, EXTENT, IERROR <BR></tt>  
<P> 
Returns the extent of a datatype,  
where extent is as defined on  
page <a href="node73.htm#Node73">Lower-Bound and Upper-Bound Markers 
</a>.  
  
The two functions below can be used for finding the lower bound and  
the upper bound of a datatype.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_LB( datatype, displacement)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT displacement</TD><TD>displacement of lower bound from origin,  
                             in bytes (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_lb(MPI_Datatype datatype, MPI_Aint* displacement) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_LB( DATATYPE, DISPLACEMENT, IERROR)<BR> INTEGER DATATYPE, DISPLACEMENT, IERROR <BR></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_UB( datatype, displacement)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT displacement</TD><TD>displacement of upper bound from origin,  
                             in bytes (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_ub(MPI_Datatype datatype, MPI_Aint* displacement) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_UB( DATATYPE, DISPLACEMENT, IERROR)<BR> INTEGER DATATYPE, DISPLACEMENT, IERROR <BR></tt>  
<P> 
  
<P> 
  
  
The following function is deprecated and is superseded by  MPI_COMM_CREATE_KEYVAL in  MPI-2.0.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_KEYVAL_CREATE(copy_fn, delete_fn, keyval, extra_state)</TD></TR>  
<TR><TD> IN copy_fn</TD><TD>Copy callback function for  keyval</TD></TR>  
<TR><TD> IN delete_fn</TD><TD>Delete callback function for  keyval</TD></TR>  
<TR><TD> OUT keyval</TD><TD>  key value for future access (integer)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>Extra state for callback functions</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void* extra_state) <BR></tt>  
<P> 
 <tt> MPI_KEYVAL_CREATE(COPY_FN, DELETE_FN, KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL COPY_FN, DELETE_FN <BR>INTEGER KEYVAL, EXTRA_STATE, IERROR <BR></tt>  
  
The  copy_fn function is invoked when a communicator is  
duplicated by  MPI_COMM_DUP.   copy_fn should be  
of type  MPI_Copy_function, which is defined as follows:  
  
   
<BR> 
<pre><tt>typedef int MPI_Copy_function(MPI_Comm oldcomm, int keyval, 
                              void *extra_state, void *attribute_val_in, 
                              void *attribute_val_out, int *flag) 
</tt></pre> 
  
<P> 
A Fortran declaration for such a function is as follows:  
<P> 
  
 <tt> SUBROUTINE COPY_FUNCTION(OLDCOMM, KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERR)<BR> INTEGER OLDCOMM, KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, IERR <BR>LOGICAL FLAG <BR></tt>  
  
  
  
 copy_fn may be specified as  
 MPI_NULL_COPY_FN or  
 MPI_DUP_FN  
from either C or FORTRAN;  
 MPI_NULL_COPY_FN  
is a function that does nothing other than returning  flag = 0  
and  MPI_SUCCESS.  
 MPI_DUP_FN is a simple-minded  
copy function that sets  flag = 1,  
returns the value of  
 attribute_val_in in  attribute_val_out, and  
returns  MPI_SUCCESS.  
Note that  MPI_NULL_COPY_FN  
and  MPI_DUP_FN are also deprecated.  
  
  
  
  
Analogous to  copy_fn is a callback deletion function, defined  
as follows.  The  delete_fn function is invoked when a communicator is  
deleted by  MPI_COMM_FREE or when a call is made explicitly  
to  MPI_ATTR_DELETE.   delete_fn should be  
of type  MPI_Delete_function, which is defined as follows:  
  
  
   
<BR> 
<pre><tt>typedef int MPI_Delete_function(MPI_Comm comm, int keyval, 
    void *attribute_val, void *extra_state); 
</tt></pre> 
A Fortran declaration for such a function is as follows:  
<P> 
 <tt> SUBROUTINE DELETE_FUNCTION(COMM, KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERR <BR></tt>  
  
  
 delete_fn may be specified as  
 MPI_NULL_DELETE_FN from either C or FORTRAN;  
 MPI_NULL_DELETE_FN is a function that does nothing, other  
than returning  MPI_SUCCESS.  
  
Note that  MPI_NULL_DELETE_FN is also deprecated.  
  
  
  
The following function is deprecated and is superseded by  MPI_COMM_FREE_KEYVAL in  MPI-2.0.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_KEYVAL_FREE(keyval)</TD></TR>  
<TR><TD> INOUT keyval</TD><TD> Frees the integer key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Keyval_free(int *keyval) <BR></tt>  
<P> 
 <tt> MPI_KEYVAL_FREE(KEYVAL, IERROR)<BR> INTEGER KEYVAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_COMM_SET_ATTR in  MPI-2.0.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_PUT(comm, keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD> key value, as returned by <BR> MPI_KEYVAL_CREATE (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Attr_put(MPI_Comm comm, int keyval, void* attribute_val) <BR></tt>  
<P> 
 <tt> MPI_ATTR_PUT(COMM, KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_COMM_GET_ATTR in  MPI-2.0.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_GET(comm, keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to which attribute is attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless  flag = false</TD></TR>  
<TR><TD> OUT flag</TD><TD><tt> true</tt> if an attribute value was extracted; <tt> false</tt> if no attribute is associated with the key</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) <BR></tt>  
  
<P> 
 <tt> MPI_ATTR_GET(COMM, KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, IERROR <BR>LOGICAL FLAG <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_COMM_DELETE_ATTR in  MPI-2.0.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_DELETE(comm, keyval)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to which attribute is attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD>The key value of the deleted attribute (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Attr_delete(MPI_Comm comm, int keyval) <BR></tt>  
<P> 
 <tt> MPI_ATTR_DELETE(COMM, KEYVAL, IERROR)<BR> INTEGER COMM, KEYVAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by  MPI_COMM_CREATE_ERRHANDLER in  MPI-2.0.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_CREATE( function, errhandler )</TD></TR>  
<TR><TD> IN function</TD><TD>user defined error handling procedure</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>MPI error handler (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_create(MPI_Handler_function *function, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
  
 <tt> MPI_ERRHANDLER_CREATE(FUNCTION, ERRHANDLER, IERROR)<BR> EXTERNAL FUNCTION <BR>INTEGER ERRHANDLER, IERROR <BR></tt>  
Register the user routine  function for use as an  MPI  
exception handler.  Returns in  errhandler a handle to the registered  
exception handler.  
<P> 
  
In the C language,   
  
the user routine should be a C function of type  MPI_Handler_function,  
which is defined as:  
<P> 
  
<BR> 
<pre><tt>typedef void (MPI_Handler_function)(MPI_Comm *, int *, ...); 
</tt></pre> 
  
The first argument is the communicator in use, the second  
is the error code to be returned.    
  
  
In the Fortran language, the user routine should be of the form:  
<P> 
<BR> 
<pre><tt>SUBROUTINE HANDLER_FUNCTION(COMM, ERROR_CODE, .....) 
   INTEGER COMM, ERROR_CODE 
</tt></pre> 
  
The following function is deprecated and is superseded by  MPI_COMM_SET_ERRHANDLER in  MPI-2.0.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_SET( comm, errhandler )</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to set the error handler for (handle)</TD></TR>  
<TR><TD> IN errhandler</TD><TD>new  MPI error handler for communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) <BR></tt>  
<P> 
 <tt> MPI_ERRHANDLER_SET(COMM, ERRHANDLER, IERROR)<BR> INTEGER COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
Associates the new error handler  errorhandler  
with communicator  comm at the calling process.  Note that an  
error handler is always associated with the communicator.  
  
The following function is deprecated and is superseded by  MPI_COMM_GET_ERRHANDLER in  MPI-2.0.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_GET( comm, errhandler )</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to get the error handler from (handle)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>MPI error handler  
currently associated with communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
 <tt> MPI_ERRHANDLER_GET(COMM, ERRHANDLER, IERROR)<BR> INTEGER COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
Returns in  errhandler (a handle to) the error handler that is  
currently  
associated with communicator  comm.  
  
<P> 
  

<P>
<HR>
<A HREF="node321.htm#Node321"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node323.htm#Node323"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node323.htm#Node323"> Language Bindings</a>
<b>Previous: </b><A HREF="node321.htm#Node321"> Deprecated Functions</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

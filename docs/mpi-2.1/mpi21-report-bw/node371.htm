<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-appLang/appLang-Const.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Prototype definitions</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node371">325. Prototype definitions</a></H2>
<A HREF="node370.htm#Node370"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node368.htm#Node368"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node372.htm#Node372"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node368.htm#Node368"> Defined  Values and Handles</a>
<b>Next: </b><A HREF="node372.htm#Node372"> Deprecated prototype definitions</a>
<b>Previous: </b><A HREF="node370.htm#Node370"> Types</a>
<P>
The following are defined C typedefs for user-defined functions,   
also included in the file <tt> mpi.h</tt>.  
<P> 
<BR> 
<pre><tt>/* prototypes for user-defined functions */ 
typedef void MPI_User_function(void *invec, void *inoutvec, int *len, 
              MPI_Datatype *datatype); 
 
typedef int MPI_Comm_copy_attr_function(MPI_Comm oldcomm, 
              int comm_keyval, void *extra_state, void *attribute_val_in, 
              void *attribute_val_out, int*flag); 
typedef int MPI_Comm_delete_attr_function(MPI_Comm comm,  
              int comm_keyval, void *attribute_val, void *extra_state); 
 
typedef int MPI_Win_copy_attr_function(MPI_Win oldwin, int win_keyval, 
              void *extra_state, void *attribute_val_in, 
              void *attribute_val_out, int *flag); 
typedef int MPI_Win_delete_attr_function(MPI_Win win, int win_keyval, 
              void *attribute_val, void *extra_state); 
 
typedef int MPI_Type_copy_attr_function(MPI_Datatype oldtype, 
              int type_keyval, void *extra_state, 
              void *attribute_val_in, void *attribute_val_out, int *flag); 
typedef int MPI_Type_delete_attr_function(MPI_Datatype type, 
              int type_keyval, void *attribute_val, void *extra_state);  
 
typedef void MPI_Comm_errhandler_fn(MPI_Comm *, int *, ...); 
typedef void MPI_Win_errhandler_fn(MPI_Win *, int *, ...); 
typedef void MPI_File_errhandler_fn(MPI_File *, int *, ...); 
  
typedef int MPI_Grequest_query_function(void *extra_state,  
            MPI_Status *status); 
typedef int MPI_Grequest_free_function(void *extra_state); 
typedef int MPI_Grequest_cancel_function(void *extra_state, int complete);  
 
typedef int MPI_Datarep_extent_function(MPI_Datatype datatype,  
            MPI_Aint *file_extent, void *extra_state); 
typedef int MPI_Datarep_conversion_function(void *userbuf,  
            MPI_Datatype datatype, int count, void *filebuf,  
            MPI_Offset position, void *extra_state); 
</tt></pre> 
   
  
For Fortran, here are examples of how each of the user-defined  
subroutines should be declared.  
<P> 
The user-function argument to  MPI_OP_CREATE should be declared  
like this:  
<BR> 
<pre><tt>SUBROUTINE USER_FUNCTION(INVEC, INOUTVEC, LEN, TYPE) 
   &lt;type&gt; INVEC(LEN), INOUTVEC(LEN) 
   INTEGER LEN, TYPE 
</tt></pre> 
The copy and delete function arguments to  MPI_COMM_KEYVAL_CREATE should be  
declared like these:  
<P> 
<BR> 
<pre><tt>SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, 
             ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR) 
   INTEGER OLDCOMM, COMM_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN, 
             ATTRIBUTE_VAL_OUT 
   LOGICAL FLAG 
 
SUBROUTINE COMM_DELETE_ATTR_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, 
             EXTRA_STATE, IERROR) 
   INTEGER COMM, COMM_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE 
</tt></pre> 
The copy and delete function arguments to  MPI_WIN_KEYVAL_CREATE should be  
declared like these:  
<P> 
<BR> 
<pre><tt>SUBROUTINE WIN_COPY_ATTR_FN(OLDWIN, WIN_KEYVAL, EXTRA_STATE, 
             ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR) 
   INTEGER OLDWIN, WIN_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN, 
             ATTRIBUTE_VAL_OUT 
   LOGICAL FLAG 
 
SUBROUTINE WIN_DELETE_ATTR_FN(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, 
             EXTRA_STATE, IERROR) 
   INTEGER WIN, WIN_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE 
</tt></pre> 
The copy and delete function arguments to  MPI_TYPE_KEYVAL_CREATE should be  
declared like these:  
<P> 
<BR> 
<pre><tt>SUBROUTINE TYPE_COPY_ATTR_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, 
              ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR) 
   INTEGER OLDTYPE, TYPE_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, 
              ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT 
   LOGICAL FLAG 
 
SUBROUTINE TYPE_DELETE_ATTR_FN(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, 
              EXTRA_STATE, IERROR) 
   INTEGER TYPE, TYPE_KEYVAL, IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE 
</tt></pre> 
The handler-function argument to  MPI_COMM_CREATE_ERRHANDLER  
should be declared like this:  
<P> 
<BR> 
<pre><tt>SUBROUTINE COMM_ERRHANDLER_FN(COMM, ERROR_CODE, ...) 
   INTEGER COMM, ERROR_CODE 
</tt></pre> 
The handler-function argument to  MPI_WIN_CREATE_ERRHANDLER  
should be declared like this:  
<P> 
<BR> 
<pre><tt>SUBROUTINE WIN_ERRHANDLER_FN(WIN, ERROR_CODE, ...)  
   INTEGER WIN, ERROR_CODE 
</tt></pre> 
The handler-function argument to  MPI_FILE_CREATE_ERRHANDLER  
should be declared like this:  
<P> 
<BR> 
<pre><tt>SUBROUTINE FILE_ERRHANDLER_FN(FILE, ERROR_CODE, ...) 
   INTEGER FILE, ERROR_CODE 
</tt></pre> 
  
The query, free, and cancel function arguments to  MPI_GREQUEST_START  
should be declared like these:  
<P> 
<BR> 
<pre><tt>SUBROUTINE GREQUEST_QUERY_FUNCTION(EXTRA_STATE, STATUS, IERROR) 
   INTEGER STATUS(MPI_STATUS_SIZE), IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE 
  
SUBROUTINE GREQUEST_FREE_FUNCTION(EXTRA_STATE, IERROR) 
   INTEGER IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE 
  
SUBROUTINE GREQUEST_CANCEL_FUNCTION(EXTRA_STATE, COMPLETE, IERROR) 
   INTEGER IERROR 
   INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE 
   LOGICAL COMPLETE 
</tt></pre> 
The extend and conversion function arguments to  MPI_REGISTER_DATAREP  
should be declared like these:  
<P> 
<BR> 
<pre><tt>SUBROUTINE DATAREP_EXTENT_FUNCTION(DATATYPE, EXTENT, EXTRA_STATE, IERROR) 
    INTEGER DATATYPE, IERROR  
    INTEGER(KIND=MPI_ADDRESS_KIND) EXTENT, EXTRA_STATE 
  
SUBROUTINE DATAREP_CONVERSION_FUNCTION(USERBUF, DATATYPE, COUNT, FILEBUF,  
             POSITION, EXTRA_STATE, IERROR) 
    &lt;TYPE&gt; USERBUF(*), FILEBUF(*)  
    INTEGER COUNT, DATATYPE, IERROR  
    INTEGER(KIND=MPI_OFFSET_KIND) POSITION  
    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE 
</tt></pre> 
   
  
The following are defined C++ typedefs, also included in the file <tt>  
  mpi.h</tt>.  
<P> 
<BR> 
<pre><tt>namespace MPI { 
  typedef void User_function(const void* invec, void *inoutvec,  
              int len, const Datatype&amp; datatype); 
 
  typedef int Comm::Copy_attr_function(const Comm&amp; oldcomm, 
              int comm_keyval, void* extra_state, void* attribute_val_in, 
              void* attribute_val_out, bool&amp; flag); 
  typedef int Comm::Delete_attr_function(Comm&amp; comm, int 
              comm_keyval, void* attribute_val, void* extra_state); 
 
  typedef int Win::Copy_attr_function(const Win&amp; oldwin, 
              int win_keyval, void* extra_state, void* attribute_val_in, 
              void* attribute_val_out, bool&amp; flag); 
  typedef int Win::Delete_attr_function(Win&amp; win, int 
              win_keyval, void* attribute_val, void* extra_state);  
 
  typedef int Datatype::Copy_attr_function(const Datatype&amp; oldtype, 
              int type_keyval, void* extra_state, const void* attribute_val_in, 
              void* attribute_val_out, bool&amp; flag); 
  typedef int Datatype::Delete_attr_function(Datatype&amp; type, 
              int type_keyval, void* attribute_val, void* extra_state); 
 
  typedef void Comm::Errhandler_fn(Comm &amp;, int *, ...); 
  typedef void Win::Errhandler_fn(Win &amp;, int *, ...); 
  typedef void File::Errhandler_fn(File &amp;, int *, ...); 
 
  typedef int Grequest::Query_function(void* extra_state, Status&amp; status);  
  typedef int Grequest::Free_function(void* extra_state); 
  typedef int Grequest::Cancel_function(void* extra_state, bool complete); 
  
  typedef void Datarep_extent_function(const Datatype&amp; datatype,  
               Aint&amp; file_extent, void* extra_state); 
  typedef void Datarep_conversion_function(void* userbuf, Datatype&amp; datatype, 
               int count, void* filebuf, Offset position, void* extra_state); 
} 
</tt></pre> 
  

<P>
<HR>
<A HREF="node370.htm#Node370"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node368.htm#Node368"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node372.htm#Node372"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node368.htm#Node368"> Defined  Values and Handles</a>
<b>Next: </b><A HREF="node372.htm#Node372"> Deprecated prototype definitions</a>
<b>Previous: </b><A HREF="node370.htm#Node370"> Types</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

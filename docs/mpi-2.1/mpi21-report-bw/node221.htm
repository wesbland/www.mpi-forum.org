<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Releasing Connections</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node221">205. Releasing Connections</a></H2>
<A HREF="node220.htm#Node220"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node222.htm#Node222"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node217.htm#Node217"> Other Functionality</a>
<b>Next: </b><A HREF="node222.htm#Node222"> Another Way to Establish  MPI Communication</a>
<b>Previous: </b><A HREF="node220.htm#Node220"> MPI_APPNUM</a>
<P>
  
Before a client and server connect, they are independent  
 MPI applications. An error in one does not affect the other.   
After establishing a connection with  MPI_COMM_CONNECT  
and  MPI_COMM_ACCEPT, an error in one may  
affect the other.   
It is desirable for a client and server to be   
able to disconnect, so that an error in one will  
not affect the other. Similarly, it might be desirable for  
a parent and child to disconnect, so that errors  
in the child do not affect the parent, or vice-versa.   
<P> 
<ul> 
 
<li>Two processes are <b> connected</b> if there is a   
communication path (direct or indirect) between them. More precisely:  
  <ol> 
  
   
1. Two processes are connected if  
  <ol> 
     
1. they both belong   
      to the same communicator (inter- or intra-,   
      including  MPI_COMM_WORLD) <em> or</em>  
     
<BR> 
2. they have previously belonged to a communicator  
      that was freed with  MPI_COMM_FREE instead  
      of  MPI_COMM_DISCONNECT <em> or</em>  
     
<BR> 
3. they both belong to the group of the same window or  
      filehandle.   
  </ol> 
  
   
<BR> 
2. If A is connected to B and B to C, then A is connected to C.   
  </ol> 
 
<li>Two processes are <b> disconnected</b> (also <b> independent</b>)  
if they are not connected.   
 
<li>By the above definitions, connectivity is a transitive   
property, and divides the universe of  MPI processes into  
disconnected (independent) sets (equivalence classes) of processes.   
 
<li>Processes which are connected, but don't share the same   
 MPI_COMM_WORLD may become disconnected (independent) if the  
communication path between them is broken by  
using  MPI_COMM_DISCONNECT.  
</ul> 
<BR> 
The following additional rules apply to   
 MPI routines in other chapters:  
<ul> 
 
<li> MPI_FINALIZE is collective over a set of  
connected processes.   
 
<li> MPI_ABORT does not abort independent processes.   
It may abort all processes in the caller's  
 MPI_COMM_WORLD (ignoring its  comm  
argument). Additionally, it may abort connected processes  
as well, though it makes a ``best attempt'' to abort only  
the processes in  comm.   
 
<li>If a process terminates without calling  MPI_FINALIZE,  
independent processes are not affected but the effect on  
connected processes is not defined.   
</ul> 
<BR> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_DISCONNECT(comm)</TD></TR>   
<TR><TD> INOUT comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Comm_disconnect(MPI_Comm *comm) <BR></tt>  
 <tt> MPI_COMM_DISCONNECT(COMM, IERROR)<BR> INTEGER COMM, IERROR <BR><BR></tt>  
 <tt> void MPI::Comm::Disconnect() <BR></tt>  
<P> 
This function waits for all pending communication on  comm  
to complete internally, deallocates the communicator object, and sets the handle to  
 MPI_COMM_NULL. It is a collective operation.   
<P> 
It may not be called with the communicator  
 MPI_COMM_WORLD or  MPI_COMM_SELF.  
<P> 
 MPI_COMM_DISCONNECT may be called only if  
  
  
all communication is complete and matched, so that buffered  
data can be delivered to its destination. This requirement is   
the same as for  MPI_FINALIZE.   
<P> 
 MPI_COMM_DISCONNECT has the same action as   
 MPI_COMM_FREE, except that it waits for pending   
communication to finish internally and enables the  
guarantee about the behavior of disconnected processes.   
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
To disconnect two processes you may need to call  
 MPI_COMM_DISCONNECT,  MPI_WIN_FREE  
and  MPI_FILE_CLOSE to remove all communication paths  
between the two processes.  Notes that it may be necessary to  
disconnect several communicators (or to free several windows or files)  
before two processes are completely independent.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
It would be nice to be able to use  MPI_COMM_FREE instead,  
but that function explicitly does not wait for pending  
communication to complete.   
 (<em> End of rationale.</em>) <BR> 

<P>
<HR>
<A HREF="node220.htm#Node220"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node222.htm#Node222"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node217.htm#Node217"> Other Functionality</a>
<b>Next: </b><A HREF="node222.htm#Node222"> Another Way to Establish  MPI Communication</a>
<b>Previous: </b><A HREF="node220.htm#Node220"> MPI_APPNUM</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

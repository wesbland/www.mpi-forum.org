<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Example using  MPI_SCAN</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node112">110. Example using  MPI_SCAN</a></H2>
<A HREF="node111.htm#Node111"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node109.htm#Node109"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node113.htm#Node113"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node109.htm#Node109"> Scan</a>
<b>Next: </b><A HREF="node113.htm#Node113"> Correctness</a>
<b>Previous: </b><A HREF="node111.htm#Node111"> Exclusive Scan</a>
<P>
  
 <P> 
The example in this section uses an intracommunicator.  
  
<BR><b> Example</b>   
  
  
  
  
  
  
<P> 
This example uses a user-defined operation to produce a <em> segmented  
scan</em>.  A segmented scan takes, as input, a set of values and a set of logicals,  
and the logicals delineate the various segments of the scan.  
For example:  
<P><IMG WIDTH=114 HEIGHT=29 SRC="img56.gif"><P>
<P> 
The operator that produces this effect is,  
<P> 
<P><IMG WIDTH=299 HEIGHT=24 SRC="img57.gif"><P>
<P> 
where,  
<P> 
<P><IMG WIDTH=294 HEIGHT=24 SRC="img58.gif"><P>
<P> 
Note that this is a non-commutative operator.  
C code that implements it is given below.  
<P> 
<BR> 
<pre><tt>typedef struct { 
    double val; 
    int log; 
} SegScanPair; 
 
/* the user-defined function 
 */ 
void segScan( SegScanPair *in, SegScanPair *inout, int *len, 
                                                MPI_Datatype *dptr ) 
{ 
    int i; 
    SegScanPair c; 
 
    for (i=0; i&lt; *len; ++i) { 
        if ( in-&gt;log == inout-&gt;log ) 
            c.val = in-&gt;val + inout-&gt;val; 
        else 
            c.val = inout-&gt;val; 
        c.log = inout-&gt;log; 
        *inout = c; 
        in++; inout++; 
    } 
} 
</tt></pre> 
Note that the  inout argument to the user-defined function  
corresponds to the right-hand operand of the operator.  When using  
this operator, we must be careful to specify that it is non-commutative, as in the following.  
  
<BR> 
<pre><tt>    int i,base; 
    SeqScanPair  a, answer; 
    MPI_Op       myOp; 
    MPI_Datatype type[2] = {MPI_DOUBLE, MPI_INT}; 
    MPI_Aint     disp[2]; 
    int          blocklen[2] = { 1, 1}; 
    MPI_Datatype sspair; 
 
    /* explain to MPI how type SegScanPair is defined 
     */ 
    MPI_Address( a, disp); 
    MPI_Address( a.log, disp+1); 
    base = disp[0]; 
    for (i=0; i&lt;2; ++i) disp[i] -= base; 
    MPI_Type_struct( 2, blocklen, disp, type, &amp;sspair ); 
    MPI_Type_commit( &amp;sspair ); 
    /* create the segmented-scan user-op 
     */ 
    MPI_Op_create( segScan, 0, &amp;myOp ); 
    ... 
    MPI_Scan( a, answer, 1, sspair, myOp, comm ); 
</tt></pre> 
   
  

<P>
<HR>
<A HREF="node111.htm#Node111"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node109.htm#Node109"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node113.htm#Node113"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node109.htm#Node109"> Scan</a>
<b>Next: </b><A HREF="node113.htm#Node113"> Correctness</a>
<b>Previous: </b><A HREF="node111.htm#Node111"> Exclusive Scan</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

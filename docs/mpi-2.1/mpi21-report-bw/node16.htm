<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-terms/terms-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Procedure Specification</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node16">16. Procedure Specification</a></H1>
<A HREF="node15.htm#Node15"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node17.htm#Node17"> Semantic Terms</a>
<b>Previous: </b><A HREF="node15.htm#Node15"> Naming Conventions</a>
<P>
 MPI procedures are specified using a language-independent notation.  
The arguments of procedure calls are marked as   IN,   OUT or  
  INOUT.  The meanings of these are:  
<ul> 
 
<li>  IN:  
  the call may use the input value but does not update the argument,  
 
<li>  OUT:  
  the call may update the argument but does not use its input value,  
 
<li>  INOUT:  
  the call may both use and update the argument.  
</ul> 
<BR> 
  
There is one special case --- if an argument is a handle to  
an opaque object (these terms are defined in   
Section <a href="node19.htm#Node19">Opaque Objects 
</a>), and the  
object is updated by the procedure call, then the argument is marked  
  INOUT or  
  OUT.  It is marked this way even though the handle itself is not  
modified --- we use the   
  INOUT or  
  OUT attribute to denote that what the  
handle <em> references</em> is updated.    
Thus, in C++,   IN arguments are   
usually   
either references or pointers to   
<tt> const</tt> objects.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The definition of  MPI tries to avoid, to the largest possible extent,  
the use of   INOUT arguments, because such use is error-prone,  
especially for scalar arguments.  
 (<em> End of rationale.</em>) <BR> 
 MPI's use of   IN,   OUT and   INOUT is intended  
to indicate to the user how an argument is  
  
to be used, but  
  
does not provide a rigorous classification that can be translated  
directly into   
  
all   
  
language bindings (e.g., <tt> INTENT</tt> in Fortran 90 bindings  
or <tt> const</tt> in C bindings). For instance, the ``constant''  
 MPI_BOTTOM can usually be passed to   OUT buffer  
arguments. Similarly,  MPI_STATUS_IGNORE can be passed as the  
  OUT status argument.  
<P> 
A common occurrence for  MPI functions is an argument that is used as  
  IN   
by some processes and   OUT by other processes. Such  
an argument is, syntactically, an   INOUT argument and is marked as  
such, although, semantically, it is not used in one call both for  
input and for output on a single process.  
<P> 
Another frequent situation arises when an argument value is needed only by  
a subset of the processes.  When an argument is not significant at a  
process then an arbitrary value can be passed as an argument.  
<P> 
Unless specified otherwise, an argument of type   OUT or type  
  INOUT cannot be aliased with any other argument passed to an  
 MPI procedure.  An example of argument aliasing in C appears below.  
If we define a C procedure like this,  
<BR> 
<pre><tt>void copyIntBuffer( int *pin, int *pout, int len ) 
{   int i; 
    for (i=0; i&lt;len; ++i) *pout++ = *pin++; 
} 
</tt></pre> 
then a call to it in the following code fragment has aliased arguments.  
<BR> 
<pre><tt>int a[10]; 
copyIntBuffer( a, a+3, 7); 
</tt></pre> 
Although the C language allows this, such usage of  MPI procedures is  
forbidden unless otherwise specified.  Note that Fortran prohibits  
aliasing of arguments.  
<P> 
All  MPI functions are first specified in the language-independent  
notation.  Immediately below this, the   
ISO C   
version of the function  
is shown followed by a version of the same function in Fortran and  
then the C++ binding.  
  
Fortran in this document refers to Fortran 90; see  
Section <a href="node26.htm#Node26">Language Binding 
</a>.  
  
<P> 

<P>
<HR>
<A HREF="node15.htm#Node15"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi21-report-bw.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi21-report-bw.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node17.htm#Node17"> Semantic Terms</a>
<b>Previous: </b><A HREF="node15.htm#Node15"> Naming Conventions</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

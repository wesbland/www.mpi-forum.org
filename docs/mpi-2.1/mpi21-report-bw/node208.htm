<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef ../mpi2defs-bw.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi2-forum-tail.htm -Wnoredef -o mpi21-report-bw.tex mpi-report.tex 
-->
<TITLE>Names, Addresses, Ports,  and All That</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node208">195. Names, Addresses, Ports,  and All That</a></H2>
<A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node209.htm#Node209"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node207.htm#Node207"> Establishing Communication</a>
<b>Next: </b><A HREF="node209.htm#Node209"> Server Routines</a>
<b>Previous: </b><A HREF="node207.htm#Node207"> Establishing Communication</a>
<P>
Almost all of the complexity in  MPI client/server routines  
addresses the question ``how does the client find out how  
to contact the server?''  
The difficulty, of course, is that there is no existing   
communication channel between them, yet they must somehow agree   
on a rendezvous point where they will establish communication ---   
Catch-22.   
  
Agreeing on a rendezvous point always involves a third party.   
The third party may itself provide the rendezvous point or may  
communicate rendezvous information from server to client.   
Complicating  
matters might be the fact that a client doesn't really care  
what server it contacts, only that it be able to get in touch  
with one that can handle its request.  
<P> 
Ideally,  MPI can accommodate  
 a wide variety of run-time systems while  
retaining the ability to write simple portable code. The following  
should be compatible with  MPI:  
<P> 
<ul> 
 
<li>The server resides at a well-known internet address host:port.   
 
<li>The server prints out an address to the terminal,   
the user gives this address to the client program.   
 
<li>The server places the address information on a nameserver,   
where it can be retrieved with an agreed-upon name.   
 
<li>The server to which the client connects is actually   
a broker, acting as a middleman between the client and the  
real server.   
</ul> 
<BR> 
 MPI does not require a nameserver, so not all implementations  
will be able to support all of the above scenarios. However,   
 MPI provides an optional nameserver interface, and is compatible  
with external name servers.   
<P> 
A  port_name is a <em> system-supplied</em> string that encodes a  
low-level network address at which a server can be  
contacted. Typically this is an IP address and a port number, but an  
implementation is free to use any protocol.  
The server establishes a  port_name with the  
 MPI_OPEN_PORT routine. It accepts a   
connection to a given port with  MPI_COMM_ACCEPT.   
A client uses  port_name to connect to the server.   
<P> 
By itself, the  port_name mechanism is  
completely portable, but it may be clumsy to use because  
of the necessity to communicate  port_name to   
the client. It would be more convenient if a server could specify that  
it be known by an <em> application-supplied</em>  service_name so   
that the client could connect to that  service_name  
without knowing the  port_name.   
<P> 
An  MPI implementation may allow the  
server to publish a ( port_name,  service_name)  
pair with  MPI_PUBLISH_NAME and the client  
to retrieve the port name from the service name   
with  MPI_LOOKUP_NAME. This allows three levels  
of portability, with increasing levels of functionality.   
<ol> 
 
1. Applications that do not rely on the ability to publish  
names are the most portable. Typically the  port_name  
must be transferred ``by hand'' from server to client.   
 
<BR> 
2. Applications that use the  MPI_PUBLISH_NAME  
mechanism are completely portable among implementations  
that provide this service. To be portable among all   
implementations, these applications should have a fall-back mechanism  
that can be used when names are not published.   
 
<BR> 
3. Applications may ignore  MPI's name publishing  
functionality and use their own mechanism (possibly  
system-supplied) to publish names. This allows arbitrary  
flexibility but is not portable.   
</ol> 

<P>
<HR>
<A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node209.htm#Node209"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node207.htm#Node207"> Establishing Communication</a>
<b>Next: </b><A HREF="node209.htm#Node209"> Server Routines</a>
<b>Previous: </b><A HREF="node207.htm#Node207"> Establishing Communication</a>
<P>
<HR>
Return to <A HREF="node428.htm">MPI-2.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 1, 2008<BR>
HTML Generated on July 6, 2008
</FONT>
</BODY>
</HTML>

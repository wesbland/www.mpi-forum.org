<HTML>
<!-- This file was generated by tohtml from appLang.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>One-Sided Communications</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node281">12.8.3. One-Sided Communications</a></H2>
<A HREF="node280.htm#Node280"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node282.htm#Node282"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node282.htm#Node282"> Extended Collective Operations</a>
<b>Previous: </b><A HREF="node280.htm#Node280"> Process Creation and Management</a>
<P>
 <tt> void MPI::Win::Accumulate(const void* origin_addr, int origin_count, const MPI::Datatype&amp; origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype&amp; target_datatype, const MPI::Op&amp; op) const <BR></tt>  
 <tt> void MPI::Win::Complete() const <BR></tt>  
 <tt> static MPI::Win MPI::Win::Create(const void* base, MPI::Aint size, int disp_unit, const MPI::Info&amp; info, const MPI::Intracomm&amp; comm) <BR></tt>  
 <tt> void MPI::Win::Fence(int assert) const <BR></tt>  
 <tt> void MPI::Win::Free() <BR></tt>  
 <tt> void MPI::Win::Get(const void *origin_addr, int origin_count, const MPI::Datatype&amp; origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype&amp; target_datatype) const <BR></tt>  
 <tt> MPI::Group MPI::Win::Get_group() const <BR></tt>  
 <tt> void MPI::Win::Lock(int lock_type, int rank, int assert) const <BR></tt>  
 <tt> void MPI::Win::Post(const MPI::Group&amp; group, int assert) const <BR></tt>  
 <tt> void MPI::Win::Put(const void* origin_addr, int origin_count, const MPI::Datatype&amp; origin_datatype, int  target_rank, MPI::Aint target_disp, int target_count, const  MPI::Datatype&amp; target_datatype) const <BR></tt>  
 <tt> void MPI::Win::Start(const MPI::Group&amp; group, int assert) const <BR></tt>  
 <tt> bool MPI::Win::Test() const <BR></tt>  
 <tt> void MPI::Win::Unlock(int rank) const <BR></tt>  
 <tt> void MPI::Win::Wait() const <BR></tt>  
 <P> 

<P>
<HR>
<A HREF="node280.htm#Node280"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node282.htm#Node282"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node282.htm#Node282"> Extended Collective Operations</a>
<b>Previous: </b><A HREF="node280.htm#Node280"> Process Creation and Management</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

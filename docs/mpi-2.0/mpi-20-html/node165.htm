<HTML>
<!-- This file was generated by tohtml from ei-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Initialization</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node165">8.7.3. Initialization</a></H2>
<A HREF="node164.htm#Node164"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node162.htm#Node162"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node162.htm#Node162">  MPI and Threads</a>
<b>Next: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<b>Previous: </b><A HREF="node164.htm#Node164"> Clarifications</a>
<P>
The following function may be used to initialize  MPI, and initialize  
the  MPI thread environment, instead of  MPI_INIT.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INIT_THREAD(required, provided)</TD></TR>  
  
<TR><TD> IN required</TD><TD>desired level of thread support  (integer)</TD></TR>  
<TR><TD> OUT provided</TD><TD>provided level of thread support (integer)</TD></TR>  
  
</TABLE>  
<P> 
  
  
 <tt> int MPI_Init_thread(int *argc, char *((*argv)[]), int required, int *provided) <BR></tt>  
  
<P> 
 <tt> MPI_INIT_THREAD(REQUIRED, PROVIDED, IERROR)<BR> INTEGER REQUIRED, PROVIDED, IERROR <BR></tt>  
<P> 
 <tt> int MPI::Init_thread(int&amp; argc, char**&amp; argv, int required) <BR></tt>  
 <tt> int MPI::Init_thread(int required) <BR></tt>  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
In C and C++, the passing of  argc and  argv is  
optional.    
  
In C, this is accomplished by passing the appropriate null pointer.  
  
In C++, this is accomplished with two separate bindings to  
cover these two cases.  
  
This is as with  MPI_INIT as discussed in  
Section <a href="node43.htm#Node43">Passing  NULL to  MPI_Init 
</a>.  
  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
  
This call initializes  MPI in the same way that a call to  MPI_INIT  
would.  In addition, it  
initializes the thread environment.  The argument  required  
  
is used to specify the desired level of thread support.    
  
The possible values are listed  in increasing order of thread support.  
  
<dl> 
 
<dt> 
<b>{</b> MPI_THREAD_SINGLE}</b><dd> 
Only one thread will execute.   
 
<dt> 
<b>{</b> MPI_THREAD_FUNNELED}</b><dd> 
The process may be multi-threaded, but  
only the main thread will make  MPI calls (all  MPI calls are  
``funneled'' to the main thread).  
 
<dt> 
<b>{</b> MPI_THREAD_SERIALIZED}</b><dd> 
The process may be  
multi-threaded, and multiple threads may make  MPI calls, but only  
one at a time:  MPI calls are not made concurrently from two distinct  
threads (all  MPI calls are ``serialized'').  
 
<dt> 
<b>{</b> MPI_THREAD_MULTIPLE}</b><dd> 
Multiple threads may call  MPI,   
with no restrictions.  
</dl> 
<BR> 
These values are monotonic; i.e.,  
 MPI_THREAD_SINGLE  <I>&lt;</I>  MPI_THREAD_FUNNELED  
<I>&lt;</I>  MPI_THREAD_SERIALIZED <I>&lt;</I>  MPI_THREAD_MULTIPLE.   
<P> 
Different processes in  MPI_COMM_WORLD may require different  
levels of thread support.  
<P> 
The call returns in  provided information about the actual  
level of  thread support that will be provided by  MPI.  It can be one of the  
four values listed above.     
<P> 
The level(s) of thread support that can be provided by  
 MPI_INIT_THREAD  will  
depend on the implementation, and may depend on information provided  
by the user before the program started to execute (e.g., with  
arguments to  mpiexec).    If possible, the call will return  
 provided = required.  Failing this, the call will return the  
least supported level such that  provided <I>&gt;</I> required (thus providing  
a stronger level of support than required by the user).  Finally, if the user  
requirement cannot be satisfied, then the call will return   
in  provided the highest supported level.   
<P> 
A <b> thread compliant</b>  MPI implementation will be able to return  
 provided  
<BR>  
  = MPI_THREAD_MULTIPLE.   
Such an implementation may always return  
 provided  
<BR>  
  = MPI_THREAD_MULTIPLE, irrespective of the value  
of  required.  
At the other extreme, an  MPI library that is not thread compliant  
may always return  provided = MPI_THREAD_SINGLE,   
irrespective of the value of  required.  
<P> 
A call to  MPI_INIT has the same effect as a  
call to  MPI_INIT_THREAD with a  required =  
MPI_THREAD_SINGLE.   
<P> 
Vendors may provide (implementation  
dependent) means to specify the level(s) of  thread support available when the  MPI  
program is started, e.g., with arguments to  mpiexec.  This  
will affect the outcome of calls to  MPI_INIT and  
 MPI_INIT_THREAD.  Suppose, for example, that an  MPI  
program has been started so that only  MPI_THREAD_MULTIPLE is  
available.  Then    MPI_INIT_THREAD will return  
 provided = MPI_THREAD_MULTIPLE, irrespective of the value  
of  required; a call to  MPI_INIT will also  
initialize the  MPI thread support level  to  
 MPI_THREAD_MULTIPLE.  Suppose, on the other hand, that an  
 MPI program has been started so that all four levels of thread  
support are available.  Then, a call to  MPI_INIT_THREAD  
will return  provided = required; on the other hand, a call to  
 MPI_INIT will initialize the  MPI thread support level to  
 MPI_THREAD_SINGLE.      
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
Various optimizations are possible when  MPI code is executed  
single-threaded, or is executed on multiple threads, but not  
concurrently:  mutual exclusion code may be omitted. Furthermore, if only one  
thread executes, then the  MPI library can use library functions that  
are not thread safe, without risking conflicts with user threads.  
Also, the model  
of one communication thread, multiple computation threads fits well  
many applications.  E.g., if the process code is a sequential  
Fortran/C/C++ program with  MPI calls that has been parallelized by a  
compiler for execution on an SMP node, in a cluster of SMPs,  
then the process computation is  
multi-threaded, but  MPI calls will likely execute on a single  
thread.  
<P> 
The design accommodates a static specification of the thread support  
level, for environments that require static binding of libraries, and  
for compatibility for current multi-threaded  MPI codes.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
  
If  provided is not  MPI_THREAD_SINGLE then the MPI  
library should not  
  
invoke C/ C++/Fortran library calls that are  
not thread safe, e.g., in an environment where <tt> malloc</tt> is not thread  
safe, then <tt> malloc</tt> should not be used by the MPI library.  
<P> 
Some implementors may want to use different  MPI libraries for  
different levels of thread support.   They can do so using dynamic  
linking and selecting which library will be linked when  
 MPI_INIT_THREAD is invoked.    
If this is not possible, then optimizations for lower levels  
of thread support will occur only when the level of thread support required  
is specified at link time.    
 (<em> End of advice to implementors.</em>) <BR> 
The following function can be used to query the current level of thread  
support.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_QUERY_THREAD(provided)</TD></TR>  
  
<TR><TD> OUT provided</TD><TD>provided level of thread support (integer)</TD></TR>  
  
</TABLE>  
<P> 
 <tt> int MPI_Query_thread(int *provided) <BR></tt>  
<P> 
 <tt> MPI_QUERY_THREAD(PROVIDED, IERROR)<BR>  INTEGER PROVIDED, IERROR <BR></tt>  
<P> 
  
 <tt> int MPI::Query_thread() <BR></tt>  
  
<P> 
The call returns in  provided the current level of thread  
support.  This will be the value returned in  provided by  
 MPI_INIT_THREAD, if  MPI  
was initialized by a call to  MPI_INIT_THREAD().   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IS_THREAD_MAIN(flag)</TD></TR>  
<TR><TD> OUT flag</TD><TD>true if calling thread is main thread, false  
otherwise (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Is_thread_main(int *flag) <BR></tt>  
<P> 
 <tt> MPI_IS_THREAD_MAIN(FLAG, IERROR) <BR> LOGICAL FLAG <BR>INTEGER IERROR <BR></tt>  
<P> 
  
 <tt> bool MPI::Is_thread_main() <BR></tt>  
  
<P> 
This function can be called by a thread to find out whether it is the  
main thread (the thread that called  MPI_INIT or   
 MPI_INIT_THREAD).    
<P> 
All routines listed in this section  
must be  
supported by all  MPI implementations.   
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
 MPI libraries are required to provide these calls even if they do  
not support threads, so that portable code that contains invocations  
to these functions be able to link correctly.   MPI_INIT   
continues to be   
supported so as to provide compatibility with current  MPI codes.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
It is possible to spawn threads before  MPI is initialized, but no  
 MPI call other than  MPI_INITIALIZED  should be executed by these  
threads, until  MPI_INIT_THREAD is invoked by one  
thread (which, thereby, becomes the  main thread).  In particular, it is  
possible to enter the  MPI execution with a multi-threaded process.  
<P> 
The level of thread support provided is a global property of the  MPI  
process that can be specified only once, when  MPI is initialized on  
that process (or before).   Portable third party libraries have to be written so as to  
accommodate any provided level of thread support.     
Otherwise, their usage will be restricted to specific level(s) of thread support.  
If such a library can run only with specific level(s) of thread support, e.g.,  
only with  MPI_THREAD_MULTIPLE, then  
 MPI_QUERY_THREAD can be used to check whether the  
user initialized  MPI to the correct level of thread support and,  
if not, raise an exception.   
 (<em> End of advice to users.</em>) <BR> 

<P>
<HR>
<A HREF="node164.htm#Node164"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node162.htm#Node162"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node162.htm#Node162">  MPI and Threads</a>
<b>Next: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<b>Previous: </b><A HREF="node164.htm#Node164"> Clarifications</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

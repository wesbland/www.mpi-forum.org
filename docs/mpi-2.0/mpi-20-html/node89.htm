<HTML>
<!-- This file was generated by tohtml from dynamic-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Introduction</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node89">5.1. Introduction</a></H1>
<A HREF="node88.htm#Node88"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node88.htm#Node88"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node90.htm#Node90"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node88.htm#Node88"> Process Creation and Management</a>
<b>Next: </b><A HREF="node90.htm#Node90"> The  MPI-2 Process Model</a>
<b>Previous: </b><A HREF="node88.htm#Node88"> Process Creation and Management</a>
<P>
  
<P> 
 MPI-1 provides an interface that allows processes in a parallel  
program to communicate with one another.  MPI-1 specifies neither how  
the processes are created, nor how they establish communication.   
Moreover, an  MPI-1 application is static; that is, no  
processes can be added to or deleted from an application after  
it has been started.   
<P> 
 MPI users have asked that the  MPI-1 model be extended to allow process  
creation and management after an  MPI application has been started.   
A major impetus comes from the PVM [<a href="node250.htm#-Bib7">7</a>] research effort,  
which has provided a wealth of experience with process  
management and resource control that illustrates their benefits   
and potential pitfalls.    
<P> 
The  MPI Forum decided not to address resource control in  MPI-2  
because it was not able to design a portable interface that would be  
appropriate for the broad spectrum of existing and potential resource and  
process controllers.  Resource control can encompass a wide range of  
abilities, including adding and deleting nodes from a virtual parallel  
machine, reserving and scheduling resources, managing compute  
partitions of an MPP, and returning information about available  
resources.  
 MPI-2 assumes that resource control is provided externally --- probably  
by computer vendors, in the case of tightly coupled systems, or by a third  
party software package when the environment is a cluster of workstations.   
<P> 
The reasons for adding process management to  MPI are both  
technical and practical.  Important classes of message passing  
applications require process control. These include task  
farms, serial applications with parallel modules, and problems that  
require a run-time assessment of the number and type of processes that  
should be started.  On the practical side, users of workstation  
clusters who are migrating from PVM to  MPI may be accustomed to using  
PVM's capabilities for process and resource management. The lack of  
these features is a practical stumbling block to migration.  
<P> 
While process management is essential, adding it  
to  MPI should not compromise the portability or performance of  MPI  
applications.   
In particular:  
<ul> 
 
<li>The  MPI-2 process model must apply  
to the vast majority of current parallel environments. These  
include everything from tightly integrated MPPs   
to heterogeneous networks of  
workstations.   
 
<li> MPI must not take over operating system responsibilities.  
It should instead provide a clean interface between an application  
and system software.   
<P> 
 
<li> MPI must continue to guarantee communication determinism, i.e.,   
process management must not introduce unavoidable race  
conditions.   
<P> 
 
<li> MPI must not contain features that compromise performance.  
<P> 
 
<li> MPI-1 programs must work under  MPI-2, i.e., the  MPI-1   
static process model must be a special case of the  MPI-2 dynamic  
model.   
<P> 
</ul> 
<BR> 
The  MPI-2 process management model addresses these issues in two  
ways. First,  MPI remains primarily a communication library. It  
does not manage the parallel environment in which  
a parallel program executes, though it provides a minimal  
interface between an application and external resource and  
process managers.   
<P> 
Second,  MPI-2 does not change the concept of communicator. Once a  
communicator is built, it behaves as specified in  MPI-1. A  
communicator is never changed once created, and it is always  
created using deterministic collective operations.   
<P> 

<P>
<HR>
<A HREF="node88.htm#Node88"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node88.htm#Node88"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node90.htm#Node90"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node88.htm#Node88"> Process Creation and Management</a>
<b>Next: </b><A HREF="node90.htm#Node90"> The  MPI-2 Process Model</a>
<b>Previous: </b><A HREF="node88.htm#Node88"> Process Creation and Management</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

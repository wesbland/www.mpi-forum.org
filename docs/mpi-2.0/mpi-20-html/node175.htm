<HTML>
<!-- This file was generated by tohtml from io-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Opening a File</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node175">9.2.1. Opening a File</a></H2>
<A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node176.htm#Node176"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<b>Next: </b><A HREF="node176.htm#Node176"> Closing a File</a>
<b>Previous: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<P>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_OPEN(comm, filename, amode, info, fh)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> IN filename</TD><TD>name of file to open (string)</TD></TR>  
<TR><TD> IN amode</TD><TD>file access mode (integer)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> OUT fh</TD><TD>new file handle (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_open(MPI_Comm comm, char *filename, int amode, MPI_Info info, MPI_File *fh) <BR></tt>  
 <tt> MPI_FILE_OPEN(COMM, FILENAME, AMODE, INFO, FH, IERROR)<BR> CHARACTER*(*) FILENAME <BR>INTEGER COMM, AMODE, INFO, FH, IERROR <BR></tt>  
 <tt> static MPI::File MPI::File::Open(const MPI::Intracomm&amp; comm, const char* filename, int amode, const MPI::Info&amp; info) <BR></tt>  
<P> 
 MPI_FILE_OPEN opens the file identified by the file name  
 filename on all processes in the  comm communicator group.  
 MPI_FILE_OPEN is a collective routine:  
all processes must provide the same value for  amode,  
and all processes must provide  filenames that  
reference the same file.  
  
  
(Values for  info may vary.)  
 comm must be an intracommunicator;  
it is erroneous to pass an intercommunicator to  MPI_FILE_OPEN.  
  
Errors in  MPI_FILE_OPEN are raised   
using the default file error handler  
  
(see Section <a href="node217.htm#Node217">I/O Error Handling 
</a>).  
A process can open a file independently of other processes  
by using the  MPI_COMM_SELF communicator.  
The file handle returned,  fh,  
can be subsequently used to access the file until the file is  
closed using  MPI_FILE_CLOSE.  
Before calling  MPI_FINALIZE,  
the user is required to close (via  MPI_FILE_CLOSE)  
all files that were opened with  MPI_FILE_OPEN.  
Note that the communicator  comm is unaffected by  MPI_FILE_OPEN  
and continues to be usable in all  MPI routines (e.g.,  MPI_SEND).  
Furthermore, the use of  comm will not interfere with I/O behavior.  
<P> 
The format for specifying the file name in the  filename  
argument is implementation dependent  
and must be documented by the implementation.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
An implementation may require that  filename include  
a string or strings specifying additional information about the file.  
  
Examples include the type of filesystem (e.g., a prefix of ufs:),  
a remote hostname (e.g., a prefix of machine.univ.edu:),  
or a file password (e.g., a suffix of /PASSWORD=SECRET).  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
On some implementations of  MPI,  
the file namespace may not be identical from all processes of all applications.  
For example,  
``/tmp/foo'' may denote different files on different processes,  
or a single file may have many names, dependent on process location.  
The user is responsible for ensuring that a single file  
is referenced by the  filename argument,  
as it may be impossible for an implementation to detect  
this type of namespace error.  
 (<em> End of advice to users.</em>) <BR> 
Initially, all processes view the file as a linear byte stream,  
and each process views data in its own native representation  
(no data representation conversion is performed).  
  
(POSIX files are linear byte streams in the native representation.)  
The file view can be changed  
via the  MPI_FILE_SET_VIEW routine.  
<P> 
The following access modes are supported  
(specified in  amode, a bit vector OR of the following  
integer constants):  
<ul> 
 
<li> MPI_MODE_RDONLY --- read only,  
 
<li> MPI_MODE_RDWR   --- reading and writing,  
 
<li> MPI_MODE_WRONLY --- write only,  
 
<li> MPI_MODE_CREATE --- create the file if it does not exist,  
 
<li> MPI_MODE_EXCL --- error if creating file that already exists,  
 
<li> MPI_MODE_DELETE_ON_CLOSE --- delete file on close,  
 
<li> MPI_MODE_UNIQUE_OPEN --- file will not be concurrently opened elsewhere,  
 
<li> MPI_MODE_SEQUENTIAL --- file will only be accessed sequentially,  
 
<li> MPI_MODE_APPEND --- set initial position of all file pointers to end of file.  
</ul> 
<BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
C/C++ users can use bit vector OR (<IMG WIDTH=2 HEIGHT=11 SRC="img21.gif">
) to combine these constants;  
  
Fortran 90 users can use the bit vector <tt> IOR</tt> intrinsic.  
Fortran 77 users can use (nonportably) bit vector <tt> IOR</tt>  
  
on systems that support it.  
Alternatively,  
Fortran users can portably use integer addition to OR the constants  
(each constant should appear at most once in the addition.).  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
The values of these constants must be defined such that  
the bitwise OR and the sum of any distinct set  
of these constants is equivalent.  
 (<em> End of advice to implementors.</em>) <BR> 
The modes  MPI_MODE_RDONLY,  MPI_MODE_RDWR,   
 MPI_MODE_WRONLY,  
 MPI_MODE_CREATE, and  MPI_MODE_EXCL have identical semantics  
to their POSIX counterparts [<a href="node250.htm#-Bib11">11</a>].  
Exactly one of  MPI_MODE_RDONLY,  MPI_MODE_RDWR,   
or  MPI_MODE_WRONLY,  
must be specified.  
It is erroneous to specify  MPI_MODE_CREATE   
or  MPI_MODE_EXCL  
in conjunction with  MPI_MODE_RDONLY;  
it is erroneous to specify  MPI_MODE_SEQUENTIAL  
together with  MPI_MODE_RDWR.  
<P> 
The  MPI_MODE_DELETE_ON_CLOSE mode causes the file to be deleted  
(equivalent to performing an  MPI_FILE_DELETE)  
when the file is closed.  
<P> 
The  MPI_MODE_UNIQUE_OPEN mode allows an implementation to  
optimize access by eliminating the overhead of file locking.  
It is erroneous to open a file in this mode unless the file will  
not be concurrently opened elsewhere.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
For  MPI_MODE_UNIQUE_OPEN, <em> not opened elsewhere</em> includes  
both inside and outside the  MPI environment.  
In particular, one needs to be aware of potential external events  
which may open files (e.g., automated backup facilities).  
When  MPI_MODE_UNIQUE_OPEN is specified,  
the user is responsible for ensuring that no such external events take place.  
 (<em> End of advice to users.</em>) <BR> 
The  MPI_MODE_SEQUENTIAL mode allows an implementation to  
optimize access to some sequential devices (tapes and network streams).  
It is erroneous to attempt nonsequential access to a  
file that has been opened in this mode.  
  
<P> 
Specifying  MPI_MODE_APPEND only guarantees that all shared and individual  
file pointers are positioned at the initial end of file when  MPI_FILE_OPEN  
returns.  
Subsequent positioning of file pointers is application dependent.  
In particular, the implementation does not ensure that all writes are  
appended.  
<P> 
Errors related to the access mode are raised  
  
in the class  MPI_ERR_AMODE.  
  
<P> 
The  info argument is used to provide information  
regarding file access patterns and file system specifics  
  
(see Section <a href="node182.htm#Node182">File Info 
</a>).  
  
The constant  MPI_INFO_NULL  
  
can be used when no info needs to be specified.  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Some file attributes are inherently implementation dependent  
(e.g., file permissions).  
These attributes must be set using either  
the  info argument or facilities outside the scope of  MPI.  
 (<em> End of advice to users.</em>) <BR> 
Files are opened by default using nonatomic mode file consistency semantics  
(see Section <a href="node206.htm#Node206">File Consistency 
</a>).  
The more stringent atomic mode consistency semantics,  
  
required for atomicity of conflicting accesses,  
  
can be set using  MPI_FILE_SET_ATOMICITY.  
<P> 

<P>
<HR>
<A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node176.htm#Node176"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<b>Next: </b><A HREF="node176.htm#Node176"> Closing a File</a>
<b>Previous: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

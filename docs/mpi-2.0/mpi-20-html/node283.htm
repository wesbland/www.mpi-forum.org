<HTML>
<!-- This file was generated by tohtml from appLang.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>External Interfaces</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node283">12.8.5. External Interfaces</a></H2>
<A HREF="node282.htm#Node282"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node284.htm#Node284"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node284.htm#Node284"> I/O</a>
<b>Previous: </b><A HREF="node282.htm#Node282"> Extended Collective Operations</a>
<P>
 <tt> int MPI::Add_error_class() <BR></tt>  
 <tt> int MPI::Add_error_code(int errorclass) <BR></tt>  
 <tt> void MPI::Add_error_string(int errorcode, const char* string) <BR></tt>  
 <tt> void MPI::Comm::Call_errhandler(int errorcode) const <BR></tt>  
 <tt> static int MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state) <BR></tt>  
 <tt> void MPI::Comm::Delete_attr(int comm_keyval) <BR></tt>  
 <tt> static void MPI::Comm::Free_keyval(int&amp; comm_keyval) <BR></tt>  
 <tt> bool MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const <BR></tt>  
 <tt> void MPI::Comm::Get_name(char* comm_name, int&amp; resultlen) const <BR></tt>  
 <tt> void MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const <BR></tt>  
 <tt> void MPI::Comm::Set_name(const char* comm_name) <BR></tt>  
 <tt> static int MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state) <BR></tt>  
 <tt> void MPI::Datatype::Delete_attr(int type_keyval) <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Dup() const <BR></tt>  
 <tt> static void MPI::Datatype::Free_keyval(int&amp; type_keyval) <BR></tt>  
 <tt> bool MPI::Datatype::Get_attr(int type_keyval, void* attribute_val) const <BR></tt>  
 <tt> void MPI::Datatype::Get_contents(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI::Aint array_of_addresses[], MPI::Datatype array_of_datatypes[]) const <BR></tt>  
 <tt> void MPI::Datatype::Get_envelope(int&amp; num_integers, int&amp; num_addresses, int&amp; num_datatypes, int&amp; combiner) const <BR></tt>  
 <tt> void MPI::Datatype::Get_name(char* type_name, int&amp; resultlen) const <BR></tt>  
 <tt> void MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val) <BR></tt>  
 <tt> void MPI::Datatype::Set_name(const char* type_name) <BR></tt>  
 <tt> void MPI::File::Call_errhandler(int errorcode) const <BR></tt>  
 <tt> void MPI::Grequest::Complete() <BR></tt>  
 <tt> static MPI::Grequest MPI::Grequest::Start(const MPI::Grequest::Query_function query_fn, const MPI::Grequest::Free_function free_fn, const MPI::Grequest::Cancel_function cancel_fn, void *extra_state) <BR></tt>  
 <tt> int MPI::Init_thread(int required) <BR></tt>  
 <tt> int MPI::Init_thread(int&amp; argc, char**&amp; argv, int required) <BR></tt>  
 <tt> bool MPI::Is_thread_main() <BR></tt>  
 <tt> int MPI::Query_thread() <BR></tt>  
 <tt> void MPI::Status::Set_cancelled(bool flag) <BR></tt>  
 <tt> void MPI::Status::Set_elements(const MPI::Datatype&amp; datatype, int count) <BR></tt>  
 <tt> void MPI::Win::Call_errhandler(int errorcode) const <BR></tt>  
 <tt> static int MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state) <BR></tt>  
 <tt> void MPI::Win::Delete_attr(int win_keyval) <BR></tt>  
 <tt> static void MPI::Win::Free_keyval(int&amp; win_keyval) <BR></tt>  
 <tt> bool MPI::Win::Get_attr(const MPI::Win&amp; win, int win_keyval, void* attribute_val) const <BR></tt>  
 <tt> void MPI::Win::Get_name(char* win_name, int&amp; resultlen) const <BR></tt>  
 <tt> void MPI::Win::Set_attr(int win_keyval, const void* attribute_val) <BR></tt>  
 <tt> void MPI::Win::Set_name(const char* win_name) <BR></tt>  
 <P> 

<P>
<HR>
<A HREF="node282.htm#Node282"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node284.htm#Node284"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node284.htm#Node284"> I/O</a>
<b>Previous: </b><A HREF="node282.htm#Node282"> Extended Collective Operations</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

<HTML>
<!-- This file was generated by tohtml from appLang.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Miscellany</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node279">12.8.1. Miscellany</a></H2>
<A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node280.htm#Node280"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node280.htm#Node280"> Process Creation and Management</a>
<b>Previous: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<P>
 <tt> void* MPI::Alloc_mem(MPI::Aint size, const MPI::Info&amp; info) <BR></tt>  
 <tt> static MPI::Errhandler MPI::Comm::Create_errhandler(MPI::Comm::Errhandler_fn* function) <BR></tt>  
 <tt> MPI::Errhandler MPI::Comm::Get_errhandler() const <BR></tt>  
 <tt> void MPI::Comm::Set_errhandler(const MPI::Errhandler&amp; errhandler) <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Create_darray(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Create_hindexed(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[]) const <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Create_hvector(int count, int blocklength, MPI::Aint stride) const <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Create_indexed_block( int count, int blocklength, const int array_of_displacements[]) const <BR></tt>  
 <tt> static MPI::Datatype MPI::Datatype::Create_struct(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[], const MPI::Datatype array_of_types[]) <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const <BR></tt>  
 <tt> void MPI::Datatype::Get_extent(MPI::Aint&amp; lb, MPI::Aint&amp; extent) const <BR></tt>  
 <tt> void MPI::Datatype::Get_true_extent(MPI::Aint&amp; true_lb, MPI::Aint&amp; true_extent) const <BR></tt>  
 <tt> void MPI::Datatype::Pack_external(const char* datarep, const void* inbuf, int incount, void* outbuf, MPI::Aint outsize, MPI::Aint&amp; position) const <BR></tt>  
 <tt> MPI::Aint MPI::Datatype::Pack_external_size(const char* datarep, int incount) const <BR></tt>  
 <tt> MPI::Datatype MPI::Datatype::Resized(const MPI::Aint lb, const MPI::Aint extent) const <BR></tt>  
 <tt> void MPI::Datatype::Unpack_external(const char* datarep, const void* inbuf, MPI::Aint insize, MPI::Aint&amp; position, void* outbuf, int outcount) const  <BR></tt>  
 <tt> static MPI::Errhandler MPI::File::Create_errhandler(MPI::File::Errhandler_fn* function) <BR></tt>  
 <tt> MPI::Errhandler MPI::File::Get_errhandler() const <BR></tt>  
 <tt> void MPI::File::Set_errhandler(const MPI::Errhandler&amp; errhandler) <BR></tt>  
 <tt> void MPI::Free_mem(void *base) <BR></tt>  
 <tt> MPI::Aint MPI::Get_address(void* location) <BR></tt>  
 <tt> static MPI::Info MPI::Info::Create() <BR></tt>  
 <tt> void MPI::Info::Delete(const char* key) <BR></tt>  
 <tt> MPI::Info MPI::Info::Dup() const <BR></tt>  
 <tt> void MPI::Info::Free() <BR></tt>  
 <tt> bool MPI::Info::Get(const char* key, int valuelen, char* value) const <BR></tt>  
 <tt> int MPI::Info::Get_nkeys() const <BR></tt>  
 <tt> void MPI::Info::Get_nthkey(int n, char* key) const <BR></tt>  
 <tt> bool MPI::Info::Get_valuelen(const char* key, int&amp; valuelen) const <BR></tt>  
 <tt> void MPI::Info::Set(const char* key, const char* value) <BR></tt>  
 <tt> bool MPI::Is_finalized() <BR></tt>  
 <tt> bool MPI::Request::Get_status() const <BR></tt>  
 <tt> bool MPI::Request::Get_status(MPI::Status&amp; status) const <BR></tt>  
 <tt> static MPI::Errhandler MPI::Win::Create_errhandler(MPI::Win::Errhandler_fn* function) <BR></tt>  
 <tt> MPI::Errhandler MPI::Win::Get_errhandler() const <BR></tt>  
 <tt> void MPI::Win::Set_errhandler(const MPI::Errhandler&amp; errhandler) <BR></tt>  
 <P> 

<P>
<HR>
<A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node280.htm#Node280"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node280.htm#Node280"> Process Creation and Management</a>
<b>Previous: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

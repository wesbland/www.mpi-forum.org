<HTML>
<!-- This file was generated by tohtml from misc-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Passing  MPI_STATUS_IGNORE for Status</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node47">4.5.1. Passing  MPI_STATUS_IGNORE for Status</a></H2>
<A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node48.htm#Node48"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node46.htm#Node46"> Treatment of  MPI_Status</a>
<b>Next: </b><A HREF="node48.htm#Node48"> Non-destructive Test of  status</a>
<b>Previous: </b><A HREF="node46.htm#Node46"> Treatment of  MPI_Status</a>
<P>
  
<P> 
Every call to  MPI_RECV includes a  status argument, wherein  
the system can return details about the message received.  
  
There are also a number of other  MPI calls, particularly in  MPI-2, where  
 status is returned.  
  
An object of type  
 MPI_STATUS is not an  MPI opaque object; its structure is declared  
in <tt> mpi.h</tt> and <tt> mpif.h</tt>, and it exists in the user's program.  In many  
cases, application programs are constructed so that it is unnecessary for them  
to examine the <tt> status</tt> fields.  In these cases, it is a waste for the user  
to allocate a status object, and it is particularly wasteful for the  MPI  
implementation to fill in fields in this object.  
<P> 
  
<P> 
To cope with this problem, there are two predefined constants,  
 MPI_STATUS_IGNORE and  MPI_STATUSES_IGNORE, which when  
passed to a receive, wait, or test function, inform the implementation that  
the status fields are not to be filled in.  Note that  
 MPI_STATUS_IGNORE is not a special type of  MPI_STATUS  
object; rather, it is a special value for the argument.  In C one would expect  
it to be  NULL, not the address of a special  MPI_STATUS.  
<P> 
 MPI_STATUS_IGNORE, and the array version  
 MPI_STATUSES_IGNORE, can be used everywhere a status argument is  
passed to a receive, wait, or test function.   MPI_STATUS_IGNORE  
cannot be used when status is an IN argument.  
  
Note that in Fortran  MPI_STATUS_IGNORE and  MPI_STATUSES_IGNORE are  
objects like  MPI_BOTTOM (not usable for initialization or  
assignment).  See Section <a href="node13.htm#Node13">Named Constants 
</a>.  
<P> 
  
<P> 
  
<P> 
  
<P> 
In general, this optimization can apply to all functions for which  
 status or an array of  statuses is an OUT argument.  
  
Note that this converts  status into an INOUT argument.  
  
The functions that can be passed  MPI_STATUS_IGNORE are all the various forms of  
  
 MPI_RECV,  MPI_TEST, and  MPI_WAIT, as well as  
 MPI_REQUEST_GET_STATUS.  
  
When an array is passed, as in the  ANY and  ALL  
functions, a separate constant,  MPI_STATUSES_IGNORE, is passed for  
the array argument.  
  
It is possible for an  MPI function to return  MPI_ERR_IN_STATUS  
even when  MPI_STATUS_IGNORE or  MPI_STATUSES_IGNORE has  
been passed to that function.  
  
<P> 
  
<P> 
  
<P> 
 MPI_STATUS_IGNORE and  MPI_STATUSES_IGNORE are not  
  
required to have the same values in C and Fortran.   
<P> 
It is not allowed to have some of the statuses in an array of statuses for  
 _ANY and  _ALL functions set to  
 MPI_STATUS_IGNORE;  one either specifies ignoring <em> all </em> of  
the statuses in such a call with  MPI_STATUSES_IGNORE, or <em>  
  none</em> of them by passing normal statuses in all positions in the array  
of statuses.  
<P> 
  
<P> 
  
<P> 
  
<P> 
There are no C++ bindings for  
 MPI_STATUS_IGNORE or  MPI_STATUSES_IGNORE.   
To allow an  OUT or  INOUT <tt> MPI::Status</tt> argument to be ignored,  
all  MPI C++ bindings that have  OUT or  INOUT <tt> MPI::Status</tt>  
parameters are overloaded with a second version that omits the  OUT or  INOUT <tt> MPI::Status</tt> parameter.  
<P> 
<BR><b> Example</b>The C++ bindings for  MPI_PROBE are:  
<P> 
<tt> void MPI::Comm::Probe(int source, int tag, MPI::Status&amp; status)  
const</tt>  
<P> 
<tt> void MPI::Comm::Probe(int source, int tag) const</tt>  
  
<P> 
  
<P> 

<P>
<HR>
<A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node48.htm#Node48"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node46.htm#Node46"> Treatment of  MPI_Status</a>
<b>Next: </b><A HREF="node48.htm#Node48"> Non-destructive Test of  status</a>
<b>Previous: </b><A HREF="node46.htm#Node46"> Treatment of  MPI_Status</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

<HTML>
<!-- This file was generated by tohtml from appLang.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>I/O</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node284">12.8.6. I/O</a></H2>
<A HREF="node283.htm#Node283"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node285.htm#Node285"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node285.htm#Node285"> Language Bindings</a>
<b>Previous: </b><A HREF="node283.htm#Node283"> External Interfaces</a>
<P>
 <tt> void MPI::File::Close() <BR></tt>  
 <tt> static void MPI::File::Delete(const char* filename, const MPI::Info&amp; info) <BR></tt>  
 <tt> int MPI::File::Get_amode() const <BR></tt>  
 <tt> bool MPI::File::Get_atomicity() const <BR></tt>  
 <tt> MPI::Offset MPI::File::Get_byte_offset(const MPI::Offset disp) const <BR></tt>  
 <tt> MPI::Group MPI::File::Get_group() const <BR></tt>  
 <tt> MPI::Info MPI::File::Get_info() const <BR></tt>  
 <tt> MPI::Offset MPI::File::Get_position() const <BR></tt>  
 <tt> MPI::Offset MPI::File::Get_position_shared() const <BR></tt>  
 <tt> MPI::Offset MPI::File::Get_size() const <BR></tt>  
 <tt> MPI::Aint MPI::File::Get_type_extent(const MPI::Datatype&amp; datatype) const <BR></tt>  
 <tt> void MPI::File::Get_view(MPI::Offset&amp; disp, MPI::Datatype&amp; etype, MPI::Datatype&amp; filetype, char* datarep) const <BR></tt>  
 <tt> MPI::Request MPI::File::Iread(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> MPI::Request MPI::File::Iread_at(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> MPI::Request MPI::File::Iread_shared(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> MPI::Request MPI::File::Iwrite(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> MPI::Request MPI::File::Iwrite_at(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> MPI::Request MPI::File::Iwrite_shared(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> static MPI::File MPI::File::Open(const MPI::Intracomm&amp; comm, const char* filename, int amode, const MPI::Info&amp; info) <BR></tt>  
 <tt> void MPI::File::Preallocate(MPI::Offset size) <BR></tt>  
 <tt> void MPI::File::Read(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read(void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_all(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_all(void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_all_begin(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_all_end(void* buf) <BR></tt>  
 <tt> void MPI::File::Read_all_end(void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_at(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_at(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_at_all_begin(MPI::Offset offset, void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_at_all_end(void* buf) <BR></tt>  
 <tt> void MPI::File::Read_at_all_end(void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_ordered(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_ordered(void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_ordered_begin(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_ordered_end(void* buf) <BR></tt>  
 <tt> void MPI::File::Read_ordered_end(void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Read_shared(void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Read_shared(void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Seek(MPI::Offset offset, int whence) <BR></tt>  
 <tt> void MPI::File::Seek_shared(MPI::Offset offset, int whence) <BR></tt>  
 <tt> void MPI::File::Set_atomicity(bool flag) <BR></tt>  
 <tt> void MPI::File::Set_info(const MPI::Info&amp; info) <BR></tt>  
 <tt> void MPI::File::Set_size(MPI::Offset size) <BR></tt>  
 <tt> void MPI::File::Set_view(MPI::Offset disp, const MPI::Datatype&amp; etype, const MPI::Datatype&amp; filetype, const char* datarep, const MPI::Info&amp; info) <BR></tt>  
 <tt> void MPI::File::Sync() <BR></tt>  
 <tt> void MPI::File::Write(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write(const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_all(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_all(const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_all_begin(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_all_end(const void* buf) <BR></tt>  
 <tt> void MPI::File::Write_all_end(const void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_at(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_at(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_at_all(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_at_all(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_at_all_begin(MPI::Offset offset, const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_at_all_end(const void* buf) <BR></tt>  
 <tt> void MPI::File::Write_at_all_end(const void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_ordered(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_ordered(const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_ordered_begin(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_ordered_end(const void* buf) <BR></tt>  
 <tt> void MPI::File::Write_ordered_end(const void* buf, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::File::Write_shared(const void* buf, int count, const MPI::Datatype&amp; datatype) <BR></tt>  
 <tt> void MPI::File::Write_shared(const void* buf, int count, const MPI::Datatype&amp; datatype, MPI::Status&amp; status) <BR></tt>  
 <tt> void MPI::Register_datarep(const char* datarep, MPI::Datarep_conversion_function* read_conversion_fn, MPI::Datarep_conversion_function* write_conversion_fn, MPI::Datarep_extent_function* dtype_file_extent_fn, void* extra_state) <BR></tt>  
 <P> 

<P>
<HR>
<A HREF="node283.htm#Node283"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node278.htm#Node278"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node285.htm#Node285"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node278.htm#Node278">  MPI-2 C++ Bindings</a>
<b>Next: </b><A HREF="node285.htm#Node285"> Language Bindings</a>
<b>Previous: </b><A HREF="node283.htm#Node283"> External Interfaces</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

<HTML>
<!-- This file was generated by tohtml from terms-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Fortran Binding Issues</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node19">2.6.2. Fortran Binding Issues</a></H2>
<A HREF="node18.htm#Node18"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node20.htm#Node20"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node17.htm#Node17"> Language Binding</a>
<b>Next: </b><A HREF="node20.htm#Node20"> C Binding Issues</a>
<b>Previous: </b><A HREF="node18.htm#Node18"> Deprecated Names and Functions</a>
<P>
  
 MPI-1.1   
  
provided bindings for Fortran 77.  MPI-2 retains  
these bindings but they are now interpreted in the  
context of the Fortran 90 standard.  MPI can still  
be used with most Fortran 77 compilers, as noted below.  
  
When the term Fortran is used it means Fortran 90.   
  
<P> 
All  MPI names have an <tt> MPI_</tt> prefix, and all characters are  
capitals.  Programs must not declare variables, parameters, or  
functions with names beginning with the prefix <tt> MPI_</tt>.  To avoid  
conflicting with the profiling interface, programs should also avoid  
functions with the prefix <tt> PMPI_</tt>.  
This is mandated to avoid possible name collisions.  
<P> 
All  MPI Fortran subroutines have a return code in the last argument.  A few  
 MPI operations which are functions do not have the return code argument.  
The return code value for successful completion is  
 MPI_SUCCESS.  Other error codes are implementation dependent;  
see the error codes in Chapter 7 of the  MPI-1 document and  
Annex <a href="node251.htm#Node251">Language Binding 
</a> in the  MPI-2 document.  
<P> 
  
Constants representing the maximum length of a string are one smaller  
in Fortran than in C and C++ as discussed in Section <a href="node69.htm#Node69">Constants 
</a>.  
  
<P> 
Handles are represented in Fortran as <tt> INTEGER</tt>s.  Binary-valued  
variables are of type <tt> LOGICAL</tt>.  
<P> 
Array arguments are indexed from one.  
<P> 
The  MPI Fortran binding is inconsistent with the Fortran 90   
standard in several respects. These   
  
inconsistencies, such as register optimization problems,  
  
have  
implications for user codes that are discussed in detail  
in Section <a href="node236.htm#Node241">A Problem with Register Optimization 
</a>. They are also inconsistent with  
Fortran 77.   
<P> 
<ul> 
 
<li>An  MPI subroutine with a choice argument may be  
called with different argument types.   
 
<li>An  MPI subroutine with an assumed-size dummy argument may  
be passed an actual scalar argument.     
 
<li>Many  MPI routines assume that actual arguments are  
passed by address and that arguments are not copied on  
entrance to or exit from the subroutine.   
 
<li>An  MPI implementation may read or modify user data (e.g.,  
communication buffers used by nonblocking communications) concurrently  
with a user program executing outside  MPI calls.  
 
<li>Several named ``constants,'' such as  MPI_BOTTOM,   
 MPI_STATUS_IGNORE, and  MPI_ERRCODES_IGNORE,  
are not ordinary Fortran constants and require a special  
implementation. See Section <a href="node13.htm#Node13">Named Constants 
</a> for more information.  
</ul> 
<BR> 
Additionally,  MPI is inconsistent with Fortran 77 in a number of   
ways, as noted below.   
<ul> 
 
<li> MPI identifiers exceed 6 characters.   
 
<li> MPI identifiers may contain underscores after the first character.   
 
<li> MPI requires an include file, <tt> mpif.h</tt>. On systems  
that do not support include files, the implementation should specify  
the values of named constants.   
 
<li>Many routines in  MPI-2 have KIND-parameterized integers  
(e.g.,  MPI_ADDRESS_KIND and  MPI_OFFSET_KIND)  
that hold address information.   
On systems that do not support Fortran 90-style parameterized  
types, <tt> INTEGER*8</tt> or <tt> INTEGER</tt> should be used instead.   
 
<li>The memory allocation routine  MPI_ALLOC_MEM can't  
be usefully used in Fortran without a language extension that allows  
the allocated memory to be associated with a Fortran variable.   
</ul> 
<BR> 

<P>
<HR>
<A HREF="node18.htm#Node18"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node20.htm#Node20"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node17.htm#Node17"> Language Binding</a>
<b>Next: </b><A HREF="node20.htm#Node20"> C Binding Issues</a>
<b>Previous: </b><A HREF="node18.htm#Node18"> Deprecated Names and Functions</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

<HTML>
<!-- This file was generated by tohtml from io-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>File Info</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node182">9.2.8. File Info</a></H2>
<A HREF="node181.htm#Node181"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node182.htm#Node183"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<b>Next: </b><A HREF="node182.htm#Node183"> Reserved File Hints</a>
<b>Previous: </b><A HREF="node181.htm#Node181"> Querying File Parameters</a>
<P>
  
<P> 
Hints specified via info  
(see Section <a href="node53.htm#Node53">The  Info Object 
</a>)  
allow a user to provide information  
such as  
  
file access patterns and file system specifics  
to direct optimization.  
Providing hints may enable an implementation to deliver  
increased I/O performance or minimize the use of system resources.  
However, hints do not change the semantics of any of the I/O interfaces.  
In other words, an implementation is free to ignore all hints.  
Hints are specified on a per file basis,  
in  MPI_FILE_OPEN,  MPI_FILE_DELETE,  
 MPI_FILE_SET_VIEW, and  MPI_FILE_SET_INFO,  
via the opaque  info object.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
It may happen that a program is coded with hints for one system, and  
later executes on another system that does not support these hints.  
In general, unsupported hints should simply be ignored.  
  
Needless to say, no hint can be mandatory.  
However, for each hint used by a specific implementation,  
a default value must be provided  
  
when the user does not specify a value for this hint.  
 (<em> End of advice to implementors.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_SET_INFO(fh, info)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_set_info(MPI_File fh, MPI_Info info) <BR></tt>  
 <tt> MPI_FILE_SET_INFO(FH, INFO, IERROR)<BR> INTEGER FH, INFO, IERROR <BR></tt>  
 <tt> void MPI::File::Set_info(const MPI::Info&amp; info) <BR></tt>  
<P> 
 MPI_FILE_SET_INFO sets new values for the hints  
of the file associated with  fh.  
  
 MPI_FILE_SET_INFO is a collective routine.  
The info object  
may be different on each process, but any info entries that an  
implementation requires to be the same on all processes must  
appear  
with the same value  
in each process's info object.  
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Many info items that an implementation can use when it  
creates or opens a file cannot easily be changed  
once the file has been created or opened.  
  
Thus, an implementation may  
ignore hints issued in this call that it would have  
accepted in an open call.  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_GET_INFO(fh, info_used)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> OUT info_used</TD><TD>new info object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_get_info(MPI_File fh, MPI_Info *info_used) <BR></tt>  
 <tt> MPI_FILE_GET_INFO(FH, INFO_USED, IERROR)<BR> INTEGER FH, INFO_USED, IERROR <BR></tt>  
  
 <tt> MPI::Info MPI::File::Get_info() const <BR></tt>  
  
<P> 
 MPI_FILE_GET_INFO returns a new info object containing  
the hints  
of the file associated with  fh.  
  
The current setting of all hints actually used by the system  
related to this open file is returned in  info_used.  
The user is responsible for freeing  info_used  
via  MPI_INFO_FREE.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
The info object returned in  info_used will contain all  
hints currently active for this file.  
This set of hints may be greater or smaller than the set of hints passed  
in to  MPI_FILE_OPEN,  
 MPI_FILE_SET_VIEW, and  MPI_FILE_SET_INFO,  
as the system may not recognize some hints set by the user,  
and may recognize other hints that the user has not set.  
 (<em> End of advice to users.</em>) <BR> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node181.htm#Node181"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node182.htm#Node183"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node174.htm#Node174"> File Manipulation</a>
<b>Next: </b><A HREF="node182.htm#Node183"> Reserved File Hints</a>
<b>Previous: </b><A HREF="node181.htm#Node181"> Querying File Parameters</a>
<P>
<HR><H3><A NAME="Node183">9.2.8.1. Reserved File Hints</a></H3>
<A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node184.htm#Node184"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node182.htm#Node182"> File Info</a>
<b>Next: </b><A HREF="node184.htm#Node184"> File Views</a>
<b>Previous: </b><A HREF="node182.htm#Node182"> File Info</a>
<P>
  
Some potentially useful hints (info key values) are outlined below.  
The following key values are reserved.  
  
An implementation is not required to interpret these key values,  
but if it does interpret the key value,  
it must provide the functionality described.  
(For more details on ``info,'' see Section <a href="node53.htm#Node53">The  Info Object 
</a>.)  
<P> 
These hints mainly affect access patterns  
and the layout of data on parallel I/O devices.  
  
For each hint name introduced, we  
describe the purpose of the hint, and the type of the hint value.  
The ``<b> [SAME]</b>'' annotation specifies that the hint values  
  
provided by all participating processes must be identical;  
otherwise the program is erroneous.  
In addition, some hints are context dependent,  
and are only used by an implementation at specific times  
(e.g.,  file_perm is only useful during file creation).  
<P> 
  
<P> 
<dl> 
 
<dt> 
<b>{</b> access_style} (comma separated list of strings):</b><dd> 
This hint specifies the manner in which the file will be  
accessed until the file is closed  
  
or until the  access_style key value is altered.  
  
The hint value is a comma separated list of the following:  
 read_once,  write_once,  
 read_mostly,  write_mostly,  
 sequential,  reverse_sequential,  
and  random.  
<P> 
 
<dt> 
<b>{</b> collective_buffering} (boolean) {SAME}:</b><dd> 
This hint specifies whether the application may benefit  
from collective buffering.  
Collective buffering is an optimization performed on collective accesses.  
Accesses to the file are performed on behalf of all processes in the group  
by a number of target nodes.  
These target nodes coalesce small requests into large disk accesses.  
  
Legal values for this key are  true and  false.  
Collective buffering parameters are further directed via  
  
additional hints:  cb_block_size,  
 cb_buffer_size, and  cb_nodes.  
  
<P> 
 
<dt> 
<b>{</b> cb_block_size} (integer) {SAME}:</b><dd> 
This hint specifies the block size to be used  
for collective buffering file access.  
<em> Target nodes</em> access data in chunks of this size.  
The chunks are distributed among target nodes  
in a round-robin (CYCLIC) pattern.  
<P> 
 
<dt> 
<b>{</b> cb_buffer_size} (integer) {SAME}:</b><dd> 
This hint specifies the total buffer space that can be used  
for collective buffering on each target node,  
usually a multiple of  cb_block_size.  
<P> 
 
<dt> 
<b>{</b> cb_nodes} (integer) {SAME}:</b><dd> 
This hint specifies the number of target nodes to be used  
for collective buffering.  
  
<P> 
  
 
<dt> 
<b>{</b> chunked} (comma separated list of integers) {SAME}:</b><dd> 
This hint specifies that the file consists of a multidimentional  
array that is often accessed by subarrays.  
The value for this hint is a comma separated list of array dimensions,  
starting from the most significant one  
(for an array stored in row-major order, as in C,  
the most significant dimension is the first one;  
for an array stored in column-major order, as in Fortran,  
the most significant dimension is the last one,  
and array dimensions should be reversed).  
<P> 
 
<dt> 
<b>{</b> chunked_item} (comma separated list of integers) {SAME}:</b><dd> 
This hint specifies the size of each array entry, in bytes.  
<P> 
 
<dt> 
<b>{</b> chunked_size} (comma separated list of integers) {SAME}:</b><dd> 
This hint specifies the dimensions of the subarrays.  
This is a comma separated list of array dimensions,  
starting from the most significant one.  
<P> 
  
<P> 
  
<P> 
 
<dt> 
<b>{</b> filename} (string):</b><dd> 
This hint specifies the file name used when the file was opened.  
If the implementation is capable of returning the file name  
of an open file,  
it will be returned using this key by  MPI_FILE_GET_INFO.  
This key is ignored when passed to  
 MPI_FILE_OPEN,  MPI_FILE_SET_VIEW,   
  
 MPI_FILE_SET_INFO, and  MPI_FILE_DELETE.  
  
<P> 
 
<dt> 
<b>{</b> file_perm} (string) {SAME}:</b><dd> 
This hint specifies the file permissions to use for file creation.  
Setting this hint is only useful when passed to  MPI_FILE_OPEN  
with an  amode that includes  MPI_MODE_CREATE.  
The set of legal values for this key is implementation dependent.  
  
<P> 
 
<dt> 
<b>{</b> io_node_list} (comma separated list of strings) {SAME}:</b><dd> 
This hint specifies the list of I/O devices  
that should be used to store the file.  
  
This hint is most relevant when the file is created.  
  
<P> 
 
<dt> 
<b>{</b> nb_proc} (integer) {SAME}:</b><dd> 
This hint specifies the number of parallel processes that will  
typically be assigned to run programs that access this file.  
This hint is most relevant when the file is created.  
<P> 
 
<dt> 
<b>{</b> num_io_nodes} (integer) {SAME}:</b><dd> 
This hint specifies the number of I/O devices in the system.  
  
  
This hint is most relevant when the file is created.  
 
<dt> 
<b>{</b> striping_factor} (integer) {SAME}:</b><dd> 
This hint specifies the number of I/O devices  
that the file should be striped across, and is  
relevant only when the file is created.  
<P> 
 
<dt> 
<b>{</b> striping_unit} (integer) {SAME}:</b><dd> 
This hint specifies the suggested striping unit to be used for this file.  
The striping unit is the amount  
of consecutive data assigned to one I/O device  
before progressing to the next device,  
when striping across a number of devices.  
It is expressed in bytes.  
This hint is relevant only when the file is created.  
<P> 
</dl> 
<BR> 

<P>
<HR>
<A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node182.htm#Node182"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node184.htm#Node184"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node182.htm#Node182"> File Info</a>
<b>Next: </b><A HREF="node184.htm#Node184"> File Views</a>
<b>Previous: </b><A HREF="node182.htm#Node182"> File Info</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

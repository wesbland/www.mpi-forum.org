<HTML>
<!-- This file was generated by tohtml from appLang.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>External Interfaces</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node265">12.6.5. External Interfaces</a></H2>
<A HREF="node264.htm#Node264"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node260.htm#Node260"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node266.htm#Node266"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node260.htm#Node260">  MPI-2 C Bindings</a>
<b>Next: </b><A HREF="node266.htm#Node266"> I/O</a>
<b>Previous: </b><A HREF="node264.htm#Node264"> Extended Collective Operations</a>
<P>
 <tt> int MPI_Add_error_class(int *errorclass) <BR></tt>  
 <tt> int MPI_Add_error_code(int errorclass, int *errorcode) <BR></tt>  
 <tt> int MPI_Add_error_string(int errorcode, char *string) <BR></tt>  
 <tt> int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) <BR></tt>  
 <tt> int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) <BR></tt>  
 <tt> int MPI_Comm_free_keyval(int *comm_keyval) <BR></tt>  
 <tt> int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Comm_set_name(MPI_Comm comm, char *comm_name) <BR></tt>  
 <tt> int MPI_File_call_errhandler(MPI_File fh, int errorcode) <BR></tt>  
 <tt> int MPI_Grequest_complete(MPI_Request request) <BR></tt>  
 <tt> int MPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request) <BR></tt>  
 <tt> int MPI_Init_thread(int *argc, char *((*argv)[]), int required, int *provided) <BR></tt>  
 <tt> int MPI_Is_thread_main(int *flag) <BR></tt>  
 <tt> int MPI_Query_thread(int *provided) <BR></tt>  
 <tt> int MPI_Status_set_cancelled(MPI_Status *status, int flag) <BR></tt>  
 <tt> int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) <BR></tt>  
 <tt> int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval) <BR></tt>  
 <tt> int MPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype) <BR></tt>  
 <tt> int MPI_Type_free_keyval(int *type_keyval) <BR></tt>  
 <tt> int MPI_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) <BR></tt>  
 <tt> int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner) <BR></tt>  
 <tt> int MPI_Type_get_name(MPI_Datatype type, char *type_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Type_set_attr(MPI_Datatype type, int type_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Type_set_name(MPI_Datatype type, char *type_name) <BR></tt>  
 <tt> int MPI_Win_call_errhandler(MPI_Win win, int errorcode) <BR></tt>  
 <tt> int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state) <BR></tt>  
 <tt> int MPI_Win_delete_attr(MPI_Win win, int win_keyval) <BR></tt>  
 <tt> int MPI_Win_free_keyval(int *win_keyval) <BR></tt>  
 <tt> int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) <BR></tt>  
 <tt> int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen) <BR></tt>  
 <tt> int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) <BR></tt>  
 <tt> int MPI_Win_set_name(MPI_Win win, char *win_name) <BR></tt>  
 <P> 

<P>
<HR>
<A HREF="node264.htm#Node264"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node260.htm#Node260"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node266.htm#Node266"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node260.htm#Node260">  MPI-2 C Bindings</a>
<b>Next: </b><A HREF="node266.htm#Node266"> I/O</a>
<b>Previous: </b><A HREF="node264.htm#Node264"> Extended Collective Operations</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

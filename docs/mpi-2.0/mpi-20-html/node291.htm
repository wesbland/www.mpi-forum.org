<HTML>
<!-- This file was generated by tohtml from appendix-c++.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>C++ Bindings for Point-to-Point Communication</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node291">13.4. C++ Bindings for Point-to-Point Communication</a></H1>
<A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node287.htm#Node287"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node292.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node287.htm#Node287">  MPI-1 C++ Language Binding</a>
<b>Next: </b><A HREF="node292.htm#Node292"> C++ Bindings for Collective Communication</a>
<b>Previous: </b><A HREF="node290.htm#Node290"> Typedefs</a>
<P>
  
<P> 
Except where specifically noted, all non-<tt> static</tt> member functions  
in this annex are <tt> virtual</tt>.  For brevity, the keyword <tt>  
  virtual</tt> is omitted.  
<P> 
  
<P> 
  
<P> 
<BR> 
<pre><tt>namespace MPI { 
</tt></pre> 
   <tt> void Comm::Send(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> void Comm::Recv(void* buf, int count,  
  const Datatype&amp; datatype, int source, int tag,  
  Status&amp; status) const <BR></tt>  
  
   <tt> void Comm::Recv(void* buf, int count,  
  const Datatype&amp; datatype, int source, int tag) const <BR></tt>  
  
   <tt> int Status::Get_count(const Datatype&amp; datatype) const <BR></tt>  
   <tt> void Comm::Bsend(const void* buf,  
  int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> void Comm::Ssend(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> void Comm::Rsend(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const  <BR></tt>  
<P> 
   <tt> void Attach_buffer(void* buffer, int size) <BR></tt>  
   <tt> int Detach_buffer(void*&amp; buffer) <BR></tt>  
<P> 
   <tt> Request Comm::Isend(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const <BR></tt>   
   <tt> Request Comm::Ibsend(const  
  void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const  <BR></tt>  
   <tt> Request Comm::Issend(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const <BR></tt>   
   <tt> Request Comm::Irsend(const void* buf, int count, const  
  Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> Request Comm::Irecv(void* buf, int count, const  
  Datatype&amp; datatype, int source, int tag) const <BR></tt>   
<P> 
   <tt> void Request::Wait(Status&amp; status) <BR></tt>  
  
   <tt> void Request::Wait() <BR></tt>  
  
   <tt> bool Request::Test(Status&amp; status)  <BR></tt>  
  
   <tt> bool Request::Test()  <BR></tt>  
  
   <tt> void Request::Free() <BR></tt>  
   <tt> static int Request::Waitany(int count, Request array_of_requests[],  
  Status&amp; status) <BR></tt>   
  
   <tt> static int Request::Waitany(int count,   
  Request array_of_requests[]) <BR></tt>   
  
   <tt> static bool Request::Testany(int count, Request array_of_requests[],  
  int&amp; index, Status&amp; status) <BR></tt>   
  
   <tt> static bool Request::Testany(int count, Request array_of_requests[],  
  int&amp; index) <BR></tt>   
  
   <tt> static void Request::Waitall(int count, Request array_of_requests[],  
  Status array_of_statuses[]) <BR></tt>   
  
   <tt> static void Request::Waitall(int count,   
  Request array_of_requests[]) <BR></tt>  
  
   <tt> static bool Request::Testall(int count, Request array_of_requests[],  
  Status array_of_statuses[]) <BR></tt>  
  
   <tt> static bool Request::Testall(int count,   
  Request array_of_requests[]) <BR></tt>  
  
   <tt> static int Request::Waitsome(int incount, Request array_of_requests[],  
  int array_of_indices[], Status array_of_statuses[]) <BR></tt>   
  
   <tt> static int Request::Waitsome(int incount,   
  Request array_of_requests[], int array_of_indices[]) <BR></tt>  
  
   <tt> static int Request::Testsome(int incount,   
  Request array_of_requests[],  
  int array_of_indices[], Status array_of_statuses[]) <BR></tt>   
  
   <tt> static int Request::Testsome(int incount,   
  Request array_of_requests[],  
  int array_of_indices[]) <BR></tt>  
  
<P> 
   <tt> bool Comm::Iprobe(int source, int tag, Status&amp; status) const <BR></tt>   
  
   <tt> bool Comm::Iprobe(int source, int tag) const <BR></tt>   
  
   <tt> void Comm::Probe(int source, int tag, Status&amp; status) const <BR></tt>  
  
   <tt> void Comm::Probe(int source, int tag) const <BR></tt>  
  
<P> 
   <tt> void Request::Cancel() const <BR></tt>  
   <tt> bool Status::Is_cancelled() const  <BR></tt>  
<P> 
   <tt> Prequest Comm::Send_init(const  
  void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> Prequest Comm::Bsend_init(const void* buf,   
  int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>   
   <tt> Prequest Comm::Ssend_init(const  
  void* buf, int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>  
   <tt> Prequest Comm::Rsend_init(const void* buf,   
  int count, const Datatype&amp; datatype, int dest, int tag) const <BR></tt>   
   <tt> Prequest Comm::Recv_init(void* buf, int count, const  
  Datatype&amp; datatype, int source, int tag) const <BR></tt>  
   <tt> void Prequest::Start() <BR></tt>  
  
   <tt> static void Prequest::Startall(int count,   
  Prequest array_of_requests[]) <BR></tt>  
  
<P> 
   <tt> void Comm::Sendrecv(const void *sendbuf, int sendcount, const  
  Datatype&amp; sendtype, int dest, int sendtag, void *recvbuf,  
  int recvcount, const Datatype&amp; recvtype, int source,  
  int recvtag, Status&amp; status) const <BR></tt>   
  
   <tt> void Comm::Sendrecv(const void *sendbuf, int sendcount, const  
  Datatype&amp; sendtype, int dest, int sendtag, void *recvbuf,  
  int recvcount, const Datatype&amp; recvtype, int source,  
  int recvtag) const <BR></tt>   
  
   <tt> void Comm::Sendrecv_replace(void* buf, int count, const  
  Datatype&amp; datatype, int dest, int sendtag, int source,  
  int recvtag, Status&amp; status) const <BR></tt>   
  
   <tt> void Comm::Sendrecv_replace(void* buf, int count, const  
  Datatype&amp; datatype, int dest, int sendtag, int source,  
  int recvtag) const <BR></tt>   
  
<P> 
   <tt> Datatype Datatype::Create_contiguous(int count) const <BR></tt>  
   <tt> Datatype Datatype::Create_vector(int count, int blocklength,   
  int stride) const <BR></tt>  
<P> 
   <tt> Datatype Datatype::Create_indexed(int count,   
  const int array_of_blocklengths[],  
  const int array_of_displacements[]) const <BR></tt>  
<P> 
<P> 
   <tt> int Datatype::Get_size() const  <BR></tt>  
<P> 
   <tt> void Datatype::Commit() <BR></tt>  
   <tt> void Datatype::Free() <BR></tt>  
   <tt> int Status::Get_elements(const Datatype&amp; datatype) const <BR></tt>  
   <tt> void Datatype::Pack(const void* inbuf, int incount,  
  void *outbuf, int outsize, int&amp; position, const Comm &amp;comm)  
  const  <BR></tt>    
   <tt> void Datatype::Unpack(const  
  void* inbuf, int insize, void *outbuf, int outcount, int&amp; position,  
  const Comm&amp; comm) const  <BR></tt>  
   <tt> int Datatype::Pack_size(int incount, const  
  Comm&amp; comm) const  <BR></tt>  
<BR> 
<pre><tt>}; 
</tt></pre> 

<P>
<HR>
<A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node287.htm#Node287"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node292.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node287.htm#Node287">  MPI-1 C++ Language Binding</a>
<b>Next: </b><A HREF="node292.htm#Node292"> C++ Bindings for Collective Communication</a>
<b>Previous: </b><A HREF="node290.htm#Node290"> Typedefs</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

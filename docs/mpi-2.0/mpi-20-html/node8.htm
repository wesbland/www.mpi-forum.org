<HTML>
<!-- This file was generated by tohtml from terms-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Semantic Terms</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node8">2.4. Semantic Terms</a></H1>
<A HREF="node7.htm#Node7"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node4.htm#Node4"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node9.htm#Node9"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node4.htm#Node4">  MPI-2 Terms and Conventions</a>
<b>Next: </b><A HREF="node9.htm#Node9"> Data Types</a>
<b>Previous: </b><A HREF="node7.htm#Node7"> Procedure Specification</a>
<P>
  
<P> 
When discussing  MPI procedures the following semantic  
terms are used.  
  
  
<P> 
<dl> 
 
<dt> 
<b>{</b><b> nonblocking}</b></b><dd> 
A procedure is nonblocking if the procedure may return before the  
operation completes, and before the user is allowed to reuse  
resources (such as buffers) specified in the call.  
A nonblocking request is <b> started</b> by the call that initiates it, e.g.,   
 MPI_ISEND.    
The word complete is used with respect to operations, requests, and  
communications.  An <b> operation completes</b> when the user is allowed  
to reuse resources, and any output buffers have been updated; i.e. a  
call to  MPI_TEST will return  
 flag =  true.  A <b> request is completed</b> by a call  
to wait, which returns, or a test or get status call which returns   
 flag =  true.  This completing call has two effects:  
the status is extracted from the request; in the case of test and  
wait, if the request was nonpersistent, it is <b> freed</b>.  A <b>  
communication completes</b> when all participating operations complete.  
 
<dt> 
<b>{</b><b> blocking}</b></b><dd> 
A procedure is blocking if return from the procedure indicates the user  
is allowed to reuse resources specified in the call.  
 
<dt> 
<b>{</b><b> local}</b></b><dd> 
A procedure is local if completion of the procedure depends only on the  
local executing process.  
 
<dt> 
<b>{</b><b> non-local}</b></b><dd> 
A procedure is non-local if completion of the operation may require  
the execution of some  MPI procedure on another process.  Such an  
operation may require   
communication occurring with another user process.  
 
<dt> 
<b>{</b><b> collective}</b></b><dd> 
A procedure is collective if all processes in a process group need to invoke the procedure.  A  
collective call may or may not be synchronizing.  
  
Collective calls over the same communicator  
  
must be executed in the same order by all members of the process  
group.  
  
 
<dt> 
<b>{</b><b> predefined}</b></b><dd> 
A predefined datatype is a datatype with a predefined (constant) name  
(such as  MPI_INT,  MPI_FLOAT_INT, or  MPI_UB)  
or a datatype constructed with  MPI_TYPE_CREATE_F90_INTEGER,  
 MPI_TYPE_CREATE_F90_REAL, or  
 MPI_TYPE_CREATE_F90_COMPLEX.  The former are <b> named</b>  
whereas the latter are <b> unnamed</b>.  
 
<dt> 
<b>{</b><b> derived}</b></b><dd> 
A derived datatype is any datatype that is not predefined.  
 
<dt> 
<b>{</b><b> portable}</b></b><dd> 
A datatype is portable, if it is a predefined datatype, or it is derived  
from a portable datatype using only the type constructors  
 MPI_TYPE_CONTIGUOUS,  MPI_TYPE_VECTOR,  
 MPI_TYPE_INDEXED,  MPI_TYPE_INDEXED_BLOCK,  
 MPI_TYPE_CREATE_SUBARRAY,  MPI_TYPE_DUP, and  
 MPI_TYPE_CREATE_DARRAY.   
Such a datatype is portable because all displacements in the datatype  
are in terms of extents of one predefined datatype.  Therefore, if such a  
datatype fits a data layout in one memory, it will fit the  
corresponding data layout in another memory, if the same declarations  
were used, even if the two systems have different architectures.  On  
the other hand, if a datatype was constructed using  
 MPI_TYPE_CREATE_HINDEXED, MPI_TYPE_CREATE_HVECTOR or  
 MPI_TYPE_CREATE_STRUCT, then the datatype contains explicit byte  
displacements (e.g., providing padding to meet alignment restrictions).  
These displacements are unlikely to be chosen correctly if they fit  
data layout on one memory, but are used for data layouts on another  
process, running on a processor with a different architecture.  
 
<dt> 
<b>{</b><b> equivalent}</b></b><dd> 
Two datatypes are equivalent if they appear to have been created with   
the same sequence of calls (and arguments) and thus have the same  
typemap.  Two equivalent datatypes do not necessarily have the same  
cached attributes or the same names.  
  
</dl> 
<BR> 

<P>
<HR>
<A HREF="node7.htm#Node7"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node4.htm#Node4"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node9.htm#Node9"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node4.htm#Node4">  MPI-2 Terms and Conventions</a>
<b>Next: </b><A HREF="node9.htm#Node9"> Data Types</a>
<b>Previous: </b><A HREF="node7.htm#Node7"> Procedure Specification</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

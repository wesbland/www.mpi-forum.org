<HTML>
<!-- This file was generated by tohtml from appendix-c++.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>C++ Bindings for Groups, Contexts, and Communicators</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node293">13.6. C++ Bindings for Groups, Contexts, and Communicators</a></H1>
<A HREF="node292.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node287.htm#Node287"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node294.htm#Node294"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node287.htm#Node287">  MPI-1 C++ Language Binding</a>
<b>Next: </b><A HREF="node294.htm#Node294"> C++ Bindings for Process Topologies</a>
<b>Previous: </b><A HREF="node292.htm#Node292"> C++ Bindings for Collective Communication</a>
<P>
  
<P> 
For both syntactic and semantic reasons, the <tt> Dup()</tt> functions  
listed below are not virtual.  Syntactically, they must each have a  
different return type.  
  
 Dup() and  Clone are discussed in  
Section <a href="node230.htm#Node230">Communicators 
</a>.  
  
<P> 
  
<P> 
<BR> 
<pre><tt>namespace MPI { 
</tt></pre> 
   <tt> int Group::Get_size() const  <BR></tt>  
   <tt> int Group::Get_rank() const  <BR></tt>  
<P> 
  
<P> 
   <tt> static void Group::Translate_ranks (const Group&amp; group1,  
  int n, const int ranks1[], const Group&amp; group2, int ranks2[]) <BR></tt>   
   <tt> static int Group::Compare(const Group&amp; group1,   
  const Group&amp; group2) <BR></tt>  
<P> 
  
<P> 
   <tt> Group Comm::Get_group() const  <BR></tt>   
<P> 
  
<P> 
   <tt> static Group Group::Union(const Group&amp; group1,   
  const Group&amp; group2) <BR></tt>   
   <tt> static Group Group::Intersect(const Group&amp; group1,   
  const Group&amp; group2) <BR></tt>  
   <tt> static Group Group::Difference(const Group&amp; group1,   
  const Group&amp; group2) <BR></tt>  
<P> 
  
<P> 
   <tt> Group Group::Incl(int n, const int ranks[]) const <BR></tt>   
   <tt> Group Group::Excl(int n, const int ranks[]) const <BR></tt>  
   <tt> Group Group::Range_incl(int n, const int ranges[][3]) const <BR></tt>  
   <tt> Group Group::Range_excl(int n, const int ranges[][3]) const <BR></tt>   
   <tt> void Group::Free() <BR></tt>  
   <tt> int Comm::Get_size() const  <BR></tt>  
   <tt> int Comm::Get_rank() const  <BR></tt>  
<P> 
  
<P> 
   <tt> static int Comm::Compare(const Comm&amp; comm1,  
  const Comm&amp; comm2) <BR></tt>  
<P> 
  
<P> 
  
<P> 
   <tt> Intracomm Intracomm::Dup() const <BR></tt>  
   <tt> Intercomm Intercomm::Dup() const <BR></tt>  
   <tt> Cartcomm Cartcomm::Dup() const <BR></tt>  
   <tt> Graphcomm Graphcomm::Dup() const <BR></tt>  
  
   <tt> Comm&amp; Comm::Clone() const = 0 <BR></tt>  
   <tt> Intracomm&amp; Intracomm::Clone() const <BR></tt>  
   <tt> Intercomm&amp; Intercomm::Clone() const <BR></tt>  
   <tt> Cartcomm&amp; Cartcomm::Clone() const <BR></tt>  
   <tt> Graphcomm&amp; Graphcomm::Clone() const <BR></tt>  
  
<P> 
  
<P> 
   <tt> Intracomm Intracomm::Create(const Group&amp; group) const <BR></tt>   
   <tt> Intracomm Intracomm::Split(int color, int key) const <BR></tt>   
   <tt> void Comm::Free() <BR></tt>  
<P> 
   <tt> bool Comm::Is_inter() const  <BR></tt>  
   <tt> int Intercomm::Get_remote_size() const  <BR></tt>  
   <tt> Group Intercomm::Get_remote_group() const  <BR></tt>  
   <tt> Intercomm Intracomm::Create_intercomm(int local_leader, const  
  Comm&amp; peer_comm, int remote_leader, int tag) const <BR></tt>  
<P> 
   <tt> Intracomm Intercomm::Merge(bool high) const <BR></tt>   
<P> 
<BR> 
<pre><tt>}; 
</tt></pre> 

<P>
<HR>
<A HREF="node292.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node287.htm#Node287"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node294.htm#Node294"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node287.htm#Node287">  MPI-1 C++ Language Binding</a>
<b>Next: </b><A HREF="node294.htm#Node294"> C++ Bindings for Process Topologies</a>
<b>Previous: </b><A HREF="node292.htm#Node292"> C++ Bindings for Collective Communication</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

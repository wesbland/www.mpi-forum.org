<HTML>
<!-- This file was generated by tohtml from collective-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Generalized All-to-all Function</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node152">7.3.5. Generalized All-to-all Function</a></H2>
<A HREF="node151.htm#Node151"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node143.htm#Node143"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node153.htm#Node153"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node143.htm#Node143"> Extended Collective Operations</a>
<b>Next: </b><A HREF="node153.htm#Node153"> Exclusive Scan</a>
<b>Previous: </b><A HREF="node151.htm#Node151"> Other Operations</a>
<P>
  
<P> 
  
<P> 
One  
of the basic data movement  
operations needed in parallel signal processing is the 2-D matrix  
transpose.  This operation has motivated a generalization of the  
 MPI_ALLTOALLV function.  This new collective operation is  
 MPI_ALLTOALLW; the ``W'' indicates that it is an extension to  
 MPI_ALLTOALLV.     
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
The following function is the most general form of <tt> All-to-all</tt>.  
Like  MPI_TYPE_CREATE_STRUCT, the most general type constructor,  
 MPI_ALLTOALLW allows separate specification of count,  
displacement and datatype.  In addition, to allow maximum flexibility,  
the displacement of blocks within the send and receive buffers is  
specified in bytes.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The  MPI_ALLTOALLW function generalizes several MPI functions by  
carefully selecting the input arguments.  For example, by making all but one  
process have <tt>sendcounts[i] = 0</tt>, this achieves an <tt>MPI_SCATTERW</tt>  
function.   
 (<em> End of rationale.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLTOALLW(sendbuf, sendcounts, sdispls, sendtypes,  
recvbuf, recvcounts, rdispls, recvtypes, comm)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN sendcounts</TD><TD>integer array equal to the group size specifying the  
number of elements to send to each processor (integer)</TD></TR>  
<TR><TD> IN sdispls</TD><TD>integer array (of length group size). Entry j specifies  
the displacement in bytes (relative to  sendbuf) from which to take  
the outgoing data destined for process j</TD></TR>  
<TR><TD> IN sendtypes</TD><TD>array of datatypes (of length group size). Entry j  
specifies the type of data to send to process j (handle)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD> IN recvcounts</TD><TD>integer array equal to the group size specifying the  
number of elements that can be received from each processor (integer)</TD></TR>  
<TR><TD> IN rdispls</TD><TD>integer array (of length group size). Entry i specifies  
the displacement in bytes (relative to  recvbuf) at which to place the  
incoming data from process i</TD></TR>  
<TR><TD> IN recvtypes</TD><TD>array of datatypes (of length group size). Entry i  
specifies the type of data received from process i (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Alltoallw(void *sendbuf, int sendcounts[], int sdispls[], MPI_Datatype sendtypes[], void *recvbuf, int recvcounts[], int rdispls[], MPI_Datatype recvtypes[], MPI_Comm comm) <BR></tt>  
<P> 
 <tt> MPI_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, IERROR) <BR> &lt;type&gt; SENDBUF(*), RECVBUF(*)<BR>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPES(*), RECVCOUNTS(*), RDISPLS(*), RECVTYPES(*), COMM, IERROR <BR></tt>  
<P> 
  
 <tt> void MPI::Comm::Alltoallw(const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const = 0 <BR></tt>  
  
<P> 
<P> 
No ``in place'' option is supported.  
<P> 
The <I>j</I>-th block sent from process <I>i</I> is received by process  
<I>j</I> and is placed in the <I>i</I>-th block of  recvbuf.  
These blocks need not all have the same size.  
<P> 
The type signature associated with  
 sendcounts[j], sendtypes[j] at process <I>i</I> must be equal  
to the type signature  
associated with  recvcounts[i], recvtypes[i] at process <I>j</I>.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between every pair of processes.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
The outcome is as if each process sent a message to every other process with  
<p><I> 
MPI_Send(sendbuf+sdispls[i],sendcounts[i],sendtypes[i] ,i,...), 
</I><p>  
and received a message from every other process with a call to  
<p><I> 
MPI_Recv(recvbuf+rdispls[i],recvcounts[i],recvtypes[i] ,i,...). 
</I><p>  
<P> 
All arguments on all processes are significant.  The argument  
 comm must describe the same communicator on all processes.  
<P> 
If  comm is an intercommunicator, then the outcome is as if  
each process in group A sends a message to each process in group B,  
and vice versa.  The <I>j</I>-th send buffer of process <I>i</I> in group A should  
be consistent with the <I>i</I>-th receive buffer of process <I>j</I> in group B,  
and vice versa.  
<P> 
<P> 
<P> 

<P>
<HR>
<A HREF="node151.htm#Node151"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node143.htm#Node143"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node153.htm#Node153"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node143.htm#Node143"> Extended Collective Operations</a>
<b>Next: </b><A HREF="node153.htm#Node153"> Exclusive Scan</a>
<b>Previous: </b><A HREF="node151.htm#Node151"> Other Operations</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

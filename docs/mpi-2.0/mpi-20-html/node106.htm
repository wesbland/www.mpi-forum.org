<HTML>
<!-- This file was generated by tohtml from dynamic-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Client/Server Examples</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node106">5.4.6. Client/Server Examples</a></H2>
<A HREF="node105.htm#Node105"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node100.htm#Node100"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node100.htm#Node100"> Establishing Communication</a>
<b>Next: </b><A HREF="node106.htm#Node107"> Simplest Example --- Completely Portable.</a>
<b>Previous: </b><A HREF="node105.htm#Node105"> Reserved Key Values</a>
<P>
  
<P> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node105.htm#Node105"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node100.htm#Node100"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node100.htm#Node100"> Establishing Communication</a>
<b>Next: </b><A HREF="node106.htm#Node107"> Simplest Example --- Completely Portable.</a>
<b>Previous: </b><A HREF="node105.htm#Node105"> Reserved Key Values</a>
<P>
<HR><H3><A NAME="Node107">5.4.6.1. Simplest Example --- Completely Portable.</a></H3>
<A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node108"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node106.htm#Node108"> Ocean/Atmosphere - Relies on Name Publishing</a>
<b>Previous: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<P>
The following example shows the simplest way to use  
the client/server interface. It does not use service  
names at all.   
<P> 
On the server side:  
  
<BR> 
<pre><tt>    char myport[MPI_MAX_PORT_NAME]; 
    MPI_Comm intercomm; 
    /* ... */ 
    MPI_Open_port(MPI_INFO_NULL, myport); 
    printf("port name is: %s\n", myport); 
 
    MPI_Comm_accept(myport, MPI_INFO_NULL, 0, MPI_COMM_SELF, &amp;intercomm); 
    /* do something with intercomm */ 
</tt></pre> 
  
The server prints out the port name to the terminal and the user  
must type it in when starting up the client (assuming the  MPI  
implementation supports stdin such that this works).   
On the client side:  
  
<BR> 
<pre><tt>    MPI_Comm intercomm; 
    char name[MPI_MAX_PORT_NAME]; 
    printf("enter port name: ");  
    gets(name); 
    MPI_Comm_connect(name, MPI_INFO_NULL, 0, MPI_COMM_SELF, &amp;intercomm); 
</tt></pre> 
  
<P> 

<P>
<HR>
<A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node108"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node106.htm#Node108"> Ocean/Atmosphere - Relies on Name Publishing</a>
<b>Previous: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<P>
<HR><H3><A NAME="Node108">5.4.6.2. Ocean/Atmosphere - Relies on Name Publishing</a></H3>
<A HREF="node106.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node109"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node106.htm#Node109"> Simple Client-Server Example.</a>
<b>Previous: </b><A HREF="node106.htm#Node107"> Simplest Example --- Completely Portable.</a>
<P>
In this example, the ``ocean'' application is the ``server''  
side of a coupled ocean-atmosphere climate model. It assumes  
that the  MPI implementation publishes names.   
<P> 
  
<BR> 
<pre><tt>    MPI_Open_port(MPI_INFO_NULL, port_name); 
    MPI_Publish_name("ocean", MPI_INFO_NULL, port_name); 
 
    MPI_Comm_accept(port_name, MPI_INFO_NULL, 0, MPI_COMM_SELF, &amp;intercomm); 
    /* do something with intercomm */ 
    MPI_Unpublish_name("ocean", MPI_INFO_NULL, port_name); 
 
</tt></pre> 
  
On the client side:  
  
<BR> 
<pre><tt>    MPI_Lookup_name("ocean", MPI_INFO_NULL, port_name); 
    MPI_Comm_connect( port_name, MPI_INFO_NULL, 0, MPI_COMM_SELF,  
                      &amp;intercomm); 
</tt></pre> 
  
<P> 

<P>
<HR>
<A HREF="node106.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node106.htm#Node109"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node106.htm#Node109"> Simple Client-Server Example.</a>
<b>Previous: </b><A HREF="node106.htm#Node107"> Simplest Example --- Completely Portable.</a>
<P>
<HR><H3><A NAME="Node109">5.4.6.3. Simple Client-Server Example.</a></H3>
<A HREF="node106.htm#Node108"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node110.htm#Node110"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node110.htm#Node110"> Other Functionality</a>
<b>Previous: </b><A HREF="node106.htm#Node108"> Ocean/Atmosphere - Relies on Name Publishing</a>
<P>
This is a simple example; the server  
accepts only a single connection at a time and serves that connection until  
the client requests to be disconnected.  The server is a single  
process.   
<P> 
Here is the server.  It accepts a single connection and then processes data  
until it receives a message with tag <tt> 1</tt>.  A message with tag <tt> 0</tt>  
tells the server to exit.  
<BR> 
<pre><tt>#include "mpi.h" 
int main( int argc, char **argv ) 
{ 
    MPI_Comm client; 
    MPI_Status status; 
    char port_name[MPI_MAX_PORT_NAME]; 
    double buf[MAX_DATA]; 
    int    size, again; 
 
    MPI_Init( &amp;argc, &amp;argv ); 
    MPI_Comm_size(MPI_COMM_WORLD, &amp;size); 
    if (size != 1) error(FATAL, "Server too big"); 
    MPI_Open_port(MPI_INFO_NULL, port_name); 
    printf("server available at %s\n",port_name); 
    while (1) { 
        MPI_Comm_accept( port_name, MPI_INFO_NULL, 0, MPI_COMM_WORLD,  
                         &amp;client ); 
        again = 1; 
        while (again) { 
            MPI_Recv( buf, MAX_DATA, MPI_DOUBLE,  
                      MPI_ANY_SOURCE, MPI_ANY_TAG, client, &amp;status ); 
            switch (status.MPI_TAG) { 
                case 0: MPI_Comm_free( &amp;client ); 
                        MPI_Close_port(port_name); 
                        MPI_Finalize(); 
                        return 0; 
                case 1: MPI_Comm_disconnect( &amp;client ); 
                        again = 0; 
                        break; 
                case 2: /* do something */ 
                ... 
                default: 
                        /* Unexpected message type */ 
                        MPI_Abort( MPI_COMM_WORLD, 1 ); 
                } 
            } 
        } 
} 
</tt></pre> 
Here is the client.  
<P> 
<BR> 
<pre><tt>#include "mpi.h" 
int main( int argc, char **argv ) 
{ 
    MPI_Comm server; 
    double buf[MAX_DATA]; 
    char port_name[MPI_MAX_PORT_NAME]; 
 
    MPI_Init( &amp;argc, &amp;argv ); 
    strcpy(port_name, argv[1] );/* assume server's name is cmd-line arg */ 
 
    MPI_Comm_connect( port_name, MPI_INFO_NULL, 0, MPI_COMM_WORLD,  
                      &amp;server ); 
 
    while (!done) { 
        tag = 2; /* Action to perform */ 
        MPI_Send( buf, n, MPI_DOUBLE, 0, tag, server ); 
        /* etc */ 
        } 
    MPI_Send( buf, 0, MPI_DOUBLE, 0, 1, server ); 
    MPI_Comm_disconnect( &amp;server ); 
    MPI_Finalize(); 
    return 0; 
} 
</tt></pre> 
  

<P>
<HR>
<A HREF="node106.htm#Node108"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node106.htm#Node106"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node110.htm#Node110"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node106.htm#Node106"> Client/Server Examples</a>
<b>Next: </b><A HREF="node110.htm#Node110"> Other Functionality</a>
<b>Previous: </b><A HREF="node106.htm#Node108"> Ocean/Atmosphere - Relies on Name Publishing</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

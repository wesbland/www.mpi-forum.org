<HTML>
<!-- This file was generated by tohtml from ei-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>Communicators</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node167">8.8.1. Communicators</a></H2>
<A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<b>Next: </b><A HREF="node168.htm#Node168"> Windows</a>
<b>Previous: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<P>
The new functions that are replacements for the  MPI-1 functions for  
caching on communicators are:  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CREATE_KEYVAL(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval,  extra_state)</TD></TR>  
<TR><TD> IN comm_copy_attr_fn</TD><TD>copy callback function for  comm_keyval (function)</TD></TR>  
<TR><TD> IN comm_delete_attr_fn</TD><TD>delete callback function for  comm_keyval (function)</TD></TR>  
<TR><TD> OUT comm_keyval</TD><TD>key value for future access (integer)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state for callback functions</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) <BR></tt>  
<P> 
 <tt> MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN, COMM_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN<BR>INTEGER COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
<P> 
  
 <tt> static int MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state) <BR></tt>  
  
  
<P> 
This function replaces  MPI_KEYVAL_CREATE,  
  
whose use is deprecated.  
  
The C binding  
is identical.  The Fortran binding differs in that  
 extra_state is an address-sized integer.  Also, the copy and  
delete callback functions have Fortran bindings that are consistent  
with address-sized attributes.  
<P> 
  
The argument  comm_copy_attr_fn may be specified as  
  
  
 MPI_COMM_NULL_COPY_FN or  
 MPI_COMM_DUP_FN  
from either C, C++, or Fortran.  
 MPI_COMM_NULL_COPY_FN  
is a function that does nothing other than returning  flag = 0  
and  MPI_SUCCESS.  
 MPI_COMM_DUP_FN is a simple-minded  
copy function that sets  flag = 1,  
returns the value of  
 attribute_val_in in  attribute_val_out, and  
returns  MPI_SUCCESS.  
These replace the  MPI-1 predefined callbacks  MPI_NULL_COPY_FN  
and  MPI_DUP_FN, whose use is deprecated.  
<P> 
  
The argument  comm_delete_attr_fn may be specified as  
  
  
 MPI_COMM_NULL_DELETE_FN from either C, C++, or Fortran.  
 MPI_COMM_NULL_DELETE_FN is a function that does nothing, other  
than returning  MPI_SUCCESS.   MPI_COMM_NULL_DELETE_FN  
replaces  MPI_NULL_DELETE_FN, whose use is deprecated.  
<P> 
  
<P> 
  
The C callback functions are:  
<P> 
  
 <tt> typedef int MPI_Comm_copy_attr_function(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag); <BR></tt>  
<P> 
and  
<P> 
 <tt> typedef int MPI_Comm_delete_attr_function(MPI_Comm comm, int comm_keyval, void *attribute_val, void *extra_state); <BR></tt>  
  
<P> 
  
which are the same as the  MPI-1.1 calls but with a new name.  
  
The old names are deprecated.  
  
<P> 
The Fortran callback functions are:  
<P> 
 <tt> SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
<P> 
and  
<P> 
 <tt> SUBROUTINE COMM_DELETE_ATTR_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
<P> 
The C++ callbacks are:  
<P> 
  
 <tt> typedef int MPI::Comm::Copy_attr_function(const MPI::Comm&amp; oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool&amp; flag); <BR></tt>  
<P> 
and  
<P> 
 <tt> typedef int MPI::Comm::Delete_attr_function(MPI::Comm&amp; comm, int comm_keyval, void* attribute_val, void* extra_state); <BR></tt>  
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_FREE_KEYVAL(comm_keyval)</TD></TR>  
<TR><TD> INOUT comm_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_free_keyval(int *comm_keyval) <BR></tt>  
<P> 
 <tt> MPI_COMM_FREE_KEYVAL(COMM_KEYVAL, IERROR)<BR> INTEGER COMM_KEYVAL, IERROR <BR></tt>   
<P> 
 <tt> static void MPI::Comm::Free_keyval(int&amp; comm_keyval) <BR></tt>  
<P> 
This call is identical to the  MPI-1 call  MPI_KEYVAL_FREE  
but is needed to match the new communicator-specific creation function.  
  
The use of  MPI_KEYVAL_FREE is deprecated.  
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SET_ATTR(comm, comm_keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator from which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) <BR></tt>  
 <P> 
 <tt> MPI_COMM_SET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
<P> 
 <tt> void MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const <BR></tt>  
  
<P> 
This function replaces  MPI_ATTR_PUT,  
  
whose use is deprecated.  
  
The C binding  
is identical.  The Fortran binding  
differs in that  attribute_val is an address-sized integer.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_GET_ATTR(comm, comm_keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to which the attribute is attached (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless  flag =  
false</TD></TR>  
<TR><TD> OUT flag</TD><TD> false if no attribute is associated with  
the key (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) <BR></tt>  
<P> 
 <tt> MPI_COMM_GET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
<P> 
 <tt> bool MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const <BR></tt>  
<P> 
This function replaces  MPI_ATTR_GET,  
  
whose use is deprecated.  
  
The C binding is  
identical.  The Fortran binding differs in that  
 attribute_val is an address-sized integer.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_DELETE_ATTR(comm, comm_keyval)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator from which the attribute is deleted (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) <BR></tt>  
<P> 
  
 <tt> MPI_COMM_DELETE_ATTR(COMM, COMM_KEYVAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR <BR></tt>    
  
<P> 
  
 <tt> void MPI::Comm::Delete_attr(int comm_keyval) <BR></tt>  
  
<P> 
This function is the same as  MPI_ATTR_DELETE but is needed  
to match the new communicator specific functions.  
  
The use of  MPI_ATTR_DELETE is deprecated.  
  
<P> 

<P>
<HR>
<A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node166.htm#Node166"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<b>Next: </b><A HREF="node168.htm#Node168"> Windows</a>
<b>Previous: </b><A HREF="node166.htm#Node166"> New Attribute Caching Functions</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

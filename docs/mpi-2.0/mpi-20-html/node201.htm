<HTML>
<!-- This file was generated by tohtml from io-2.tex -->
<!-- with the command
tohtml -default -endpage ../mpi2-forum-tail.htm -basedef ../mpi2defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex mpi2-report.tex 
-->
<TITLE>User-Defined Data Representations</TITLE>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node201">9.5.3. User-Defined Data Representations</a></H2>
<A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node198.htm#Node198"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node201.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node198.htm#Node198"> File Interoperability</a>
<b>Next: </b><A HREF="node201.htm#Node202"> Extent Callback</a>
<b>Previous: </b><A HREF="node200.htm#Node200"> External Data Representation: ``external32''</a>
<P>
  
<P> 
There are two situations that cannot be handled by the required  
representations:  
<ol> 
 
1. a user wants to write a file in a representation unknown  
to the implementation, and  
 
<BR> 
2. a user wants to read a file written in a representation unknown  
to the implementation.  
</ol> 
User-defined data representations allow the user to insert a third  
party converter into the I/O stream to do the data representation conversion.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_REGISTER_DATAREP(datarep, read_conversion_fn, write_conversion_fn,  dtype_file_extent_fn, extra_state)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation identifier (string)</TD></TR>  
<TR><TD> IN read_conversion_fn</TD><TD>function invoked to convert from file representation to native representation (function)</TD></TR>  
<TR><TD> IN write_conversion_fn</TD><TD>function invoked to convert from native representation to file representation (function)</TD></TR>  
<TR><TD> IN dtype_file_extent_fn</TD><TD>function invoked to get the extent of a datatype as represented in the file (function)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Register_datarep(char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state) <BR></tt>  
 <tt> MPI_REGISTER_DATAREP(DATAREP, READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN, EXTRA_STATE, IERROR) <BR> CHARACTER*(*) DATAREP <BR>EXTERNAL READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR>INTEGER IERROR <BR></tt>  
 <tt> void MPI::Register_datarep(const char* datarep, MPI::Datarep_conversion_function* read_conversion_fn, MPI::Datarep_conversion_function* write_conversion_fn, MPI::Datarep_extent_function* dtype_file_extent_fn, void* extra_state) <BR></tt>  
<P> 
The call associates  read_conversion_fn,  
 write_conversion_fn, and  
 dtype_file_extent_fn  
with the data representation identifier  datarep.  
 datarep can then be used as an argument  
to  MPI_FILE_SET_VIEW, causing  
subsequent data access operations to call the conversion functions  
to convert all data items accessed between file data representation  
and native representation.  
 MPI_REGISTER_DATAREP is a local operation and only registers the  
data representation  
  
for the calling  MPI process.  
If  datarep is already defined,  
an error in the error class  MPI_ERR_DUP_DATAREP is raised  
  
using the default file error handler (see Section <a href="node217.htm#Node217">I/O Error Handling 
</a>).  
  
The length of a data representation string is limited to the value of  
 MPI_MAX_DATAREP_STRING.  
 MPI_MAX_DATAREP_STRING must have a value of at least 64.  
No routines are provided to delete data representations and  
free the associated resources;  
it is not expected that an application  
will generate them in significant numbers.  
  
<P> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node198.htm#Node198"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node201.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node198.htm#Node198"> File Interoperability</a>
<b>Next: </b><A HREF="node201.htm#Node202"> Extent Callback</a>
<b>Previous: </b><A HREF="node200.htm#Node200"> External Data Representation: ``external32''</a>
<P>
<HR><H3><A NAME="Node202">9.5.3.1. Extent Callback</a></H3>
<A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node201.htm#Node203"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node201.htm#Node203"> Datarep Conversion Functions</a>
<b>Previous: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<P>
 <tt> typedef int MPI_Datarep_extent_function(MPI_Datatype datatype, MPI_Aint *file_extent, void *extra_state); <BR></tt>  
 <tt> SUBROUTINE DATAREP_EXTENT_FUNCTION(DATATYPE, EXTENT, EXTRA_STATE, IERROR)<BR> INTEGER DATATYPE, IERROR <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTENT, EXTRA_STATE <BR></tt>  
 <tt> typedef MPI::Datarep_extent_function(const MPI::Datatype&amp; datatype, MPI::Aint&amp; file_extent, void* extra_state); <BR></tt>  
<P> 
The function  dtype_file_extent_fn  
must return, in  file_extent, the number of bytes  
required to store  datatype in the file representation.  
The function is passed, in  extra_state,  
the argument that was passed to the  MPI_REGISTER_DATAREP call.  
  
 MPI will only call this routine with predefined datatypes  
  
employed by the user.  
  
<P> 
  

<P>
<HR>
<A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node201.htm#Node203"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node201.htm#Node203"> Datarep Conversion Functions</a>
<b>Previous: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<P>
<HR><H3><A NAME="Node203">9.5.3.2. Datarep Conversion Functions</a></H3>
<A HREF="node201.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node204.htm#Node204"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node204.htm#Node204"> Matching Data Representations</a>
<b>Previous: </b><A HREF="node201.htm#Node202"> Extent Callback</a>
<P>
  
<P> 
 <tt> typedef int MPI_Datarep_conversion_function(void *userbuf, MPI_Datatype datatype, int count, void *filebuf, MPI_Offset position, void *extra_state); <BR></tt>  
 <tt> SUBROUTINE DATAREP_CONVERSION_FUNCTION(USERBUF, DATATYPE, COUNT, FILEBUF, POSITION, EXTRA_STATE, IERROR)<BR> &lt;TYPE&gt; USERBUF(*), FILEBUF(*) <BR>INTEGER COUNT, DATATYPE, IERROR <BR>INTEGER(KIND=MPI_OFFSET_KIND) POSITION <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
  
 <tt> typedef MPI::Datarep_conversion_function(void* userbuf, MPI::Datatype&amp; datatype, int count, void* filebuf, MPI::Offset position, void* extra_state); <BR></tt>  
<P> 
The function   
 read_conversion_fn   
must convert from  
file data representation to native representation.  
Before calling this routine,  
 MPI allocates and fills  filebuf with  count  
  
contiguous data items.  
The type of each data item matches the  
corresponding entry for the predefined datatype  
in the type signature of  datatype.  
  
The function is passed, in  extra_state,  
the argument that was passed to the  MPI_REGISTER_DATAREP call.  
The function must copy all  count data items from  filebuf  
to  userbuf in the distribution described by  datatype,  
converting each data item  
from file representation to native representation.  
  
 datatype will be equivalent to the datatype that the user  
passed to the read or write function.  
  
If the size of  datatype is less than the size  
of the  count data items, the conversion function must treat  
 datatype as being contiguously tiled over the  userbuf.  
The conversion function must  
begin storing converted data at the location in  userbuf  
specified by  position into the (tiled)  datatype.  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Although the conversion functions have similarities  
to  MPI_PACK and  MPI_UNPACK in  MPI-1,  
one should note the differences in the use  
of the arguments  count and  position.  
In the conversion functions,  
 count is a count of data items  
(i.e., count of typemap entries of  datatype),  
and  position is an index into this typemap.  
In  MPI_PACK,  
 incount refers to the number of whole  datatypes,  
and  position is a number of bytes.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A converted read operation could be implemented as follows:  
<P> 
<ol> 
 
1. Get file extent of all data items  
 
<BR> 
2. Allocate a filebuf large enough to hold all count data items  
 
<BR> 
3. Read data from file into filebuf  
 
<BR> 
4. Call  read_conversion_fn to convert data and place it into userbuf  
 
<BR> 
5. Deallocate filebuf  
</ol> 
 (<em> End of advice to implementors.</em>) <BR> 
If  MPI cannot allocate a buffer large enough to hold  
all the data to be converted from a read operation, it may  
call the conversion function repeatedly using the same  datatype  
and  userbuf,  
and reading successive chunks of data to be  
converted in  filebuf.  For the first call (and in  
the case when all the data to be converted fits into  
 filebuf),  MPI will call the function with   
 position set to zero.  Data converted during this  
call will be stored in the  userbuf according to  
the first  count data items in  datatype.  Then  
in subsequent calls to the conversion function,  MPI will  
increment the value in  position by the  count of  
items converted in the previous call.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
Passing the conversion function a position and one datatype for the transfer  
allows the conversion function to decode the datatype only once and  
cache an internal representation of it on the datatype.  
Then on subsequent calls, the conversion function can use the  position  
to quickly find its place in the datatype and continue  
storing converted data where it left off at the end of the previous call.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Although the conversion function may usefully cache an  
internal representation on the datatype, it should not cache  
any state information specific to an ongoing conversion  
operation, since it is possible for the same datatype to  
be used concurrently in multiple conversion operations.  
 (<em> End of advice to users.</em>) <BR> 
The function  write_conversion_fn must convert from  
native representation to file data representation.  
Before calling this routine,  
 MPI allocates  filebuf of a size large enough to hold  count  
  
contiguous data items.  
The type of each data item matches the  
corresponding entry for the predefined datatype  
in the type signature of  datatype.  
  
The function must copy  count data items from  
 userbuf in the distribution described by  datatype,  
to a contiguous distribution in  filebuf, converting each data item  
from native representation to file representation.  
If the size of  datatype is less than the size  
of  count  
data items,  
  
the conversion function must treat  
 datatype as being contiguously tiled over the  
 userbuf.  
<P> 
The function must  
begin copying at the location in  userbuf specified by  
 position into the (tiled)  datatype.  
 datatype will be equivalent to the datatype  
that the user passed to the read or write function.  
  
The function is passed, in  extra_state,  
the argument that was passed to the  MPI_REGISTER_DATAREP call.  
<P> 
The predefined constant  MPI_CONVERSION_FN_NULL may be used  
as either  
 write_conversion_fn or  read_conversion_fn.  In that  
case,  MPI will  
not attempt to invoke  write_conversion_fn or   
 read_conversion_fn, respectively, but will perform   
the requested data access using the native data representation.  
<P> 
An  MPI implementation must ensure that all data accessed is converted,  
either by using a filebuf large enough to hold all the requested  
data items  
or else by making repeated calls to the conversion function  
with the same  datatype argument and appropriate values for  
 position.  
<P> 
An implementation will only invoke the callback routines in this section  
( read_conversion_fn,  write_conversion_fn,  
and  dtype_file_extent_fn)  
when one of the read or write routines in Section <a href="node185.htm#Node185">Data Access 
</a>,  
or  MPI_FILE_GET_TYPE_EXTENT is called by the user.    
 dtype_file_extent_fn will only be passed  
predefined datatypes employed by the user.  
The conversion functions will only be passed datatypes equivalent to those  
  
that the user has passed to one of the routines noted above.  
<P> 
The conversion functions must be reentrant.  
User defined data representations are restricted  
to use byte alignment for all types.  
  
Furthermore, it is erroneous for the conversion functions to  
call any collective routines or to free  datatype.  
<P> 
The conversion functions should return an error code.  
If the returned error  
code has a value other than  MPI_SUCCESS, the  
implementation will raise an error in the class  MPI_ERR_CONVERSION.  
<P> 

<P>
<HR>
<A HREF="node201.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node201.htm#Node201"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node204.htm#Node204"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node201.htm#Node201"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node204.htm#Node204"> Matching Data Representations</a>
<b>Previous: </b><A HREF="node201.htm#Node202"> Extent Callback</a>
<P>
<HR>
Return to <A HREF="node306.htm">MPI-2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/docs/mpi-11-html/node182.html">MPI 1.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>MPI-2.0 of July 18, 1997<BR>
HTML Generated on September 10, 2001
</FONT>
</BODY>
</HTML>

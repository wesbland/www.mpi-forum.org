<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Memory Allocation</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node186">175. Memory Allocation</a></H1>
<A HREF="node181.htm#Node185"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<b>Previous: </b><A HREF="node181.htm#Node185"> Clock Synchronization</a>
<P>
  
<P> 
In some systems, message-passing and remote-memory-access (<font face="sans-serif"> RMA</font>) operations  
run faster when accessing specially allocated memory (e.g., memory that is  
shared by the other processes in the communicating group on an SMP).  <font face="sans-serif"> MPI</font>  
provides a mechanism for allocating and freeing such special memory.  The use  
of such memory for message-passing or <font face="sans-serif"> RMA</font> is not mandatory, and this memory  
can be used without restrictions as any other dynamically allocated memory.  
However, implementations may restrict the use of the <font face="sans-serif"> MPI_WIN_LOCK</font>  
and <font face="sans-serif"> MPI_WIN_UNLOCK</font> functions to windows allocated in such memory  
(see Section <a href="node241.htm#Node241">Lock 
</a>.)  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLOC_MEM(size, info, baseptr)</TD></TR>  
<TR><TD> IN size</TD><TD>size of memory segment in bytes (<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD> OUT baseptr</TD><TD>pointer to beginning of memory segment allocated</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) <BR></tt>  
<P> 
 <tt> MPI_ALLOC_MEM(SIZE, INFO, BASEPTR, IERROR) <BR> INTEGER INFO, IERROR <BR>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void* MPI::Alloc_mem(MPI::Aint size, const MPI::Info&amp; info) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
The <font face="sans-serif"> info</font> argument can be used to provide  
directives that control the desired location of the allocated memory.  
Such a directive does not affect the semantics of the call. Valid  
<font face="sans-serif"> info</font> values are implementation-dependent; a null directive  
value of <font face="sans-serif"> info = MPI_INFO_NULL</font> is always valid.  
<P> 
The  function <font face="sans-serif"> MPI_ALLOC_MEM</font> may return an error code of class   
<font face="sans-serif"> MPI_ERR_NO_MEM</font>   
to indicate it failed because memory   
is exhausted.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FREE_MEM(base)</TD></TR>  
<TR><TD> IN base</TD><TD>initial address of memory segment allocated by <BR>  
<font face="sans-serif"> MPI_ALLOC_MEM</font> (choice)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Free_mem(void *base) <BR></tt>  
<P> 
  
 <tt> MPI_FREE_MEM(BASE, IERROR) <BR>  &lt;type&gt; BASE(*) <BR>INTEGER IERROR <BR></tt>  
  
<P> 
 <font color="red">{<font color="black"> void MPI::Free_mem(void *base) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
  
The function <font face="sans-serif"> MPI_FREE_MEM</font> may return an error code of class  
<font face="sans-serif"> MPI_ERR_BASE</font> to indicate an invalid base argument.  
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The C and C++ bindings of <font face="sans-serif"> MPI_ALLOC_MEM</font> and  
<font face="sans-serif"> MPI_FREE_MEM</font> are similar to the bindings for the  
<tt> malloc</tt> and <tt> free</tt> C library calls:  
a call to  
<font face="sans-serif"> MPI_Alloc_mem(..., &amp;base)</font> should be paired with a call to  
<font face="sans-serif"> MPI_Free_mem(base)</font> (one less   
level of indirection). Both arguments are declared to  
be of same type <font face="sans-serif">  void*</font> so as to facilitate type casting.  
  
The Fortran binding is consistent with the C and C++ bindings:  
the Fortran <font face="sans-serif"> MPI_ALLOC_MEM</font> call returns in  
<font face="sans-serif"> baseptr</font> the (integer valued) address of the allocated memory.  
The <font face="sans-serif"> base</font> argument of <font face="sans-serif"> MPI_FREE_MEM</font> is a choice  
argument, which passes (a reference to) the variable stored at that location.  
  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
If <font face="sans-serif"> MPI_ALLOC_MEM</font> allocates special memory, then  
a design similar to the design of C <tt> malloc</tt> and <tt> free</tt>  
functions has to  
be used, in order to find out the size of a memory segment, when the segment is freed.  
If no special memory is used,  
<font face="sans-serif"> MPI_ALLOC_MEM</font> simply invokes <tt> malloc</tt>, and <font face="sans-serif"> MPI_FREE_MEM</font> invokes <tt> free</tt>.  
<P> 
A call to <font face="sans-serif"> MPI_ALLOC_MEM</font> can be used in shared memory  
systems to allocate  memory in a shared memory segment.  
 (<em> End of advice to implementors.</em>) <BR> 
<BR><b> Example</b>  
  
  
  
<P> 
Example of use of <font face="sans-serif"> MPI_ALLOC_MEM</font>, in Fortran with pointer  
support. We assume 4-byte <font face="sans-serif">  REAL</font>s, and assume that pointers  
are address-sized.  
  
<BR> 
<pre><tt>REAL A 
POINTER (P, A(100,100))   ! no memory is allocated 
CALL MPI_ALLOC_MEM(4*100*100, MPI_INFO_NULL, P, IERR) 
! memory is allocated 
... 
A(3,5) = 2.71; 
... 
CALL MPI_FREE_MEM(A, IERR) ! memory is freed 
</tt></pre> 
Since standard Fortran does not support (C-like) pointers, this code is not Fortran 77 or Fortran 90 code.  
Some compilers (in particular, at the time of writing,  
g77 and Fortran compilers for  
Intel) do not support this code.  
  
  
<P> 
  
<BR><b> Example</b>  
  
Same example, in C  
<BR> 
<pre><tt>float  (* f)[100][100] ; 
/* no memory is allocated */ 
MPI_Alloc_mem(sizeof(float)*100*100, MPI_INFO_NULL, &amp;f); 
/* memory allocated */ 
... 
(*f)[5][3] = 2.71; 
... 
MPI_Free_mem(f); 
</tt></pre> 
  
  
  

<P>
<HR>
<A HREF="node181.htm#Node185"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<b>Previous: </b><A HREF="node181.htm#Node185"> Clock Synchronization</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

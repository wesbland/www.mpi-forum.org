<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Portable <font face="sans-serif"> MPI</font> Process Startup</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node198">187. Portable  MPI Process Startup</a></H1>
<A HREF="node197.htm#Node197"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node199.htm#Node199"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node199.htm#Node199"> The <font face="sans-serif"> Info</font> Object</a>
<b>Previous: </b><A HREF="node197.htm#Node197"> Determining Whether <font face="sans-serif"> MPI</font> Has Finished</a>
<P>
  
<P> 
A number of implementations of <font face="sans-serif"> MPI</font> provide a startup command for <font face="sans-serif"> MPI</font> programs  
that is of the form  
<BR> 
<pre><tt>    mpirun &lt;mpirun arguments&gt; &lt;program&gt; &lt;program arguments&gt; 
</tt></pre> 
Separating the command to start the program from the program itself provides  
flexibility, particularly for network and heterogeneous implementations.  For  
example, the startup script need not run on one of the machines that will be  
executing the <font face="sans-serif"> MPI</font> program itself.  
<P> 
  
<P> 
Having a standard startup mechanism also extends the portability of  
<font face="sans-serif"> MPI</font> programs one step further, to the command lines  
and scripts that manage them.  For example, a validation suite script  
that runs hundreds of programs can be a portable script if it is  
written using such a standard starup mechanism.  
  
In order that the ``standard'' command not be confused with existing  
practice, which is not standard and not portable among implementations,  
instead of <tt> mpirun</tt> <font face="sans-serif"> MPI</font> specifies <tt> mpiexec</tt>.  
  
<P> 
  
While a standardized startup mechanism improves the usability of <font face="sans-serif"> MPI</font>,  
the range of environments is so diverse (e.g., there may not even be a  
command line interface) that <font face="sans-serif"> MPI</font> cannot mandate such a  
mechanism. Instead, <font face="sans-serif"> MPI</font> specifies an <tt> mpiexec</tt> startup command and  
recommends but does not require it, as advice to implementors.  
However, if an implementation does provide a command called  
<tt> mpiexec</tt>, it must be of the form described below.   
  
<P> 
  
<P> 
It is suggested that<BR> 
<pre><tt>    mpiexec -n &lt;numprocs&gt; &lt;program&gt; 
</tt></pre> 
be at least one way to start <tt> &lt;program&gt;</tt> with an initial  
<font face="sans-serif">  MPI_COMM_WORLD</font> whose group contains <tt> &lt;numprocs&gt;</tt> processes.  
Other arguments to <tt> mpiexec</tt> may be implementation-dependent.  
<P> 
  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Implementors, if they do provide a special startup command for <font face="sans-serif"> MPI</font> programs,  
  are advised to give it the following form.  The syntax is chosen in order  
  that <tt> mpiexec</tt> be able to be viewed as a command-line version of  
  <font face="sans-serif"> MPI_COMM_SPAWN</font> (See Section <a href="node209.htm#Node209">Reserved Keys 
</a>).  
  <P> 
Analogous to <font face="sans-serif"> MPI_COMM_SPAWN</font>, we  
  have  
<P> 
<BR> 
<pre><tt>    mpiexec -n    &lt;maxprocs&gt; 
           -soft  &lt;        &gt; 
           -host  &lt;        &gt; 
           -arch  &lt;        &gt; 
           -wdir  &lt;        &gt; 
           -path  &lt;        &gt; 
           -file  &lt;        &gt; 
            ... 
           &lt;command line&gt; 
</tt></pre> 
for the case where a single command line for the application program and its  
  arguments will suffice.  See Section <a href="node209.htm#Node209">Reserved Keys 
</a> for the meanings  
  of these arguments.  For the case corresponding to  
  <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> there are two possible formats:  
  <P> 
Form A:  
<P> 
<BR> 
<pre><tt>    mpiexec { &lt;above arguments&gt; } : { ... } : { ... } : ... : { ... } 
</tt></pre> 
As with <font face="sans-serif"> MPI_COMM_SPAWN</font>, all the arguments are optional.  (Even the  
  <tt> -n x </tt> argument is optional; the default is implementation dependent.  
  It might be <tt> 1</tt>, it might be taken from an environment variable, or it  
  might be specified at compile time.)  The names and meanings of the arguments are taken  
  from the keys in the <tt> info</tt> argument to <font face="sans-serif"> MPI_COMM_SPAWN</font>.  There may  
  be other, implementation-dependent arguments as well.  
  <P> 
Note that Form A, though convenient to type, prevents colons from being  
  program arguments.  Therefore an alternate, file-based form is allowed:  
  <P> 
Form B:  
<P> 
<BR> 
<pre><tt>    mpiexec -configfile &lt;filename&gt; 
</tt></pre> 
where the lines of <tt> <I>&lt;</I>filename<I>&gt;</I></tt> are of the form separated by the  
  colons in Form A.  Lines beginning with `<tt> #</tt>' are comments, and lines  
  may be continued by terminating the partial line with `<tt> \\</tt>'.  
<P> 
<BR><b> Example</b>  
  
  Start 16 instances of <tt> myprog</tt> on the current or default machine:  
<BR> 
<pre><tt>    mpiexec -n 16 myprog 
</tt></pre> 
  
<BR><b> Example</b>  
  
  Start 10 processes on the machine called <tt> ferrari</tt>:  
<BR> 
<pre><tt>    mpiexec -n 10 -host ferrari myprog 
</tt></pre> 
  
<BR><b> Example</b>  
  
  Start three copies of the same program with different command-line  
  arguments:  
<BR> 
<pre><tt>    mpiexec myprog infile1 : myprog infile2 : myprog infile3 
</tt></pre> 
  
<BR><b> Example</b>  
  
  Start the <tt> ocean</tt> program on five Suns and the <tt> atmos</tt> program on 10  
  RS/6000's:  
<BR> 
<pre><tt>    mpiexec -n 5 -arch sun ocean : -n 10 -arch rs6000 atmos 
</tt></pre> 
It is assumed that the implementation in this case has a method for choosing  
hosts of the appropriate type.  Their ranks are in the order specified.  
  
<BR><b> Example</b>  
  
  Start the <tt> ocean</tt> program on five Suns and the <tt> atmos</tt> program on 10  
  RS/6000's (Form B):  
<BR> 
<pre><tt>    mpiexec -configfile myfile 
</tt></pre> 
where <tt> myfile</tt> contains  
<BR> 
<pre><tt>    -n 5  -arch sun    ocean  
    -n 10 -arch rs6000 atmos 
</tt></pre> 
  
<P> 
  
<P> 
 (<em> End of advice to implementors.</em>) <BR> 
  
<P> 
  
  

<P>
<HR>
<A HREF="node197.htm#Node197"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node199.htm#Node199"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node199.htm#Node199"> The <font face="sans-serif"> Info</font> Object</a>
<b>Previous: </b><A HREF="node197.htm#Node197"> Determining Whether <font face="sans-serif"> MPI</font> Has Finished</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Name Publishing</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node216">204. Name Publishing</a></H2>
<A HREF="node215.htm#Node215"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node217.htm#Node217"> Reserved Key Values</a>
<b>Previous: </b><A HREF="node215.htm#Node215"> Client Routines</a>
<P>
The routines in this section provide a mechanism for  
publishing names. A (<font face="sans-serif"> service_name</font>, <font face="sans-serif"> port_name</font>)  
pair is published by the server, and may be retrieved  
by a client using the <font face="sans-serif"> service_name</font> only.   
An <font face="sans-serif"> MPI</font> implementation defines the <em> scope</em> of the <font face="sans-serif"> service_name</font>,  
that is, the domain over which the <font face="sans-serif"> service_name</font>   
can be retrieved. If the domain is the empty set, that is,   
if no client can retrieve the information, then  
we say that name publishing is not supported.   
Implementations should document how the scope  
is determined. High-quality implementations will  
give some control to users through the <font face="sans-serif"> info</font>  
arguments to name publishing functions.   
  
Examples are given in the descriptions of individual functions.   
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PUBLISH_NAME(service_name, info, port_name)</TD></TR>  
<TR><TD> IN service_name</TD><TD>a service name to associate with the port (string)</TD></TR>  
<TR><TD> IN info</TD><TD>implementation-specific information (handle)</TD></TR>  
<TR><TD> IN port_name</TD><TD>a port name (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Publish_name(char *service_name, MPI_Info info, char *port_name) <BR></tt>  
  
 <tt> MPI_PUBLISH_NAME(SERVICE_NAME, INFO, PORT_NAME, IERROR)<BR> INTEGER INFO, IERROR <BR>CHARACTER*(*) SERVICE_NAME, PORT_NAME <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Publish_name(const char* service_name, const MPI::Info&amp; info, const char* port_name) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This routine publishes the pair (<font face="sans-serif"> port_name</font>,  
<font face="sans-serif"> service_name</font>) so that an application may retrieve a  
system-supplied <font face="sans-serif"> port_name</font> using a well-known  
<font face="sans-serif"> service_name</font>.  
<P> 
The implementation must define the <em>  
scope</em> of a published service name, that is, the domain over which the  
service name is unique, and conversely, the domain over which the  
(port name, service name) pair may be retrieved.  For instance, a  
service name may be unique to a job  (where job is defined by a  
distributed operating system or batch scheduler), unique to a machine,  
or unique to a Kerberos realm.    
The scope may depend on the <font face="sans-serif"> info</font> argument to <font face="sans-serif"> MPI_PUBLISH_NAME</font>.  
<P> 
<font face="sans-serif"> MPI</font> permits publishing  more than one <font face="sans-serif"> service_name</font>  
for a single <font face="sans-serif"> port_name</font>.  On the other hand,   
  
if <font face="sans-serif"> service_name</font> has already been published  
within the scope determined by <font face="sans-serif"> info</font>, the behavior of <font face="sans-serif"> MPI_PUBLISH_NAME</font>  
  
is undefined. An <font face="sans-serif"> MPI</font> implementation may, through a mechanism in  
the <font face="sans-serif"> info</font> argument  
to <font face="sans-serif"> MPI_PUBLISH_NAME</font>,  provide a way to allow  
multiple servers with the same service in the same  
scope. In this case, an implementation-defined policy will  
determine which of several port names is returned by <font face="sans-serif"> MPI_LOOKUP_NAME</font>.  
<P> 
Note that while <font face="sans-serif"> service_name</font> has a limited  
scope, determined by the implementation, <font face="sans-serif"> port_name</font>  
always has global scope within the communication universe used  
by the implementation (i.e., it is globally unique).   
<P> 
<font face="sans-serif"> port_name</font> should be the name of a port established  
by <font face="sans-serif"> MPI_OPEN_PORT</font> and not yet deleted by   
<font face="sans-serif"> MPI_CLOSE_PORT</font>. If it is not, the result is undefined.   
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
In some cases, an <font face="sans-serif"> MPI</font> implementation may use a name service  
that a user can also access directly. In this case, a name  
published by <font face="sans-serif"> MPI</font> could easily conflict with a name  
published by a user. In order to avoid such  
conflicts, <font face="sans-serif"> MPI</font> implementations should mangle service names  
so that they are unlikely to conflict with user code that  
makes use of the same service. Such name mangling will  
of course be completely transparent to the user.   
<P> 
The following situation is problematic but unavoidable, if  
we want to allow implementations to use nameservers.   
Suppose there are multiple instances of ``ocean'' running  
on a machine. If the scope of a service name is confined to   
a job, then multiple oceans can coexist. If an implementation  
provides site-wide scope, however, multiple instances are  
not possible as all calls to <font face="sans-serif"> MPI_PUBLISH_NAME</font> after  
the first may fail. There is no universal solution to this.  
<P> 
To handle these situations,   
a high-quality implementation should make it possible to   
limit the domain over which names are published.   
 (<em> End of advice to implementors.</em>) <BR> 
  
<TABLE><TR><TD COLSPAN=2>MPI_UNPUBLISH_NAME(service_name, info, port_name)</TD></TR>  
<TR><TD> IN service_name</TD><TD>a service name (string)</TD></TR>  
<TR><TD> IN info</TD><TD>implementation-specific information (handle)</TD></TR>  
<TR><TD> IN port_name</TD><TD>a port name (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name) <BR></tt>  
  
 <tt> MPI_UNPUBLISH_NAME(SERVICE_NAME, INFO, PORT_NAME, IERROR)<BR> INTEGER INFO, IERROR <BR>CHARACTER*(*) SERVICE_NAME, PORT_NAME <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Unpublish_name(const char* service_name, const MPI::Info&amp; info, const char* port_name) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
<P> 
This routine unpublishes a service name that has been previously  
  
published.  Attempting to unpublish a name that has not been published  
or has already been unpublished is erroneous and is indicated by the error class  
  
<font face="sans-serif"> MPI_ERR_SERVICE</font>.  
<P> 
  
All published names must be unpublished before the corresponding  
port is closed and before the publishing process exits.  
  
The behavior of <font face="sans-serif"> MPI_UNPUBLISH_NAME</font> is implementation dependent   
when a process tries to unpublish a name that it did not publish.  
<P> 
  
If the <font face="sans-serif"> info</font> argument was used with  
<font face="sans-serif"> MPI_PUBLISH_NAME</font> to tell the implementation  
how to publish names, the implementation may require that  
<font face="sans-serif"> info</font> passed to <font face="sans-serif"> MPI_UNPUBLISH_NAME</font> contain information   
to tell the implementation how to unpublish a name.  
  
<P> 
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_LOOKUP_NAME(service_name, info, port_name)</TD></TR>  
<TR><TD> IN service_name</TD><TD>a service name (string)</TD></TR>  
<TR><TD> IN info</TD><TD>implementation-specific information (handle)</TD></TR>  
<TR><TD> OUT port_name</TD><TD>a port name (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Lookup_name(char *service_name, MPI_Info info, char *port_name) <BR></tt>  
  
 <tt> MPI_LOOKUP_NAME(SERVICE_NAME, INFO, PORT_NAME, IERROR)<BR> CHARACTER*(*) SERVICE_NAME, PORT_NAME <BR>INTEGER INFO, IERROR <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Lookup_name(const char* service_name, const MPI::Info&amp; info, char* port_name) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function retrieves a <font face="sans-serif"> port_name</font> published  
by <font face="sans-serif"> MPI_PUBLISH_NAME</font> with <font face="sans-serif"> service_name</font>.   
If <font face="sans-serif"> service_name</font> has not been published, it raises  
an error in the error class <font face="sans-serif"> MPI_ERR_NAME</font>. The application  
must supply a <font face="sans-serif"> port_name</font> buffer large enough   
to hold the largest possible port name (see discussion above under  
<font face="sans-serif"> MPI_OPEN_PORT</font>).  
<P> 
If an implementation allows multiple entries with  
the same <font face="sans-serif"> service_name</font> within the same scope,   
a particular <font face="sans-serif"> port_name</font> is chosen in a way  
determined by the implementation.   
<P> 
If the <font face="sans-serif"> info</font> argument was used with  
<font face="sans-serif"> MPI_PUBLISH_NAME</font> to tell the implementation  
how to publish names, a similar <font face="sans-serif"> info</font> argument  
may be required for <font face="sans-serif"> MPI_LOOKUP_NAME</font>.  
<P> 

<P>
<HR>
<A HREF="node215.htm#Node215"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node217.htm#Node217"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node217.htm#Node217"> Reserved Key Values</a>
<b>Previous: </b><A HREF="node215.htm#Node215"> Client Routines</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

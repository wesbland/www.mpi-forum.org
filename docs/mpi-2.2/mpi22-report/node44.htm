<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Message Data</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node44">44. Message Data</a></H2>
<A HREF="node43.htm#Node43"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node42.htm#Node42"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node45.htm#Node45"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node42.htm#Node42"> Blocking Send and Receive Operations</a>
<b>Next: </b><A HREF="node45.htm#Node45"> Message Envelope</a>
<b>Previous: </b><A HREF="node43.htm#Node43"> Blocking Send</a>
<P>
  
<P> 
The send buffer specified by the <font face="sans-serif"> MPI_SEND</font> operation consists of  
<font face="sans-serif"> count</font> successive entries of the type indicated by  
<font face="sans-serif"> datatype</font>, starting  
with the entry at address <font face="sans-serif"> buf</font>.   Note that we specify the  
message length  
in terms of number of <em> elements</em>, not number of <em> bytes</em>.  The former is  
machine independent and closer to the application level.  
<P> 
The data part of the message consists of a sequence of <font face="sans-serif"> count</font>  
values, each of the type indicated by <font face="sans-serif"> datatype</font>.  
<font face="sans-serif"> count</font> may be zero,  
in which case the data part of the message is empty.  
The basic  
datatypes that can be specified for message data values correspond to  
the basic datatypes of the host language.  
Possible values of this argument for Fortran and the  
corresponding Fortran types are listed   
in Table <a href="node44.htm#Table2">2 
</a>.  
  
<P> 
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> Fortran datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_INTEGER</font></TD><TD ALIGN="LEFT"> <tt> INTEGER</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL</font></TD><TD ALIGN="LEFT"> <tt> REAL</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_DOUBLE_PRECISION</font></TD><TD ALIGN="LEFT"> <tt> DOUBLE PRECISION</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX</font></TD><TD ALIGN="LEFT"> <tt> COMPLEX</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LOGICAL</font></TD><TD ALIGN="LEFT"> <tt> LOGICAL</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CHARACTER</font></TD><TD ALIGN="LEFT"> <tt> CHARACTER(1)</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_BYTE</font></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_PACKED</font></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 2: </b><A NAME="Table2">Predefined MPI datatypes corresponding to Fortran datatypes
</a><P> 
   
   
Possible values for this argument for C and the corresponding C  
types are listed  
in Table <a href="node44.htm#Table3">3 
</a>.  
   
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> C datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_CHAR</font></TD><TD ALIGN="LEFT"> <tt> char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> <P> 
                         (treated as printable character) </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_SHORT</font></TD><TD ALIGN="LEFT"> <tt> signed short int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT</font></TD><TD ALIGN="LEFT"> <tt> signed int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG</font></TD><TD ALIGN="LEFT"> <tt> signed long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG_LONG_INT</font>   
</TD><TD ALIGN="LEFT">   
                         <tt> signed long long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG_LONG</font> (as a synonym)  
</TD><TD ALIGN="LEFT">   
                         <tt> signed long long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_SIGNED_CHAR</font></TD><TD ALIGN="LEFT"> <tt> signed char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> <P> 
                         (treated as integral value) </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_CHAR</font></TD><TD ALIGN="LEFT"> <tt> unsigned char</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> <P> 
                         (treated as integral value) </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_SHORT</font></TD><TD ALIGN="LEFT"> <tt> unsigned short int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED</font></TD><TD ALIGN="LEFT"> <tt> unsigned int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_LONG</font></TD><TD ALIGN="LEFT"> <tt> unsigned long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_LONG_LONG</font>   
</TD><TD ALIGN="LEFT">   
                         <tt> unsigned long long int</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_FLOAT</font></TD><TD ALIGN="LEFT"> <tt> float</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_DOUBLE</font></TD><TD ALIGN="LEFT"> <tt> double</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG_DOUBLE</font></TD><TD ALIGN="LEFT"> <tt> long double</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_WCHAR</font>   
</TD><TD ALIGN="LEFT">   
                         <tt> wchar_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> (defined in <tt> &lt;stddef.h&gt;</tt>) </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">   
                         (treated as printable character) </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="red"><font face="sans-serif"> MPI_C_BOOL</font></TD><TD ALIGN="LEFT"> <tt> _Bool</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_INT8_T</font></TD><TD ALIGN="LEFT"> <tt> int8_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_INT16_T</font></TD><TD ALIGN="LEFT"> <tt> int16_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_INT32_T</font></TD><TD ALIGN="LEFT"> <tt> int32_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_INT64_T</font></TD><TD ALIGN="LEFT"> <tt> int64_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_UINT8_T</font></TD><TD ALIGN="LEFT"> <tt> uint8_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_UINT16_T</font></TD><TD ALIGN="LEFT"> <tt> uint16_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_UINT32_T</font></TD><TD ALIGN="LEFT"> <tt> uint32_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_UINT64_T</font></TD><TD ALIGN="LEFT"> <tt> uint64_t</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_C_COMPLEX</font></TD><TD ALIGN="LEFT"> <tt> float _Complex</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_C_FLOAT_COMPLEX (as a synonym)</font></TD><TD ALIGN="LEFT"> <tt> float _Complex</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_C_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> <tt> double _Complex</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font color="red"><font face="sans-serif"> MPI_C_LONG_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> <tt> long double _Complex</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font color="black"><font face="sans-serif"> MPI_BYTE</font></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_PACKED</font></TD><TD ALIGN="LEFT"> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 3: </b><A NAME="Table3">Predefined MPI datatypes corresponding to C datatypes
</a><P> 
   
   
<font color="red">  
<CENTER>  
<TABLE><TR><TD ALIGN="LEFT">  
MPI datatype</TD><TD ALIGN="LEFT"> C datatype</TD><TD ALIGN="LEFT"> Fortran datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_AINT</font></TD><TD ALIGN="LEFT"> <tt> MPI_Aint</tt></TD><TD ALIGN="LEFT"> <tt> INTEGER (KIND=MPI_ADDRESS_KIND)</tt></TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_OFFSET </font></TD><TD ALIGN="LEFT"> <tt> MPI_Offset</tt></TD><TD ALIGN="LEFT"> <tt> INTEGER (KIND=MPI_OFFSET_KIND)</tt></TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</CENTER>  
<BR> 
<b>Table 4: </b><A NAME="Table4">
Predefined MPI datatypes corresponding to both C and Fortran datatypes
</a><P> 
   
   
<font color="black">  
<P> 
<P> 
The datatypes <font face="sans-serif"> MPI_BYTE</font> and <font face="sans-serif"> MPI_PACKED</font> do not correspond to a  
Fortran or C datatype.  A value of type <font face="sans-serif"> MPI_BYTE</font> consists of a byte  
(8 binary digits).  A  
byte is uninterpreted and is different from a character.  
Different machines may have  
different representations for characters, or may use more than one  
byte to represent characters.  On the other hand, a byte has the same  
binary value on all machines.  
The use of the type <font face="sans-serif"> MPI_PACKED</font> is explained in  
Section <a href="node84.htm#Node84">Pack and Unpack 
</a>.  
<P> 
<font face="sans-serif"> MPI</font> requires support of   
these datatypes,  
which match the basic  
datatypes of   
Fortran and ISO C.  
Additional <font face="sans-serif"> MPI</font> datatypes should be provided if the host language has  
additional data types:  
<font face="sans-serif"> MPI_DOUBLE_COMPLEX</font> for double precision complex in  
  
Fortran declared to be of type <tt> DOUBLE COMPLEX</tt>;  
  
<font face="sans-serif"> MPI_REAL2</font>,  
<font face="sans-serif"> MPI_REAL4</font> and <font face="sans-serif"> MPI_REAL8</font> for Fortran reals, declared to be of  
type <tt> REAL*2</tt>, <tt> REAL*4</tt> and <tt> REAL*8</tt>, respectively;  
<font face="sans-serif"> MPI_INTEGER1</font> <font face="sans-serif"> MPI_INTEGER2</font> and  
<font face="sans-serif"> MPI_INTEGER4</font> for Fortran integers, declared to be of type  
<tt> INTEGER*1</tt>, <tt> INTEGER*2</tt> and <tt> INTEGER*4</tt>, respectively; etc.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
One goal of the design is to allow for <font face="sans-serif"> MPI</font> to be implemented as a library,  
with no need for additional preprocessing or compilation.  
Thus, one cannot assume that a communication call has information on the  
datatype of variables in the communication buffer; this information must be  
supplied by an explicit argument.  
The need for such datatype information will become clear in  
Section <a href="node52.htm#Node52">Data Conversion 
</a>.  
 (<em> End of rationale.</em>) <BR> 
  
  
  
<font color="red">  
 
<BR> 
<em> Rationale.</em>  
<P> 
The datatypes <font face="sans-serif"> MPI_C_BOOL</font>, <font face="sans-serif"> MPI_INT8_T</font>, <font face="sans-serif"> MPI_INT16_T</font>,   
<font face="sans-serif"> MPI_INT32_T</font>, <font face="sans-serif"> MPI_UINT8_T</font>, <font face="sans-serif"> MPI_UINT16_T</font>,   
<font face="sans-serif"> MPI_UINT32_T</font>,   
<font face="sans-serif"> MPI_C_COMPLEX</font>, <font face="sans-serif"> MPI_C_FLOAT_COMPLEX</font>,   
<font face="sans-serif"> MPI_C_DOUBLE_COMPLEX</font>,   
and <font face="sans-serif"> MPI_C_LONG_DOUBLE_COMPLEX</font> have no corresponding C++   
bindings. This was intentionally done to avoid potential   
collisions with the C preprocessor and namespaced C++ names.   
C++ applications can use the C bindings with no loss of functionality.  
 (<em> End of rationale.</em>) <BR> 
The datatypes <font face="sans-serif"> MPI_AINT</font> and <font face="sans-serif"> MPI_OFFSET</font> correspond to the   
<font face="sans-serif"> MPI</font>-defined C types <font face="sans-serif"> MPI_Aint</font> and <font face="sans-serif"> MPI_Offset</font> and their Fortran   
equivalents <tt> INTEGER (KIND=</tt><font face="sans-serif">  MPI_ADDRESS_KIND)</font></tt> and <tt> INTEGER   
(KIND=</tt><font face="sans-serif">  MPI_OFFSET_KIND</font>)</tt>. This is described in Table <a href="node44.htm#Table4">4 
</a>. See   
Section <a href="node372.htm#Node372">Interlanguage Communication 
</a> for information on   
interlanguage communication with these types.   
  
<font color="black">  
<P> 

<P>
<HR>
<A HREF="node43.htm#Node43"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node42.htm#Node42"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node45.htm#Node45"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node42.htm#Node42"> Blocking Send and Receive Operations</a>
<b>Next: </b><A HREF="node45.htm#Node45"> Message Envelope</a>
<b>Previous: </b><A HREF="node43.htm#Node43"> Blocking Send</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

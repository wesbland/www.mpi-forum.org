<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-deprecated/deprecated.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Deprecated since <font face="sans-serif"> MPI-2.0</font></TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node327">297. Deprecated since  MPI-2.0</a></H1>
<A HREF="node326.htm#Node326"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node328.htm#Node328"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node328.htm#Node328"> Deprecated since <font face="sans-serif"> MPI-2.2</font></a>
<b>Previous: </b><A HREF="node326.htm#Node326"> Deprecated Functions</a>
<P>
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_TYPE_CREATE_HVECTOR</font> in <font face="sans-serif"> MPI-2.0</font>.   
The   
language   
independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_HVECTOR( count, blocklength, stride,  
oldtype, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks (non<font color="red">-<font color="black">negative integer)</TD></TR>  
<TR><TD> IN blocklength</TD><TD>number of elements in each block  
(non<font color="red">-<font color="black">negative integer)</TD></TR>  
<TR><TD> IN stride</TD><TD>number of bytes between start of each block (integer)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>old datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_HVECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER  COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_TYPE_CREATE_HINDEXED</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_HINDEXED( count, array_of_blocklengths,  
array_of_displacements, oldtype, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks  -- also number of entries in  
<BR><font face="sans-serif"> array_of_displacements</font> and <font face="sans-serif"> array_of_blocklengths</font>   
(non<font color="red">-<font color="black">negative integer)</TD></TR>  
<TR><TD> IN array_of_blocklengths</TD><TD>number of elements in each block  
(array of non<font color="red">-<font color="black">negative integers)</TD></TR>  
<TR><TD> IN array_of_displacements</TD><TD>byte displacement of each block  
(array of integer)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>old datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_hindexed(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_HINDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_DISPLACEMENTS(*), OLDTYPE, NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_TYPE_CREATE_STRUCT</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_STRUCT(count, array_of_blocklengths,  
array_of_displacements, array_of_types, newtype)</TD></TR>  
<TR><TD> IN count</TD><TD>number of blocks   
(integer)  
(non<font color="red">-<font color="black">negative integer)  
-- also number of entries in arrays <font face="sans-serif"> array_of_types</font>,  
<font face="sans-serif"> array_of_displacements</font> and <font face="sans-serif"> array_of_blocklengths</font></TD></TR>  
<TR><TD> IN array_of_blocklength</TD><TD>number of elements in each block  
(array of non<font color="red">-<font color="black">negative integer)</TD></TR>   
<TR><TD> IN array_of_displacements</TD><TD>byte displacement of each block  
(array of integer)</TD></TR>  
<TR><TD> IN array_of_types</TD><TD>type of elements in each block (array  
of handles to datatype objects)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_struct(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype) <BR></tt>  
<P> 
 <tt> MPI_TYPE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR)<BR> INTEGER  COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_DISPLACEMENTS(*), ARRAY_OF_TYPES(*), NEWTYPE, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_GET_ADDRESS</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition and the C binding   
of the deprecated function is the same as of the new function,  
except of the function name.   
Only the Fortran language binding is different.    
  
<TABLE><TR><TD COLSPAN=2>MPI_ADDRESS(location, address)</TD></TR>  
<TR><TD> IN location</TD><TD>location in caller memory (choice)</TD></TR>  
<TR><TD> OUT address</TD><TD>address of location (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Address(void* location, MPI_Aint *address) <BR></tt>  
<P> 
 <tt> MPI_ADDRESS(LOCATION, ADDRESS, IERROR)<BR> &lt;type&gt; LOCATION(*) <BR>INTEGER  ADDRESS, IERROR <BR></tt>  
  
The following functions are deprecated and are superseded by <font face="sans-serif"> MPI_TYPE_GET_EXTENT</font> in <font face="sans-serif"> MPI-2.0</font>.   
  
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_EXTENT(datatype, extent)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT extent</TD><TD>datatype extent (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_extent(MPI_Datatype datatype, MPI_Aint *extent) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_EXTENT(DATATYPE, EXTENT, IERROR)<BR> INTEGER DATATYPE, EXTENT, IERROR <BR></tt>  
<P> 
Returns the extent of a datatype,  
where extent is as defined on  
page <a href="node75.htm#Node75">Lower-Bound and Upper-Bound Markers 
</a>.  
  
The two functions below can be used for finding the lower bound and  
the upper bound of a datatype.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_LB( datatype, displacement)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT displacement</TD><TD>displacement of lower bound from origin,  
                             in bytes (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_lb(MPI_Datatype datatype, MPI_Aint* displacement) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_LB( DATATYPE, DISPLACEMENT, IERROR)<BR> INTEGER DATATYPE, DISPLACEMENT, IERROR <BR></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_UB( datatype, displacement)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT displacement</TD><TD>displacement of upper bound from origin,  
                             in bytes (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_ub(MPI_Datatype datatype, MPI_Aint* displacement) <BR></tt>  
  
<P> 
 <tt> MPI_TYPE_UB( DATATYPE, DISPLACEMENT, IERROR)<BR> INTEGER DATATYPE, DISPLACEMENT, IERROR <BR></tt>  
<P> 
  
<P> 
  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_CREATE_KEYVAL</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition   
of the deprecated function is the same as <font color="red">that of the new function,  
  except for the function name and a different behavior in the  
  C/Fortran language interoperability, see Section <a href="node369.htm#Node369">Attributes 
</a>  
  on page <a href="node369.htm#Node369">Attributes 
</a><font color="black">.  
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_KEYVAL_CREATE(copy_fn, delete_fn, keyval, extra_state)</TD></TR>  
<TR><TD> IN copy_fn</TD><TD>Copy callback function for <font face="sans-serif"> keyval</font></TD></TR>  
<TR><TD> IN delete_fn</TD><TD>Delete callback function for <font face="sans-serif"> keyval</font></TD></TR>  
<TR><TD> OUT keyval</TD><TD>  key value for future access (integer)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>Extra state for callback functions</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void* extra_state) <BR></tt>  
<P> 
 <tt> MPI_KEYVAL_CREATE(COPY_FN, DELETE_FN, KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL COPY_FN, DELETE_FN <BR>INTEGER KEYVAL, EXTRA_STATE, IERROR <BR></tt>  
  
The <font face="sans-serif"> copy_fn</font> function is invoked when a communicator is  
duplicated by <font face="sans-serif"> MPI_COMM_DUP</font>.  <font face="sans-serif"> copy_fn</font> should be  
of type <font face="sans-serif">  MPI_Copy_function</font>, which is defined as follows:  
  
   
<BR> 
<pre><tt>typedef int MPI_Copy_function(MPI_Comm oldcomm, int keyval, 
                              void *extra_state, void *attribute_val_in, 
                              void *attribute_val_out, int *flag) 
</tt></pre> 
  
<P> 
A Fortran declaration for such a function is as follows:  
<P> 
  
 <tt> SUBROUTINE COPY_FUNCTION(OLDCOMM, KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERR)<BR> INTEGER OLDCOMM, KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, IERR <BR>LOGICAL FLAG <BR></tt>  
  
  
  
<font face="sans-serif"> copy_fn</font> may be specified as  
<font face="sans-serif"> MPI_NULL_COPY_FN</font> or  
<font face="sans-serif"> MPI_DUP_FN</font>  
from either C or FORTRAN;  
<font face="sans-serif"> MPI_NULL_COPY_FN</font>  
is a function that does nothing other than returning <font face="sans-serif">  flag = 0</font>  
and <font face="sans-serif">  MPI_SUCCESS</font>.  
<font face="sans-serif"> MPI_DUP_FN</font> is a simple-minded  
copy function that sets <font face="sans-serif">  flag = 1</font>,  
returns the value of  
<font face="sans-serif"> attribute_val_in</font> in <font face="sans-serif"> attribute_val_out</font>, and  
returns <font face="sans-serif">  MPI_SUCCESS</font>.  
Note that <font face="sans-serif"> MPI_NULL_COPY_FN</font>  
and <font face="sans-serif"> MPI_DUP_FN</font> are also deprecated.  
  
  
  
  
Analogous to <font face="sans-serif"> copy_fn</font> is a callback deletion function, defined  
as follows.  The <font face="sans-serif"> delete_fn</font> function is invoked when a communicator is  
deleted by <font face="sans-serif"> MPI_COMM_FREE</font> or when a call is made explicitly  
to <font face="sans-serif"> MPI_ATTR_DELETE</font>.  <font face="sans-serif"> delete_fn</font> should be  
of type <font face="sans-serif">  MPI_Delete_function</font>, which is defined as follows:  
  
  
   
<BR> 
<pre><tt>typedef int MPI_Delete_function(MPI_Comm comm, int keyval, 
    void *attribute_val, void *extra_state); 
</tt></pre> 
A Fortran declaration for such a function is as follows:  
<P> 
 <tt> SUBROUTINE DELETE_FUNCTION(COMM, KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERR <BR></tt>  
  
  
<font face="sans-serif"> delete_fn</font> may be specified as  
<font face="sans-serif"> MPI_NULL_DELETE_FN</font> from either C or FORTRAN;  
<font face="sans-serif"> MPI_NULL_DELETE_FN</font> is a function that does nothing, other  
than returning <font face="sans-serif">  MPI_SUCCESS</font>.  
  
Note that <font face="sans-serif"> MPI_NULL_DELETE_FN</font> is also deprecated.  
  
  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_FREE_KEYVAL</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_KEYVAL_FREE(keyval)</TD></TR>  
<TR><TD> INOUT keyval</TD><TD> Frees the integer key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Keyval_free(int *keyval) <BR></tt>  
<P> 
 <tt> MPI_KEYVAL_FREE(KEYVAL, IERROR)<BR> INTEGER KEYVAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_SET_ATTR</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_PUT(comm, keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD> key value, as returned by <BR><font face="sans-serif"> MPI_KEYVAL_CREATE</font> (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Attr_put(MPI_Comm comm, int keyval, void* attribute_val) <BR></tt>  
<P> 
 <tt> MPI_ATTR_PUT(COMM, KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_GET_ATTR</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_GET(comm, keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to which attribute is attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless <font face="sans-serif"> flag</font> = false</TD></TR>  
<TR><TD> OUT flag</TD><TD><tt> true</tt> if an attribute value was extracted; <tt> false</tt> if no attribute is associated with the key</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) <BR></tt>  
  
<P> 
 <tt> MPI_ATTR_GET(COMM, KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, IERROR <BR>LOGICAL FLAG <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_DELETE_ATTR</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition   
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ATTR_DELETE(comm, keyval)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to which attribute is attached (handle)</TD></TR>  
<TR><TD> IN keyval</TD><TD>The key value of the deleted attribute (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Attr_delete(MPI_Comm comm, int keyval) <BR></tt>  
<P> 
 <tt> MPI_ATTR_DELETE(COMM, KEYVAL, IERROR)<BR> INTEGER COMM, KEYVAL, IERROR <BR></tt>  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_CREATE_ERRHANDLER</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_CREATE( function, errhandler )</TD></TR>  
<TR><TD> IN function</TD><TD>user defined error handling procedure</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>MPI error handler (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_create(MPI_Handler_function *function, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
  
 <tt> MPI_ERRHANDLER_CREATE(FUNCTION, ERRHANDLER, IERROR)<BR> EXTERNAL FUNCTION <BR>INTEGER ERRHANDLER, IERROR <BR></tt>  
Register the user routine <font face="sans-serif"> function</font> for use as an <font face="sans-serif"> MPI</font>  
exception handler.  Returns in <font face="sans-serif"> errhandler</font> a handle to the registered  
exception handler.  
<P> 
  
In the C language,   
  
the user routine should be a C function of type <font face="sans-serif">  MPI_Handler_function</font>,  
which is defined as:  
<P> 
  
<BR> 
<pre><tt>typedef void (MPI_Handler_function)(MPI_Comm *, int *, ...); 
</tt></pre> 
  
The first argument is the communicator in use, the second  
is the error code to be returned.    
  
  
In the Fortran language, the user routine should be of the form:  
<P> 
   
2.2  
<font color="red">   
<BR> 
<pre><tt>SUBROUTINE HANDLER_FUNCTION(COMM, ERROR_CODE) 
   INTEGER COMM, ERROR_CODE 
</tt></pre> 
<font color="black">  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_SET_ERRHANDLER</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_SET( comm, errhandler )</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator to set the error handler for (handle)</TD></TR>  
<TR><TD> IN errhandler</TD><TD>new <font face="sans-serif"> MPI</font> error handler for communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) <BR></tt>  
<P> 
 <tt> MPI_ERRHANDLER_SET(COMM, ERRHANDLER, IERROR)<BR> INTEGER COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
Associates the new error handler <font face="sans-serif"> errorhandler</font>  
with communicator <font face="sans-serif"> comm</font> at the calling process.  Note that an  
error handler is always associated with the communicator.  
  
The following function is deprecated and is superseded by <font face="sans-serif"> MPI_COMM_GET_ERRHANDLER</font> in <font face="sans-serif"> MPI-2.0</font>.   
The language independent definition  
of the deprecated function is the same as of the new function,  
except of the function name.   
The language bindings are modified.  
  
<TABLE><TR><TD COLSPAN=2>MPI_ERRHANDLER_GET( comm, errhandler )</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to get the error handler from (handle)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>MPI error handler  
currently associated with communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
 <tt> MPI_ERRHANDLER_GET(COMM, ERRHANDLER, IERROR)<BR> INTEGER COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
Returns in <font face="sans-serif"> errhandler</font> (a handle to) the error handler that is  
currently  
associated with communicator <font face="sans-serif"> comm</font>.  
  
<font color="red">
<P>
<HR>
<A HREF="node326.htm#Node326"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node328.htm#Node328"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node328.htm#Node328"> Deprecated since <font face="sans-serif"> MPI-2.2</font></a>
<b>Previous: </b><A HREF="node326.htm#Node326"> Deprecated Functions</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Error Classes, Error Codes, and Error Handlers</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node193">182. Error Classes, Error Codes, and Error Handlers</a></H1>
<A HREF="node192.htm#Node192"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node194.htm#Node194"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node194.htm#Node194"> Timers and Synchronization</a>
<b>Previous: </b><A HREF="node192.htm#Node192"> Error Codes and Classes</a>
<P>
  
  
Users may want to write a layered library on top of an existing <font face="sans-serif"> MPI</font>  
implementation, and this library may have its own set of error codes  
and classes. An example of such a library is an I/O library based on  
<font face="sans-serif"> MPI</font>, see Chapter <a href="node261.htm#Node261">I/O 
</a> on page <a href="node261.htm#Node261">I/O 
</a>.   
For this purpose, functions are needed to:  
<ol> 
 
1. add a new error class to the ones an <font face="sans-serif"> MPI</font> implementation already  
knows.  
 
<BR> 
2. associate error codes with this error class, so that  
<font face="sans-serif"> MPI_ERROR_CLASS</font> works.   
 
<BR> 
3. associate strings with these error codes, so that  
<font face="sans-serif"> MPI_ERROR_STRING</font> works.   
  
 
<BR> 
4. invoke the error handler associated with a communicator, window, or  
object.  
</ol> 
  
  
Several   
functions are provided to do this.  They are all local.  
No functions are provided to free   
error classes<font color="red"> or codes<font color="black">: it  
is not expected that an application will generate them in significant  
numbers.  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CLASS(errorclass)</TD></TR>  
<TR><TD> OUT errorclass</TD><TD>value for the new error class (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_class(int *errorclass) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_CLASS(ERRORCLASS, IERROR)<BR> INTEGER ERRORCLASS, IERROR <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> int MPI::Add_error_class() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Creates a new error class and returns the value for it.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value is  
set by the implementation and not by the user.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will return the value for a new  
<font face="sans-serif"> errorclass</font> in the same deterministic way on all processes.  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Since a call to <font face="sans-serif"> MPI_ADD_ERROR_CLASS</font> is local, the same  
<font face="sans-serif"> errorclass</font> may not be returned on all processes that make  
this call.  Thus, it is not safe to assume that registering a new  
error on a set of processes at the same time will yield the same  
<font face="sans-serif"> errorclass</font> on all of the processes.  However,  if an  
implementation returns the new <font face="sans-serif"> errorclass</font> in a deterministic  
way, and they are always generated in the same order  
on the same set of processes (for  
example, all processes), then the value will be the same.  However,  
even if a deterministic algorithm is used, the value can vary across  
processes.  This can happen, for example, if different but overlapping  
groups of processes make a series of calls.  As a result of these issues,  
getting the ``same'' error on multiple processes may not cause the  
same value of error code to be generated.  
 (<em> End of advice to users.</em>) <BR> 
The value of <font face="sans-serif">  MPI_ERR_LASTCODE</font>  
is a constant value and   
is not affected by new user-defined  
error codes and classes.    
Instead, a predefined attribute key <font face="sans-serif">  MPI_LASTUSEDCODE</font> is  
associated with  
<font face="sans-serif">  MPI_COMM_WORLD</font>.  The attribute value corresponding to this key  
  
is the current maximum error class including the user-defined ones.  
  
This is a local value and may be different on different processes.    
  
The value returned by this key is always greater than or equal to  
<font face="sans-serif">  MPI_ERR_LASTCODE</font>.  
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
The value returned by the key  
<font face="sans-serif">  MPI_LASTUSEDCODE</font> will not change unless the user calls a  
function to explicitly add an error class/code.  In a multi-threaded  
environment, the user must take extra care in assuming this value has  
not changed.  
  
Note that error codes and error classes are not necessarily dense.  A user may not assume that each error class below <font face="sans-serif">  MPI_LASTUSEDCODE</font> is valid.  
  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CODE(errorclass, errorcode)</TD></TR>  
<TR><TD> IN errorclass</TD><TD>error class (integer)</TD></TR>  
<TR><TD> OUT errorcode</TD><TD>new error code to associated with <font face="sans-serif"> errorclass</font> (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_code(int errorclass, int *errorcode) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_CODE(ERRORCLASS, ERRORCODE, IERROR)<BR> INTEGER ERRORCLASS, ERRORCODE, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> int MPI::Add_error_code(int errorclass) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
Creates new error code associated with  
<font face="sans-serif"> errorclass</font> and returns its value in <font face="sans-serif"> errorcode</font>.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value  
of the new error code is set by the implementation and not by the  
user.   
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will return the value for a new  
<font face="sans-serif"> errorcode</font> in the same deterministic way on all processes.  
 (<em> End of advice to implementors.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_STRING(errorcode, string)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code or class (integer)</TD></TR>  
<TR><TD> IN string</TD><TD>text corresponding to <font face="sans-serif"> errorcode</font> (string)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Add_error_string(int errorcode, char *string) <BR></tt>  
<P> 
 <tt> MPI_ADD_ERROR_STRING(ERRORCODE, STRING, IERROR)<BR> INTEGER ERRORCODE, IERROR <BR>CHARACTER*(*) STRING <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> void MPI::Add_error_string(int errorcode, const char* string) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Associates an error string with an error code or class.  
The string must be no more than <font face="sans-serif">  MPI_MAX_ERROR_STRING</font>  
characters long.  The length of the string is as defined in the  
calling language.    
  
The length of the string does not include the null terminator in C or C++.  
  
Trailing blanks will be stripped in Fortran.  
  
Calling <font face="sans-serif"> MPI_ADD_ERROR_STRING</font> for an <font face="sans-serif"> errorcode</font>  
that already has a string will replace the old string with the new  
string.  It is erroneous to call <font face="sans-serif"> MPI_ADD_ERROR_STRING</font> for  
an error code or class with a value <I>leq constiMPI_ERR_LASTCODE</I>.  
  
<P> 
If <font face="sans-serif"> MPI_ERROR_STRING</font> is called when no string has been set,  
it will return a empty string (all spaces in Fortran, <tt> ""</tt> in C and  
C++).  
<P> 
  
  
Section <a href="node187.htm#Node187">Error Handling 
</a> on  
page <a href="node187.htm#Node187">Error Handling 
</a> describes the methods for creating  
and associating error handlers with communicators, files, and windows.  
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CALL_ERRHANDLER (comm, errorcode)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_COMM_CALL_ERRHANDLER(COMM, ERRORCODE, IERROR)<BR> INTEGER COMM, ERRORCODE, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Comm::Call_errhandler(int errorcode) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function invokes the error handler assigned to the communicator  
with the error code supplied.    
This function returns <font face="sans-serif">  MPI_SUCCESS</font> in C and C++ and the same  
value in <font face="sans-serif"> IERROR</font> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Users should note that the default error handler is  
<font face="sans-serif">  MPI_ERRORS_ARE_FATAL</font>.  Thus, calling  
<font face="sans-serif"> MPI_COMM_CALL_ERRHANDLER</font> will abort the <font face="sans-serif"> comm</font>  
processes if the default error handler has not been changed for this  
communicator or on the parent before the communicator was created.  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_CALL_ERRHANDLER (win, errorcode)</TD></TR>  
<TR><TD> IN win</TD><TD>window with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Win_call_errhandler(MPI_Win win, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_WIN_CALL_ERRHANDLER(WIN, ERRORCODE, IERROR)<BR> INTEGER WIN, ERRORCODE, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Win::Call_errhandler(int errorcode) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
This function invokes the error handler assigned to the window  
with the error code supplied.    
This function returns <font face="sans-serif">  MPI_SUCCESS</font> in C and C++ and the same  
value in <font face="sans-serif"> IERROR</font> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
As with communicators, the default error handler for windows is  
<font face="sans-serif">  MPI_ERRORS_ARE_FATAL</font>.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_FILE_CALL_ERRHANDLER (fh, errorcode)</TD></TR>  
<TR><TD> IN fh</TD><TD>file with error handler (handle)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_call_errhandler(MPI_File fh, int errorcode) <BR></tt>  
<P> 
 <tt> MPI_FILE_CALL_ERRHANDLER(FH, ERRORCODE, IERROR)<BR> INTEGER FH, ERRORCODE, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::File::Call_errhandler(int errorcode) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function invokes the error handler assigned to the file  
with the error code supplied.    
This function returns <font face="sans-serif">  MPI_SUCCESS</font> in C and C++ and the same  
value in <font face="sans-serif"> IERROR</font> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
  
Unlike errors on communicators and windows, the default behavior for files is to have  
  
<font face="sans-serif">  MPI_ERRORS_RETURN</font>.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Users are warned that handlers should not be called recursively with  
<font face="sans-serif"> MPI_COMM_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_FILE_CALL_ERRHANDLER</font>, or  
<font face="sans-serif"> MPI_WIN_CALL_ERRHANDLER</font>.  Doing  
this can create a situation where an infinite recursion is created.  
This can occur if <font face="sans-serif"> MPI_COMM_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_FILE_CALL_ERRHANDLER</font>, or  
<font face="sans-serif"> MPI_WIN_CALL_ERRHANDLER</font> is called  
inside an error handler.  
  
<P> 
Error codes and classes are associated with a process.  As a result,  
they may be used in any error handler.  Error handlers should be  
prepared to deal with any error code   
they are   
given.  Furthermore, it is  
good practice to only call an error handler with the appropriate  
error codes.  For example, file errors would normally be sent to the  
file error   
handler.  
 (<em> End of advice to users.</em>) <BR> 
   
  

<P>
<HR>
<A HREF="node192.htm#Node192"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node194.htm#Node194"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node194.htm#Node194"> Timers and Synchronization</a>
<b>Previous: </b><A HREF="node192.htm#Node192"> Error Codes and Classes</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Lock</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node241">226. Lock</a></H2>
<A HREF="node240.htm#Node240"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node238.htm#Node238"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node242.htm#Node242"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node238.htm#Node238"> Synchronization Calls</a>
<b>Next: </b><A HREF="node242.htm#Node242"> Assertions</a>
<b>Previous: </b><A HREF="node240.htm#Node240"> General Active Target Synchronization</a>
<P>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_LOCK(lock_type, rank, assert, win)</TD></TR>   
<TR><TD> IN lock_type</TD><TD>either <font face="sans-serif">  MPI_LOCK_EXCLUSIVE</font> or  
<font face="sans-serif">  MPI_LOCK_SHARED</font> (state)</TD></TR>  
<TR><TD> IN rank</TD><TD>rank of locked window (<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN assert</TD><TD>program assertion (integer)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win) <BR></tt>  
<P> 
 <tt> MPI_WIN_LOCK(LOCK_TYPE, RANK, ASSERT, WIN, IERROR)<BR> INTEGER LOCK_TYPE, RANK, ASSERT, WIN, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Win::Lock(int lock_type, int rank, int assert) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
Starts an <font face="sans-serif"> RMA</font> access epoch.  Only the window at the  
process with rank <font face="sans-serif"> rank</font> can be accessed by <font face="sans-serif"> RMA</font> operations on <font face="sans-serif"> win</font> during that epoch.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_UNLOCK(rank, win)</TD></TR>  
<TR><TD> IN rank</TD><TD>rank of window (<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_unlock(int rank, MPI_Win win) <BR></tt>  
<P> 
 <tt> MPI_WIN_UNLOCK(RANK, WIN, IERROR)<BR> INTEGER RANK, WIN, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Win::Unlock(int rank) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
Completes an <font face="sans-serif"> RMA</font> access epoch started by a call to <font face="sans-serif"> MPI_WIN_LOCK(...,win)</font>.  <font face="sans-serif"> RMA</font> operations issued during this  
period will have completed both at the origin and at the target when  
the call returns.  
<P> 
  
Locks are used to protect accesses to the locked target  
window effected by <font face="sans-serif"> RMA</font> calls issued between the lock and unlock  
call, and to protect local  
load/store accesses to a locked local window executed between the lock and unlock call.  
Accesses that are protected by an exclusive lock  
will not be concurrent at the window site  
with other accesses to the same window that are lock protected.  
Accesses that are protected by a shared lock will not be  
concurrent at the window site with  
accesses protected by an exclusive lock to the same window.  
<P> 
It is erroneous to have a window locked and exposed (in an exposure  
epoch) concurrently.  I.e., a process may not call  
<font face="sans-serif"> MPI_WIN_LOCK</font> to lock a target window if the target process  
has called <font face="sans-serif"> MPI_WIN_POST</font> and has not yet called  
<font face="sans-serif"> MPI_WIN_WAIT</font>; it is erroneous to call  
<font face="sans-serif"> MPI_WIN_POST</font> while the local window is locked.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
An alternative is to require <font face="sans-serif"> MPI</font> to enforce mutual exclusion between exposure epochs and locking periods.  But this would entail additional  
overheads when locks or active target synchronization do not interact  
in support of those rare interactions between the two mechanisms.  The  
programming style that we encourage here is that a set of windows is  
used with only one synchronization mechanism at a time, with shifts  
from one mechanism to another being rare and involving global synchronization.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Users need to use explicit synchronization code in order to enforce  
mutual exclusion between locking periods and exposure epochs on a  
window.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
Implementors may restrict the use of <font face="sans-serif"> RMA</font> communication that is   
synchronized by lock calls to windows in memory allocated by   
<font face="sans-serif"> MPI_ALLOC_MEM</font>   
(Section <a href="node186.htm#Node186">Memory Allocation 
</a>, page <a href="node186.htm#Node186">Memory Allocation 
</a>).  
Locks can be used portably only in such memory.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The implementation of passive target communication when memory is not shared  
requires an asynchronous  
agent.  Such an agent can be implemented more easily, and can achieve  
better performance, if restricted to specially allocated memory.  It  
can be avoided altogether if shared memory is used. It seems natural to  
impose restrictions that allows one to use shared memory for 3-rd  
party communication in shared memory machines.  
<P> 
The downside of this decision is that passive target communication cannot be  
used without taking advantage of nonstandard Fortran features: namely,  
the availability of C-like pointers; these are not supported by some  
Fortran  
compilers (g77 and Windows/NT compilers, at the time of writing).  
Also,  passive target communication cannot be portably  
targeted to <tt> COMMON</tt> blocks, or other statically declared  
Fortran arrays.  
 (<em> End of rationale.</em>) <BR> 
Consider the sequence of calls in the example below.  
<BR><b> Example</b>  
  
<BR> 
<pre><tt>MPI_Win_lock(MPI_LOCK_EXCLUSIVE, rank, assert, win) 
MPI_Put(..., rank, ..., win) 
MPI_Win_unlock(rank, win) 
</tt></pre> 
  
  
<P> 
The call to <font face="sans-serif"> MPI_WIN_UNLOCK</font> will not return until the put  
transfer has completed at the origin  
and at the target.  
This still leaves much freedom to implementors.  
The call to  
<font face="sans-serif"> MPI_WIN_LOCK</font> may block until an  
exclusive lock on the window is acquired; or, the call  
<font face="sans-serif"> MPI_WIN_LOCK</font> may not block, while the call  
to <font face="sans-serif"> MPI_PUT</font> blocks until a lock is acquired; or, the first  
two calls may not block, while <font face="sans-serif"> MPI_WIN_UNLOCK</font> blocks until  
a lock is acquired --- the update of the target window is then  
postponed until the call to <font face="sans-serif"> MPI_WIN_UNLOCK</font> occurs.  
  
However,  if the call to <font face="sans-serif"> MPI_WIN_LOCK</font> is used to lock a  
local window, then the call must block until the lock is acquired,  
since the lock may protect local load/store accesses to the window issued  
after the lock call returns.  
  
<P> 

<P>
<HR>
<A HREF="node240.htm#Node240"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node238.htm#Node238"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node242.htm#Node242"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node238.htm#Node238"> Synchronization Calls</a>
<b>Next: </b><A HREF="node242.htm#Node242"> Assertions</a>
<b>Previous: </b><A HREF="node240.htm#Node240"> General Active Target Synchronization</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

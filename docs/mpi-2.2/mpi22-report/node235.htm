<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Get</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node235">220. Get</a></H2>
<A HREF="node234.htm#Node234"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node233.htm#Node233"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node236.htm#Node236"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node233.htm#Node233"> Communication Calls</a>
<b>Next: </b><A HREF="node236.htm#Node236"> Examples</a>
<b>Previous: </b><A HREF="node234.htm#Node234"> Put</a>
<P>
<TABLE><TR><TD COLSPAN=2>MPI_GET(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, <BR>target_datatype, win)</TD></TR> <TR><TD> OUT origin_addr</TD><TD>initial address of origin buffer (choice)</TD></TR> <TR><TD> IN origin_count</TD><TD>number of entries in origin buffer  
(<font color="red">non-negative<font color="black">  
integer)</TD></TR>  
<TR><TD> IN origin_datatype</TD><TD>datatype of each entry in origin buffer  
(handle)</TD></TR>  
<TR><TD> IN target_rank</TD><TD>rank of target (<font color="red">non-negative<font color="black"> integer)</TD></TR> <TR><TD> IN target_disp</TD><TD>displacement from window start to the beginning  
of the target buffer (<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN target_count</TD><TD>number of entries in target buffer  
(<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN target_datatype</TD><TD>datatype of each entry in target buffer  
(handle)</TD></TR>  
<TR><TD> IN win</TD><TD>window object used for communication (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) <BR></tt>  
<P> 
 <tt> MPI_GET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR)<BR> &lt;type&gt; ORIGIN_ADDR(*) <BR>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <BR>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Win::Get(void *origin_addr, int origin_count, const MPI::Datatype&amp; origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype&amp; target_datatype) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Similar to <font face="sans-serif"> MPI_PUT</font>, except that the direction of data  
transfer is reversed.  Data are copied from the target memory to the origin.  
The <font face="sans-serif"> origin_datatype</font> may not specify overlapping entries in  
the origin buffer.  
The target buffer must be contained within the target window, and the  
copied data must fit, without truncation,  
in the origin buffer.   
<P> 

<P>
<HR>
<A HREF="node234.htm#Node234"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node233.htm#Node233"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node236.htm#Node236"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node233.htm#Node233"> Communication Calls</a>
<b>Next: </b><A HREF="node236.htm#Node236"> Examples</a>
<b>Previous: </b><A HREF="node234.htm#Node234"> Put</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

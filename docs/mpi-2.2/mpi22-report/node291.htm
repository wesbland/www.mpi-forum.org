<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>User-Defined Data Representations</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node291">268. User-Defined Data Representations</a></H2>
<A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node291.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<b>Next: </b><A HREF="node291.htm#Node292"> Extent Callback</a>
<b>Previous: </b><A HREF="node290.htm#Node290"> External Data Representation: ``external32''</a>
<P>
  
<P> 
There are two situations that cannot be handled by the required  
representations:  
<ol> 
 
1. a user wants to write a file in a representation unknown  
to the implementation, and  
 
<BR> 
2. a user wants to read a file written in a representation unknown  
to the implementation.  
</ol> 
User-defined data representations allow the user to insert a third  
party converter into the I/O stream to do the data representation conversion.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_REGISTER_DATAREP(datarep, read_conversion_fn, write_conversion_fn,  dtype_file_extent_fn, extra_state)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation identifier (string)</TD></TR>  
<TR><TD> IN read_conversion_fn</TD><TD>function invoked to convert from file representation to native representation (function)</TD></TR>  
<TR><TD> IN write_conversion_fn</TD><TD>function invoked to convert from native representation to file representation (function)</TD></TR>  
<TR><TD> IN dtype_file_extent_fn</TD><TD>function invoked to get the extent of a datatype as represented in the file (function)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Register_datarep(char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state) <BR></tt>  
 <tt> MPI_REGISTER_DATAREP(DATAREP, READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN, EXTRA_STATE, IERROR) <BR> CHARACTER*(*) DATAREP <BR>EXTERNAL READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR>INTEGER IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Register_datarep(const char* datarep, MPI::Datarep_conversion_function* read_conversion_fn, MPI::Datarep_conversion_function* write_conversion_fn, MPI::Datarep_extent_function* dtype_file_extent_fn, void* extra_state) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
The call associates <font face="sans-serif"> read_conversion_fn</font>,  
<font face="sans-serif"> write_conversion_fn</font>, and  
<font face="sans-serif"> dtype_file_extent_fn</font>  
with the data representation identifier <font face="sans-serif"> datarep</font>.  
<font face="sans-serif"> datarep</font> can then be used as an argument  
to <font face="sans-serif"> MPI_FILE_SET_VIEW</font>, causing  
subsequent data access operations to call the conversion functions  
to convert all data items accessed between file data representation  
and native representation.  
<font face="sans-serif"> MPI_REGISTER_DATAREP</font> is a local operation and only registers the  
data representation  
  
for the calling <font face="sans-serif"> MPI</font> process.  
If <font face="sans-serif"> datarep</font> is already defined,  
an error in the error class <font face="sans-serif"> MPI_ERR_DUP_DATAREP</font> is raised  
  
using the default file error handler (see Section <a href="node307.htm#Node307">I/O Error Handling 
</a>,  
page <a href="node307.htm#Node307">I/O Error Handling 
</a>).  
  
The length of a data representation string is limited to the value of  
<font face="sans-serif">  MPI_MAX_DATAREP_STRING</font>.  
<font face="sans-serif">  MPI_MAX_DATAREP_STRING</font> must have a value of at least 64.  
No routines are provided to delete data representations and  
free the associated resources;  
it is not expected that an application  
will generate them in significant numbers.  
  
<P> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node291.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<b>Next: </b><A HREF="node291.htm#Node292"> Extent Callback</a>
<b>Previous: </b><A HREF="node290.htm#Node290"> External Data Representation: ``external32''</a>
<P>
<HR><H3><A NAME="Node292">268.1. Extent Callback</a></H3>
<A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node291.htm#Node293"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node291.htm#Node293"> Datarep Conversion Functions</a>
<b>Previous: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<P>
 <tt> typedef int MPI_Datarep_extent_function(MPI_Datatype datatype, MPI_Aint *file_extent, void *extra_state); <BR></tt>  
 <tt> SUBROUTINE DATAREP_EXTENT_FUNCTION(DATATYPE, EXTENT, EXTRA_STATE, IERROR)<BR> INTEGER DATATYPE, IERROR <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTENT, EXTRA_STATE <BR></tt>  
 <font color="red">{<font color="black"><tt> typedef void MPI::Datarep_extent_function(const MPI::Datatype&amp; datatype, MPI::Aint&amp; file_extent, void* extra_state); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
  
The function <font face="sans-serif"> dtype_file_extent_fn</font>  
must return, in <font face="sans-serif"> file_extent</font>, the number of bytes  
required to store <font face="sans-serif"> datatype</font> in the file representation.  
The function is passed, in <font face="sans-serif"> extra_state</font>,  
the argument that was passed to the <font face="sans-serif"> MPI_REGISTER_DATAREP</font> call.  
  
<font face="sans-serif"> MPI</font> will only call this routine with predefined datatypes  
  
employed by the user.  
  
<P> 
  

<P>
<HR>
<A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node291.htm#Node293"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node291.htm#Node293"> Datarep Conversion Functions</a>
<b>Previous: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<P>
<HR><H3><A NAME="Node293">268.2. Datarep Conversion Functions</a></H3>
<A HREF="node291.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node294.htm#Node294"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node294.htm#Node294"> Matching Data Representations</a>
<b>Previous: </b><A HREF="node291.htm#Node292"> Extent Callback</a>
<P>
  
<P> 
 <tt> typedef int MPI_Datarep_conversion_function(void *userbuf, MPI_Datatype datatype, int count, void *filebuf, MPI_Offset position, void *extra_state); <BR></tt>  
 <tt> SUBROUTINE DATAREP_CONVERSION_FUNCTION(USERBUF, DATATYPE, COUNT, FILEBUF, POSITION, EXTRA_STATE, IERROR)<BR> &lt;TYPE&gt; USERBUF(*), FILEBUF(*) <BR>INTEGER COUNT, DATATYPE, IERROR <BR>INTEGER(KIND=MPI_OFFSET_KIND) POSITION <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
  
 <font color="red">{<font color="black"><tt> typedef void MPI::Datarep_conversion_function(void* userbuf, MPI::Datatype&amp; datatype, int count, void* filebuf, MPI::Offset position, void* extra_state); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
  
The function   
<font face="sans-serif"> read_conversion_fn</font>   
must convert from  
file data representation to native representation.  
Before calling this routine,  
<font face="sans-serif"> MPI</font> allocates and fills <font face="sans-serif"> filebuf</font> with <font face="sans-serif"> count</font>  
  
contiguous data items.  
The type of each data item matches the  
corresponding entry for the predefined datatype  
in the type signature of <font face="sans-serif"> datatype</font>.  
  
The function is passed, in <font face="sans-serif"> extra_state</font>,  
the argument that was passed to the <font face="sans-serif"> MPI_REGISTER_DATAREP</font> call.  
The function must copy all <font face="sans-serif"> count</font> data items from <font face="sans-serif"> filebuf</font>  
to <font face="sans-serif"> userbuf</font> in the distribution described by <font face="sans-serif"> datatype</font>,  
converting each data item  
from file representation to native representation.  
  
<font face="sans-serif"> datatype</font> will be equivalent to the datatype that the user  
passed to the   
read  
function.  
  
If the size of <font face="sans-serif"> datatype</font> is less than the size  
of the <font face="sans-serif"> count</font> data items, the conversion function must treat  
<font face="sans-serif"> datatype</font> as being contiguously tiled over the <font face="sans-serif"> userbuf</font>.  
The conversion function must  
begin storing converted data at the location in <font face="sans-serif"> userbuf</font>  
specified by <font face="sans-serif"> position</font> into the (tiled) <font face="sans-serif"> datatype</font>.  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Although the conversion functions have similarities  
to <font face="sans-serif"> MPI_PACK</font> and   
<font face="sans-serif"> MPI_UNPACK</font>,  
one should note the differences in the use  
of the arguments <font face="sans-serif"> count</font> and <font face="sans-serif"> position</font>.  
In the conversion functions,  
<font face="sans-serif"> count</font> is a count of data items  
(i.e., count of typemap entries of <font face="sans-serif"> datatype</font>),  
and <font face="sans-serif"> position</font> is an index into this typemap.  
In <font face="sans-serif"> MPI_PACK</font>,  
<font face="sans-serif"> incount</font> refers to the number of whole <font face="sans-serif"> datatype</font>s,  
and <font face="sans-serif"> position</font> is a number of bytes.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A converted read operation could be implemented as follows:  
<P> 
<ol> 
 
1. Get file extent of all data items  
 
<BR> 
2. Allocate a filebuf large enough to hold all count data items  
 
<BR> 
3. Read data from file into filebuf  
 
<BR> 
4. Call <font face="sans-serif"> read_conversion_fn</font> to convert data and place it into userbuf  
 
<BR> 
5. Deallocate filebuf  
</ol> 
 (<em> End of advice to implementors.</em>) <BR> 
If <font face="sans-serif"> MPI</font> cannot allocate a buffer large enough to hold  
all the data to be converted from a read operation, it may  
call the conversion function repeatedly using the same <font face="sans-serif"> datatype</font>  
and <font face="sans-serif"> userbuf</font>,  
and reading successive chunks of data to be  
converted in <font face="sans-serif"> filebuf</font>.  For the first call (and in  
the case when all the data to be converted fits into  
<font face="sans-serif"> filebuf</font>), <font face="sans-serif"> MPI</font> will call the function with   
<font face="sans-serif"> position</font> set to zero.  Data converted during this  
call will be stored in the <font face="sans-serif"> userbuf</font> according to  
the first <font face="sans-serif"> count</font> data items in <font face="sans-serif"> datatype</font>.  Then  
in subsequent calls to the conversion function, <font face="sans-serif"> MPI</font> will  
increment the value in <font face="sans-serif"> position</font> by the <font face="sans-serif"> count</font> of  
items converted in the previous  
call, and the <font face="sans-serif"> userbuf</font> pointer will be unchanged.   
  
 
<BR> 
<em> Rationale.</em>  
<P> 
Passing the conversion function a position and one datatype for the transfer  
allows the conversion function to decode the datatype only once and  
cache an internal representation of it on the datatype.  
Then on subsequent calls, the conversion function can use the <font face="sans-serif"> position</font>  
to quickly find its place in the datatype and continue  
storing converted data where it left off at the end of the previous call.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Although the conversion function may usefully cache an  
internal representation on the datatype, it should not cache  
any state information specific to an ongoing conversion  
operation, since it is possible for the same datatype to  
be used concurrently in multiple conversion operations.  
 (<em> End of advice to users.</em>) <BR> 
The function <font face="sans-serif"> write_conversion_fn</font> must convert from  
native representation to file data representation.  
Before calling this routine,  
<font face="sans-serif"> MPI</font> allocates <font face="sans-serif"> filebuf</font> of a size large enough to hold <font face="sans-serif"> count</font>  
  
contiguous data items.  
The type of each data item matches the  
corresponding entry for the predefined datatype  
in the type signature of <font face="sans-serif"> datatype</font>.  
  
The function must copy <font face="sans-serif"> count</font> data items from  
<font face="sans-serif"> userbuf</font> in the distribution described by   
<font face="sans-serif"> datatype</font>,  
to a contiguous distribution in <font face="sans-serif"> filebuf</font>, converting each data item  
from native representation to file representation.  
If the size of <font face="sans-serif"> datatype</font> is less than the size  
of <font face="sans-serif"> count</font>  
data items,  
  
the conversion function must treat  
<font face="sans-serif"> datatype</font> as being contiguously tiled over the  
<font face="sans-serif"> userbuf</font>.  
<P> 
The function must  
begin copying at the location in <font face="sans-serif"> userbuf</font> specified by  
<font face="sans-serif"> position</font> into the (tiled) <font face="sans-serif"> datatype</font>.  
<font face="sans-serif"> datatype</font> will be equivalent to the datatype  
that the user passed to the   
write   
function.  
  
The function is passed, in <font face="sans-serif"> extra_state</font>,  
the argument that was passed to the <font face="sans-serif"> MPI_REGISTER_DATAREP</font> call.  
<P> 
The predefined constant <font face="sans-serif">  MPI_CONVERSION_FN_NULL</font> may be used  
as either  
<font face="sans-serif"> write_conversion_fn</font> or <font face="sans-serif"> read_conversion_fn</font>.  In that  
case, <font face="sans-serif"> MPI</font> will  
not attempt to invoke <font face="sans-serif"> write_conversion_fn</font> or   
<font face="sans-serif"> read_conversion_fn</font>, respectively, but will perform   
the requested data access using the native data representation.  
<P> 
An <font face="sans-serif"> MPI</font> implementation must ensure that all data accessed is converted,  
either by using a filebuf large enough to hold all the requested  
data items  
or else by making repeated calls to the conversion function  
with the same <font face="sans-serif"> datatype</font> argument and appropriate values for  
<font face="sans-serif"> position</font>.  
<P> 
An implementation will only invoke the callback routines in this section  
<BR>  
(<font face="sans-serif"> read_conversion_fn</font>, <font face="sans-serif"> write_conversion_fn</font>,  
and <font face="sans-serif"> dtype_file_extent_fn</font>)  
when one of the read or write routines in Section <a href="node275.htm#Node275">Data Access 
</a>,  
page <a href="node275.htm#Node275">Data Access 
</a>,  
or <font face="sans-serif"> MPI_FILE_GET_TYPE_EXTENT</font> is called by the user.    
<font face="sans-serif"> dtype_file_extent_fn</font> will only be passed  
predefined datatypes employed by the user.  
The conversion functions will only be passed datatypes equivalent to those  
  
that the user has passed to one of the routines noted above.  
<P> 
The conversion functions must be reentrant.  
User defined data representations are restricted  
to use byte alignment for all types.  
  
Furthermore, it is erroneous for the conversion functions to  
call any collective routines or to free <font face="sans-serif"> datatype</font>.  
<P> 
The conversion functions should return an error code.  
If the returned error  
code has a value other than <font face="sans-serif">  MPI_SUCCESS</font>, the  
implementation will raise an error in the class <font face="sans-serif"> MPI_ERR_CONVERSION</font>.  
<P> 

<P>
<HR>
<A HREF="node291.htm#Node292"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node291.htm#Node291"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node294.htm#Node294"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node291.htm#Node291"> User-Defined Data Representations</a>
<b>Next: </b><A HREF="node294.htm#Node294"> Matching Data Representations</a>
<b>Previous: </b><A HREF="node291.htm#Node292"> Extent Callback</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

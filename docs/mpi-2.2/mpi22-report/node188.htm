<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Error Handlers for Communicators</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node188">177. Error Handlers for Communicators</a></H2>
<A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node189.htm#Node189"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<b>Next: </b><A HREF="node189.htm#Node189"> Error Handlers for Windows</a>
<b>Previous: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<P>
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CREATE_ERRHANDLER(function, errhandler)</TD></TR>  
<TR><TD> IN function</TD><TD>user defined error handling procedure (function)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD><font face="sans-serif"> MPI</font>  error handler (handle)</TD></TR>  
</TABLE>  
<P> 
   
 <tt> int MPI_Comm_create_errhandler(MPI_Comm_errhandler_<font color="red">function<font color="black"> *function, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
 <tt> MPI_COMM_CREATE_ERRHANDLER(FUNCTION, ERRHANDLER, IERROR)<BR>  EXTERNAL FUNCTION <BR>INTEGER ERRHANDLER, IERROR <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> static MPI::Errhandler MPI::Comm::Create_errhandler(MPI::Comm::Errhandler_<font color="red">function<font color="black">* function) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Creates an error handler that can be attached to communicators.  
This function is identical to <font face="sans-serif"> MPI_ERRHANDLER_CREATE</font>,   
  
whose use is deprecated.  
  
<P> 
The user routine should be, in C, a  
function of type  
<font color="red"><font face="sans-serif">  MPI_Comm_errhandler_function</font><font color="black">, which is defined as  
<P> 
2.2<font color="red"> <tt> typedef void MPI_Comm_errhandler_function(MPI_Comm *, int *, ...); <BR></tt>  
<font color="black">The first argument is the communicator in use.  
  
The second is  
the error code to be returned by the <font face="sans-serif"> MPI</font> routine that raised the error.  
If the routine would have returned <font face="sans-serif">  MPI_ERR_IN_STATUS</font>, it is  
the error code returned in the status for the request that caused the  
error handler to be invoked.  
  
The remaining arguments are ``<tt>stdargs</tt>'' arguments  
whose number and meaning is implementation-dependent.  An implementation  
should clearly document these arguments.  
Addresses are used so that the handler may be written in Fortran.  
  
This typedef replaces <font face="sans-serif"> MPI_Handler_function</font>, whose use is  
deprecated.   
  
  
<P> 
In Fortran, the user routine should be of the form:  
<P> 
  
2.2<font color="red"> <tt> SUBROUTINE COMM_ERRHANDLER_FUNCTION(COMM, ERROR_CODE) <BR> INTEGER COMM, ERROR_CODE <BR></tt>  
<font color="black">  
  
2.2  
In C++, the user routine should be of the form:  
<P> 
  
2.2<font color="red"> <font color="red">{<font color="black"><tt> typedef void MPI::Comm::Errhandler_function(MPI::Comm &amp;, int *, ... ); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
<font color="black">  
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The variable argument list is provided because it provides an  
ISO-standard  
hook for providing additional information to the error  
handler; without this hook,   
ISO C   
prohibits additional arguments.  
 (<em> End of rationale.</em>) <BR> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
A newly  
created communicator inherits the error  
handler that is associated with the ``parent'' communicator.  
In particular, the user can specify a ``global'' error handler for  
all communicators by  
associating this handler with the communicator <font face="sans-serif">  MPI_COMM_WORLD</font>  
immediately after initialization.  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SET_ERRHANDLER(comm, errhandler)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> IN errhandler</TD><TD>new error handler for communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) <BR></tt>  
<P> 
 <tt> MPI_COMM_SET_ERRHANDLER(COMM, ERRHANDLER, IERROR) <BR> INTEGER  COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> void MPI::Comm::Set_errhandler(const MPI::Errhandler&amp; errhandler) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Attaches a new error handler to a communicator.  
The error handler must be either a predefined error  
handler, or an error handler created by a call to  
<font face="sans-serif"> MPI_COMM_CREATE_ERRHANDLER</font>.  This call is identical to  
<font face="sans-serif"> MPI_ERRHANDLER_SET</font>,  
  
whose use is deprecated.  
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_GET_ERRHANDLER(comm, errhandler)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator  (handle)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>error handler currently associated with  
communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *errhandler) <BR></tt>  
<P> 
 <tt> MPI_COMM_GET_ERRHANDLER(COMM, ERRHANDLER, IERROR) <BR> INTEGER  COMM, ERRHANDLER, IERROR <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> MPI::Errhandler MPI::Comm::Get_errhandler() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Retrieves the error handler currently associated with a communicator.  
This call is identical to <font face="sans-serif"> MPI_ERRHANDLER_GET</font>,  
  
whose use is deprecated.  
  
  
Example:  
A library function may register at its entry point the current error  
handler for a  
communicator, set its own private error handler for this communicator, and  
restore before exiting the previous error handler.  
  
<P> 

<P>
<HR>
<A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node187.htm#Node187"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node189.htm#Node189"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<b>Next: </b><A HREF="node189.htm#Node189"> Error Handlers for Windows</a>
<b>Previous: </b><A HREF="node187.htm#Node187"> Error Handling</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

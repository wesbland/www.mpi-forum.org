<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Library Example #1</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node141">139. Library Example #1</a></H2>
<A HREF="node140.htm#Node140"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node136.htm#Node136"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node142.htm#Node142"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node136.htm#Node136"> Motivating Examples</a>
<b>Next: </b><A HREF="node142.htm#Node142"> Library Example #2</a>
<b>Previous: </b><A HREF="node140.htm#Node140"> Example #4</a>
<P>
  
The main program:  
  
2.2  
<font color="red">  
<BR> 
<pre><tt>   int main(int argc, char **argv) 
   { 
     int done = 0; 
     user_lib_t *libh_a, *libh_b; 
     void *dataset1, *dataset2; 
     ... 
     MPI_Init(&amp;argc, &amp;argv); 
     ... 
     init_user_lib(MPI_COMM_WORLD, &amp;libh_a); 
     init_user_lib(MPI_COMM_WORLD, &amp;libh_b); 
     ... 
     user_start_op(libh_a, dataset1); 
     user_start_op(libh_b, dataset2); 
     ... 
     while(!done) 
     { 
        /* work */ 
        ... 
        MPI_Reduce(..., MPI_COMM_WORLD); 
        ... 
        /* see if done */ 
        ... 
     } 
     user_end_op(libh_a); 
     user_end_op(libh_b); 
 
     uninit_user_lib(libh_a); 
     uninit_user_lib(libh_b); 
     MPI_Finalize(); 
   } 
</tt></pre> 
<font color="black">  
<P> 
 The user library initialization code:  
<BR> 
<pre><tt>   void init_user_lib(MPI_Comm comm, user_lib_t **handle) 
   { 
     user_lib_t *save; 
 
     user_lib_initsave(&amp;save); /* local */ 
     MPI_Comm_dup(comm, &amp;(save -&gt; comm)); 
 
     /* other inits */ 
     ... 
 
     *handle = save; 
   } 
</tt></pre> 
 User start-up code:  
<BR> 
<pre><tt>   void user_start_op(user_lib_t *handle, void *data) 
   { 
     MPI_Irecv( ..., handle-&gt;comm, &amp;(handle -&gt; irecv_handle) ); 
     MPI_Isend( ..., handle-&gt;comm, &amp;(handle -&gt; isend_handle) ); 
   } 
</tt></pre> 
 User communication clean-up code:  
<BR> 
<pre><tt>   void user_end_op(user_lib_t *handle) 
   { 
     MPI_Status status; 
     MPI_Wait(handle -&gt; isend_handle, &amp;status); 
     MPI_Wait(handle -&gt; irecv_handle, &amp;status); 
   } 
</tt></pre> 
 User object clean-up code:  
<BR> 
<pre><tt>   void uninit_user_lib(user_lib_t *handle) 
   { 
     MPI_Comm_free(&amp;(handle -&gt; comm)); 
     free(handle); 
   } 
</tt></pre> 

<P>
<HR>
<A HREF="node140.htm#Node140"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node136.htm#Node136"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node142.htm#Node142"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node136.htm#Node136"> Motivating Examples</a>
<b>Next: </b><A HREF="node142.htm#Node142"> Library Example #2</a>
<b>Previous: </b><A HREF="node140.htm#Node140"> Example #4</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

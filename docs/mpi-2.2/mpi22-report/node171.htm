<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-topol/topol.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>General (Graph) Constructor</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node171">164. General (Graph) Constructor</a></H2>
<A HREF="node170.htm#Node170"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node172.htm#Node172"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node168.htm#Node168"> Topology Constructors</a>
<b>Next: </b><A HREF="node172.htm#Node172"> Distributed (Graph) Constructor</a>
<b>Previous: </b><A HREF="node170.htm#Node170"> Cartesian Convenience Function: <font face="sans-serif"> MPI_DIMS_CREATE</font></a>
<P>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_CREATE(comm_old, nnodes, index, edges, reorder, comm_graph)</TD></TR>  
  
<TR><TD> IN  comm_old</TD><TD> input communicator (handle)</TD></TR>  
  
<TR><TD> IN  nnodes</TD><TD> number of nodes in graph (integer)</TD></TR>  
<TR><TD> IN  index</TD><TD>array of integers describing node degrees (see below)</TD></TR>  
<TR><TD> IN  edges</TD><TD>array of integers describing graph edges (see below)</TD></TR>  
<TR><TD> IN  reorder</TD><TD> ranking may be reordered (<font face="sans-serif">  true</font>) or not (<font face="sans-serif">  false</font>) (logical)</TD></TR>  
<TR><TD> OUT  comm_graph</TD><TD> communicator with graph topology added (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index, int *edges, int reorder, MPI_Comm *comm_graph) <BR></tt>  
<P> 
 <tt> MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER, COMM_GRAPH, IERROR)<BR> INTEGER COMM_OLD, NNODES, INDEX(*), EDGES(*), COMM_GRAPH, IERROR <BR>LOGICAL REORDER <BR></tt>  
 <font color="red">{<font color="black"> MPI::Graphcomm MPI::Intracomm::Create_graph(int nnodes, const int index[], const int edges[], bool reorder) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<font face="sans-serif"> MPI_GRAPH_CREATE</font> returns a handle to a new communicator to which the  
graph topology information is attached.  If <font face="sans-serif"> reorder = false</font> then the  
rank of each process in the new group is identical to its rank in the old  
group.  Otherwise, the function may reorder the processes.  If the size,  
<font face="sans-serif"> nnodes</font>, of the graph is smaller than the size of the group of  
<font face="sans-serif"> comm</font>, then some processes are returned <font face="sans-serif">  MPI_COMM_NULL</font>, in  
analogy to <font face="sans-serif"> MPI_CART_CREATE</font> and <font face="sans-serif"> MPI_COMM_SPLIT</font>.  
If the graph is empty, i.e., <font face="sans-serif"> nnodes == 0</font>,   
then <font face="sans-serif">  MPI_COMM_NULL</font> is returned in all processes.   
The call  
is erroneous if it specifies a graph that is larger than the group size of the  
input communicator.  
<P> 
The three parameters <font face="sans-serif"> nnodes, index</font> and <font face="sans-serif"> edges</font> define the graph  
structure.  
<font face="sans-serif"> nnodes</font> is the number of nodes of the graph.   The nodes are numbered  
from <tt> 0</tt> to <tt> nnodes-1</tt>.  
The   
<tt> i</tt>-th   
entry of array <font face="sans-serif"> index</font> stores the total number of  
neighbors of the first <tt> i</tt> graph nodes.   The lists of neighbors of  
nodes <tt> 0, 1, ..., nnodes-1</tt> are stored in consecutive locations in array  
<font face="sans-serif"> edges</font>.  The array <font face="sans-serif"> edges</font> is a flattened representation  
of the edge lists.  
The total number of entries in <font face="sans-serif"> index</font> is <font face="sans-serif"> nnodes</font> and  
the total number of entries in <font face="sans-serif"> edges</font> is equal to the number of  
graph edges.  
<P> 
The definitions of the arguments <tt> nnodes</tt>, <tt> index</tt>, and  
<tt> edges</tt> are illustrated with the following simple example.  
<P> 
<BR><b> Example</b>   
  
  
Assume there are four processes 0, 1, 2, 3 with the following  
adjacency matrix: <BR>  
  
<TABLE><TR><TD ALIGN="CENTER">  
process</TD><TD ALIGN="LEFT"> neighbors </TD></TR> 
<TR><TD ALIGN="CENTER">  
  
0</TD><TD ALIGN="LEFT"> 1, 3      </TD></TR> 
<TR><TD ALIGN="CENTER">  
1</TD><TD ALIGN="LEFT"> 0         </TD></TR> 
<TR><TD ALIGN="CENTER">  
2</TD><TD ALIGN="LEFT"> 3         </TD></TR> 
<TR><TD ALIGN="CENTER">  
3</TD><TD ALIGN="LEFT"> 0, 2      </TD></TR> 
<TR><TD ALIGN="CENTER">  
  
</TD></TR></TABLE> 
  
<P> 
Then, the input arguments are: <BR>  
  
<TABLE><TR><TD ALIGN="LEFT">nnodes =</TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
index =</TD><TD ALIGN="LEFT"> 2, 3, 4, 6 </TD></TR> 
<TR><TD ALIGN="LEFT">  
edges =</TD><TD ALIGN="LEFT"> 1, 3, 0, 3, 0, 2  
</TD></TR></TABLE> 
  
<P> 
Thus, in C, <tt> index[0]</tt> is the degree of node zero, and <tt> index[i] -  
index[i-1]</tt> is the degree of node <tt> i, i=1, ..., nnodes-1</tt>;  
the list of neighbors of node zero is stored in <tt> edges[j]</tt>, for  
<IMG WIDTH=99 HEIGHT=11 SRC="img109.gif">
 and the list of neighbors of node <tt> i</tt>,  
<I> i &gt; 0</I>,  
is stored in <tt> edges[j]</tt>, <IMG WIDTH=152 HEIGHT=11 SRC="img110.gif">
.  
<P> 
In Fortran, <tt> index(1)</tt> is the degree of node zero, and <tt> index(i+1) -  
index(i)</tt> is the degree of node <tt> i, i=1, ..., nnodes-1</tt>;  
the list of neighbors of node zero is stored in <tt> edges(j)</tt>, for  
<IMG WIDTH=81 HEIGHT=11 SRC="img111.gif">
 and the list of neighbors of node  
<tt> i</tt>, <I> i &gt; 0</I>,  
is stored in <tt> edges(j)</tt>, <IMG WIDTH=156 HEIGHT=11 SRC="img112.gif">
.  
<P> 
   
<P> 
A single process is allowed to be defined multiple times in the list of  
neighbors of a process (i.e., there may be multiple edges between two  
processes). A process is also allowed to be a neighbor to itself (i.e., a self  
loop in the graph). The adjacency matrix is allowed to be non-symmetric.  
 
<BR> 
<em> Advice to users.</em>  
 <P> 
Performance implications of using multiple edges or a non-symmetric  
adjacency matrix are not defined. The definition of a node-neighbor  
edge does not imply a direction of the communication.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
The following topology information is likely to be stored with a communicator:  
<ul> 
 
<li>Type of topology (Cartesian/graph),  
 
<li>For a Cartesian topology:  
   <ol> 
    
1. ndims (number of dimensions),  
    
<BR> 
2. dims (numbers of processes per coordinate direction),  
    
<BR> 
3. periods (periodicity information),  
    
<BR> 
4. own_position (own position in grid, could also be computed  
                          from rank and dims)  
   </ol> 
 
<li>For a graph topology:  
   <ol> 
    
1. index,  
    
<BR> 
2. edges,  
   </ol> 
which are the vectors defining the graph structure.  
</ul> 
<BR> 
For a graph structure the number of nodes is equal to the number of processes  
in the group. Therefore, the number of nodes does not have to be stored explicitly.  An  
additional zero entry at the start of array <font face="sans-serif"> index</font> simplifies  
access to the topology information.  
 (<em> End of advice to implementors.</em>) <BR> 
<font color="red">  

<P>
<HR>
<A HREF="node170.htm#Node170"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node172.htm#Node172"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node168.htm#Node168"> Topology Constructors</a>
<b>Next: </b><A HREF="node172.htm#Node172"> Distributed (Graph) Constructor</a>
<b>Previous: </b><A HREF="node170.htm#Node170"> Cartesian Convenience Function: <font face="sans-serif"> MPI_DIMS_CREATE</font></a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

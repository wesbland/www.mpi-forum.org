<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Probe and Cancel</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node64">63. Probe and Cancel</a></H1>
<A HREF="node63.htm#Node63"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node65.htm#Node65"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node65.htm#Node65"> Persistent Communication Requests</a>
<b>Previous: </b><A HREF="node63.htm#Node63"> Non-destructive Test of <font face="sans-serif"> status</font></a>
<P>
  
<P> 
The <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>  
operations allow incoming messages to be checked for,  
without  
actually receiving them.  The user can then decide how to receive them, based  
on the information returned by the probe (basically, the information  
returned by <font face="sans-serif"> status</font>).  In particular, the user may allocate memory for  
the receive buffer, according to the length of the probed message.  
<P> 
The <font face="sans-serif"> MPI_CANCEL</font> operation allows pending communications to be canceled.  
This  
is required for cleanup.   Posting a send or a receive ties up user resources  
(send or receive buffers), and a cancel may be needed to free these resources  
gracefully.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IPROBE(source, tag, comm, flag, status)</TD></TR>  
<TR><TD> IN source</TD><TD><font color="red">rank of source<font color="black"> or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD><font color="red">message tag<font color="black"> or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT flag</TD><TD> (logical)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) <BR></tt>  
<P> 
 <tt> MPI_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR)<BR> LOGICAL  FLAG <BR>INTEGER  SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR <BR></tt>  
 <font color="red">{<font color="black"> bool MPI::Comm::Iprobe(int source, int tag, MPI::Status&amp; status) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> bool MPI::Comm::Iprobe(int source, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_IPROBE(source, tag, comm, flag, status)</font>  
returns <font face="sans-serif"> flag = true</font>  
if there is a message that can be received  
and that matches the pattern specified by the  
arguments <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>, and <font face="sans-serif"> comm</font>.  
The call matches the same message  
that would have been received by a call to <font face="sans-serif"> MPI_RECV(..., source, tag,  
comm, status)</font> executed at the same point in the program, and returns in  
<font face="sans-serif"> status</font> the same  
value that would have been returned by <font face="sans-serif"> MPI_RECV()</font>.  
Otherwise, the call returns <font face="sans-serif"> flag = false</font>, and leaves <font face="sans-serif"> status</font>  
undefined.  
<P> 
If <font face="sans-serif"> MPI_IPROBE</font> returns <font face="sans-serif"> flag = true</font>,  
then the content of the status object can be subsequently  
accessed as described in Section <a href="node47.htm#Node47">Return Status 
</a> to find the  
source, tag and length of the probed message.  
<P> 
  
  
A subsequent receive executed with the same communicator, and the source and  
tag returned in status by <font face="sans-serif"> MPI_IPROBE</font> will receive the message that  
was matched by the probe, if no other intervening receive occurs after the  
probe, and the send is not successfully cancelled before the receive.  
<P> 
If the receiving process is multi-threaded, it is the user's  
responsibility to ensure that the last condition holds.  
<P> 
The <font face="sans-serif"> source</font> argument of <font face="sans-serif"> MPI_PROBE</font> can be  
<font face="sans-serif">  MPI_ANY_SOURCE</font>, and the <font face="sans-serif"> tag</font> argument can be  
<font face="sans-serif">  MPI_ANY_TAG</font>, so that one can probe for messages from an arbitrary  
source and/or with  
an arbitrary tag.  However, a specific communication context  
must be provided with the <font face="sans-serif"> comm</font> argument.  
<P> 
It is not necessary to receive a message immediately after it has been  
probed for, and the  
same message may be probed for several times before it is received.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_PROBE(source, tag, comm, status)</TD></TR>  
<TR><TD> IN source</TD><TD><font color="red">rank of source<font color="black"> or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD><font color="red">message tag<font color="black"> or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) <BR></tt>  
<P> 
 <tt> MPI_PROBE(SOURCE, TAG, COMM, STATUS, IERROR)<BR> INTEGER SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Comm::Probe(int source, int tag, MPI::Status&amp; status) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> void MPI::Comm::Probe(int source, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_PROBE</font> behaves like <font face="sans-serif"> MPI_IPROBE</font> except that it is a blocking  
call that returns only after a matching message has been found.  
<P> 
The <font face="sans-serif"> MPI</font> implementation of <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font> needs  
to guarantee progress:  
if a call to <font face="sans-serif"> MPI_PROBE</font> has been issued by a process, and a send that  
matches the probe has been initiated by some process, then the call to  
<font face="sans-serif"> MPI_PROBE</font> will return, unless the message is received by another  
concurrent receive operation (that is executed by another thread at the probing  
process).   Similarly, if a process busy waits with  
<font face="sans-serif"> MPI_IPROBE</font> and a matching message has been issued,  
then the call to  
<font face="sans-serif"> MPI_IPROBE</font> will eventually return <font face="sans-serif"> flag = true</font>  
unless the message is received by another concurrent receive  
operation.  
<P> 
<BR><b> Example</b>   
  
  
  
  
  
<P> 
Use blocking probe to wait for an incoming message.  
<P> 
  
  
<BR> 
<pre><tt>       CALL MPI_COMM_RANK(comm, rank, ierr) 
       IF (rank.EQ.0) THEN 
           CALL MPI_SEND(i, 1, MPI_INTEGER, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.1) THEN 
           CALL MPI_SEND(x, 1, MPI_REAL, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.2) THEN 
           DO i=1, 2 
              CALL MPI_PROBE(MPI_ANY_SOURCE, 0, 
                             comm, status, ierr) 
              IF (status(MPI_SOURCE) .EQ. 0) THEN 
100               CALL MPI_RECV(i, 1, MPI_INTEGER, 0, 0, comm, status, ierr) 
              ELSE 
200               CALL MPI_RECV(x, 1, MPI_REAL, 1, 0, comm, status, ierr) 
              END IF 
           END DO 
       END IF 
</tt></pre> 
Each message is received with the right type.  
   
<P> 
<BR><b> Example</b>   
  
  
  
  
  
A similar program to the previous example, but now it  
has a problem.  
<P> 
  
  
<BR> 
<pre><tt>       CALL MPI_COMM_RANK(comm, rank, ierr) 
       IF (rank.EQ.0) THEN 
            CALL MPI_SEND(i, 1, MPI_INTEGER, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.1) THEN 
            CALL MPI_SEND(x, 1, MPI_REAL, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.2) THEN 
           DO i=1, 2 
              CALL MPI_PROBE(MPI_ANY_SOURCE, 0, 
                              comm, status, ierr) 
              IF (status(MPI_SOURCE) .EQ. 0) THEN 
100                CALL MPI_RECV(i, 1, MPI_INTEGER, MPI_ANY_SOURCE, 
                                 0, comm, status, ierr) 
              ELSE 
200                CALL MPI_RECV(x, 1, MPI_REAL, MPI_ANY_SOURCE, 
                                 0, comm, status, ierr) 
              END IF 
           END DO 
       END IF 
</tt></pre> 
We slightly modified Example <a href="node64.htm#Node64">Probe and Cancel 
</a>, using  
<font face="sans-serif">  MPI_ANY_SOURCE</font> as the <font face="sans-serif"> source</font>  
argument in the two receive calls in statements labeled 100 and 200.  
The program is now incorrect: the receive operation may receive a message that  
is distinct from the message probed by the preceding call to  
<font face="sans-serif"> MPI_PROBE</font>.  
   
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A call to <font face="sans-serif"> MPI_PROBE(source, tag, comm, status)</font> will match the  
message that would have been received by a call to <font face="sans-serif"> MPI_RECV(...,  
source, tag, comm, status)</font> executed at the same point.  
Suppose  
that this message has source <font face="sans-serif"> s</font>, tag <font face="sans-serif"> t</font> and communicator  
<font face="sans-serif"> c</font>.  If the  
tag argument in the probe call has value <font face="sans-serif">  MPI_ANY_TAG</font>  
then the message probed  
will be the earliest pending message from source <font face="sans-serif"> s</font>  
with communicator <font face="sans-serif"> c</font> and any tag; in any case, the message probed will be the  
earliest pending message from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and  
communicator  
<font face="sans-serif"> c</font> (this is  
the message that would have been received, so as to preserve message order).  
This message continues as the earliest pending message  
from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and communicator <font face="sans-serif"> c</font>, until it is received.  
A receive operation subsequent to the probe that uses the same communicator as the  
probe and uses the tag and source values returned by the probe, must receive  
this message, unless it has already been received by another receive operation.  
 (<em> End of advice to implementors.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_CANCEL(request)</TD></TR>  
<TR><TD> IN request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cancel(MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_CANCEL(REQUEST, IERROR)<BR> INTEGER  REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Request::Cancel() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
A call to <font face="sans-serif"> MPI_CANCEL</font> marks for cancellation a pending,  
nonblocking communication operation (send or receive).  The cancel call is  
local. It returns immediately, possibly before the  
communication is actually canceled.  
It is still necessary to complete a communication that has been marked  
for cancellation, using a call to <font face="sans-serif"> MPI_REQUEST_FREE</font>,  
<font face="sans-serif"> MPI_WAIT</font> or <font face="sans-serif"> MPI_TEST</font> (or any of the derived operations).  
<P> 
If a communication is marked for cancellation, then a <font face="sans-serif"> MPI_WAIT</font>  
call for that communication is guaranteed to return, irrespective of  
the activities of other processes (i.e., <font face="sans-serif"> MPI_WAIT</font> behaves as a  
local function); similarly if <font face="sans-serif"> MPI_TEST</font> is  
repeatedly called in a busy wait loop for a canceled communication,  
then <font face="sans-serif"> MPI_TEST</font> will eventually be successful.  
<P> 
<font face="sans-serif"> MPI_CANCEL</font> can be used to cancel a communication that uses  
a persistent request (see Section <a href="node65.htm#Node65">Persistent Communication Requests 
</a>), in  
the same way it is used for nonpersistent requests.  
A successful cancellation cancels  
the active communication, but not the request itself.  After the call to  
<font face="sans-serif"> MPI_CANCEL</font> and the subsequent call to <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_TEST</font>, the request becomes inactive and  
can be activated for a new communication.  
<P> 
The successful  
cancellation of a buffered send frees the buffer space occupied by  
the pending message.  
<P> 
Either the cancellation succeeds, or the communication succeeds, but  
not both.  
If a send is marked for cancellation, then it must be the case that  
either the send completes normally, in which case the  
message sent was received at the destination process, or that the send is  
successfully  
canceled, in which case no part of the message was received at the  
destination.  Then, any matching receive has to be satisfied by another send.  
If a receive is marked for cancellation, then it must be the case that  
either the receive completes normally, or that the receive is  
successfully canceled, in which case no part of the receive buffer  
is altered.  Then, any matching send has to be satisfied by another receive.  
<P> 
If the operation has been  
canceled, then information to that effect will be returned in the  
status argument of the operation that completes the communication.  
<P> 
<font color="red">  
 
<BR> 
<em> Rationale.</em>  
<P> 
Although the IN request handle parameter should not need to be passed   
by reference, the C binding has listed the argument type as <font face="sans-serif"> MPI_Request*</font> since   
<font face="sans-serif"> MPI-1.0</font>. This function signature therefore cannot be changed without breaking   
existing <font face="sans-serif"> MPI</font> applications.  
 (<em> End of rationale.</em>) <BR> 
<font color="black">  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TEST_CANCELLED(status, flag)</TD></TR>  
<TR><TD> IN status</TD><TD>status object (Status)</TD></TR>  
<TR><TD> OUT flag</TD><TD>(logical)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Test_cancelled(MPI_Status *status, int *flag) <BR></tt>  
  
<P> 
 <tt> MPI_TEST_CANCELLED(STATUS, FLAG, IERROR)<BR> LOGICAL FLAG <BR>INTEGER  STATUS(MPI_STATUS_SIZE), IERROR <BR></tt>  
 <font color="red">{<font color="black"> bool MPI::Status::Is_cancelled() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Returns <font face="sans-serif"> flag = true</font> if the communication associated with the  
status object was canceled successfully.  In such a case, all  
other fields of <font face="sans-serif"> status</font> (such as <font face="sans-serif"> count</font> or <font face="sans-serif"> tag</font>) are  
undefined.  Returns <font face="sans-serif"> flag = false</font>, otherwise.  If a receive  
operation might be canceled then one should call <font face="sans-serif"> MPI_TEST_CANCELLED</font>  
first, to check whether the operation was  
canceled, before checking on the other fields of the return status.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Cancel can be an expensive operation that should be used only exceptionally.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
If a send operation uses an ``eager'' protocol (data is transferred to  
the receiver  
before a matching receive is posted), then the cancellation of this send  
may require communication with the intended receiver in order to free  
allocated  
buffers.  On some systems this may require an interrupt to the  
intended receiver.  
Note that, while communication may be needed to implement  
<font face="sans-serif"> MPI_CANCEL</font>,  
this is still a local operation, since its completion does not  
depend on the code executed by other processes.  If processing is required on  
another process, this should be transparent to the application (hence the need  
for an interrupt and an interrupt handler).  
 (<em> End of advice to implementors.</em>) <BR> 

<P>
<HR>
<A HREF="node63.htm#Node63"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node65.htm#Node65"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node65.htm#Node65"> Persistent Communication Requests</a>
<b>Previous: </b><A HREF="node63.htm#Node63"> Non-destructive Test of <font face="sans-serif"> status</font></a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node343">313. Problems With Fortran Bindings for  MPI</a></H2>
<A HREF="node342.htm#Node342"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node341.htm#Node341"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node344"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node341.htm#Node341"> Fortran Support</a>
<b>Next: </b><A HREF="node343.htm#Node344"> Problems Due to Strong Typing</a>
<b>Previous: </b><A HREF="node342.htm#Node342"> Overview</a>
<P>
  
This section discusses a number of problems that may arise  
when using <font face="sans-serif"> MPI</font> in a Fortran program. It is intended as  
advice to users, and clarifies how <font face="sans-serif"> MPI</font> interacts with  
Fortran. It does not add to the standard, but is intended to   
clarify the standard.   
<P> 
As noted in the original <font face="sans-serif"> MPI</font> specification, the interface violates  
the Fortran standard in several ways. While these cause few problems  
for Fortran 77 programs, they become more significant for Fortran 90  
programs, so that users must exercise care when using new Fortran 90  
features.  The violations were originally adopted and have been  
retained because they are important for the usability of <font face="sans-serif"> MPI</font>.  The  
rest of this section describes the potential problems in detail.  It  
supersedes and replaces the discussion of Fortran bindings in the  
original <font face="sans-serif"> MPI</font> specification (for Fortran 90, not Fortran 77).  
<P> 
The following <font face="sans-serif"> MPI</font> features are inconsistent with Fortran 90.   
  
<ol> 
 
1. An <font face="sans-serif"> MPI</font> subroutine with a choice argument may be  
called with different argument types.   
 
<BR> 
2. An <font face="sans-serif"> MPI</font> subroutine with an assumed-size dummy argument may  
be passed an actual scalar argument.     
 
<BR> 
3. Many <font face="sans-serif"> MPI</font> routines assume that actual arguments are  
passed by address and that arguments are not copied on  
entrance to or exit from the subroutine.   
 
<BR> 
4. An <font face="sans-serif"> MPI</font> implementation may read or modify user data (e.g.,  
communication buffers used by nonblocking communications) concurrently  
  
with a user program that is executing outside   
of <font face="sans-serif"> MPI</font> calls.  
  
 
<BR> 
5. Several named ``constants,'' such as <font face="sans-serif">  MPI_BOTTOM</font>,  
  <font face="sans-serif">  MPI_IN_PLACE</font>,   
<font face="sans-serif">  MPI_STATUS_IGNORE</font>, <font face="sans-serif">  MPI_STATUSES_IGNORE</font>,  
<font face="sans-serif">  MPI_ERRCODES_IGNORE</font>,   
<font color="red"><font face="sans-serif">  MPI_UNWEIGHTED</font>,<font color="black">  
<font face="sans-serif">  MPI_ARGV_NULL</font>, and  
<font face="sans-serif">  MPI_ARGVS_NULL</font>  
are not ordinary Fortran constants and require a special  
implementation. See Section <a href="node24.htm#Node24">Named Constants 
</a> on   
page <a href="node24.htm#Node24">Named Constants 
</a> for more information.  
 
<BR> 
6. The memory allocation routine <font face="sans-serif"> MPI_ALLOC_MEM</font> can't  
be usefully used in Fortran without a language extension that allows  
the allocated memory to be associated with a Fortran variable.   
</ol> 
  
<P> 
<font color="red">  
Additionally, <font face="sans-serif"> MPI</font> is inconsistent with Fortran 77 in a number of   
ways, as noted below.   
<ul> 
 
<li><font face="sans-serif"> MPI</font> identifiers exceed 6 characters.   
 
<li><font face="sans-serif"> MPI</font> identifiers may contain underscores after the first character.   
 
<li><font face="sans-serif"> MPI</font> requires an include file, <tt> mpif.h</tt>. On systems  
that do not support include files, the implementation should specify  
the values of named constants.   
 
<li>Many routines in  
<font face="sans-serif"> MPI</font>   
have KIND-parameterized integers  
(e.g., <font face="sans-serif">  MPI_ADDRESS_KIND</font> and <font face="sans-serif">  MPI_OFFSET_KIND</font>)  
that hold address information.   
On systems that do not support Fortran 90-style parameterized  
types, <tt> INTEGER*8</tt> or <tt> INTEGER</tt> should be used instead.   
</ul> 
<BR> 
<font color="black">  
<P> 
  
<font face="sans-serif"> MPI-1</font> contained several routines that take address-sized information  
as input or return address-sized information as output. In C  
such arguments were of type <font face="sans-serif"> MPI_Aint</font> and in Fortran of   
type <tt> INTEGER</tt>. On machines where integers are smaller than  
addresses, these routines can lose information. In <font face="sans-serif"> MPI-2</font> the   
use of these functions has been deprecated  
and they have been replaced by   
routines taking <tt> INTEGER</tt> arguments of <tt> KIND=MPI_ADDRESS_KIND</tt>.   
A number of new <font face="sans-serif"> MPI-2</font> functions also take <tt> INTEGER</tt> arguments  
of non-default <tt> KIND</tt>. See Section <a href="node28.htm#Node28">Language Binding 
</a>   
on page <a href="node28.htm#Node28">Language Binding 
</a> and   
Section <a href="node70.htm#Node70">Type Constructors with Explicit Addresses 
</a> on page <a href="node70.htm#Node70">Type Constructors with Explicit Addresses 
</a>   
for more information.   
  
<P> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node342.htm#Node342"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node341.htm#Node341"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node344"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node341.htm#Node341"> Fortran Support</a>
<b>Next: </b><A HREF="node343.htm#Node344"> Problems Due to Strong Typing</a>
<b>Previous: </b><A HREF="node342.htm#Node342"> Overview</a>
<P>
<HR><H3><A NAME="Node344">313.1. Problems Due to Strong Typing</a></H3>
<A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node345"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node345"> Problems Due to Data Copying and Sequence Association</a>
<b>Previous: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<P>
All <font face="sans-serif"> MPI</font> functions with choice arguments associate actual arguments  
of different Fortran datatypes with the same dummy argument.  This is  
not allowed by Fortran 77, and in Fortran 90 is technically  
only allowed if the function is overloaded with a different function  
for each type.  In C, the use of <tt> void*</tt> formal arguments avoids these  
problems.  
<P> 
The following code fragment is technically illegal and may  
generate a compile-time error.  
<BR> 
<pre><tt>  integer i(5) 
  real    x(5) 
  ... 
  call mpi_send(x, 5, MPI_REAL, ...) 
  call mpi_send(i, 5, MPI_INTEGER, ...) 
</tt></pre> 
In practice, it is rare for compilers to do more than issue a  
warning, though there is concern that Fortran 90 compilers are more likely  
to return errors.  
<P> 
It is also technically illegal in Fortran to pass a scalar actual  
argument to an array dummy argument. Thus the following code fragment  
may generate an error since the <font face="sans-serif"> buf</font> argument to  
<font face="sans-serif"> MPI_SEND</font> is declared as an assumed-size array   
<tt> &lt;type&gt; buf(*)</tt>.  
<P> 
  
<BR> 
<pre><tt>  integer a 
  call mpi_send(a, 1, MPI_INTEGER, ...) 
</tt></pre> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
In the event that you run into one of the problems related to  
type checking, you may be able to work around it by using a compiler  
flag, by compiling separately, or by using an <font face="sans-serif"> MPI</font> implementation   
with Extended Fortran Support as described in Section  
<a href="node350.htm#Node350">Extended Fortran Support 
</a>.    
An alternative that will usually work with variables local to a  
routine but not with arguments to a function or subroutine is to use  
the <tt> EQUIVALENCE</tt> statement to create another variable with a type  
accepted by the compiler.  
 (<em> End of advice to users.</em>) <BR> 

<P>
<HR>
<A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node345"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node345"> Problems Due to Data Copying and Sequence Association</a>
<b>Previous: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<P>
<HR><H3><A NAME="Node345">313.2. Problems Due to Data Copying and Sequence Association</a></H3>
<A HREF="node343.htm#Node344"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node346"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node346"> Special Constants</a>
<b>Previous: </b><A HREF="node343.htm#Node344"> Problems Due to Strong Typing</a>
<P>
  
<P> 
Implicit in <font face="sans-serif"> MPI</font> is the idea of a contiguous chunk of memory accessible  
through a linear address space.  <font face="sans-serif"> MPI</font> copies data to and from this  
memory. An <font face="sans-serif"> MPI</font> program specifies the location of data by providing  
memory addresses and offsets. In the C language, sequence association  
rules plus pointers provide all the necessary low-level structure.  
<P> 
In Fortran 90, user data is not necessarily stored contiguously. For  
example, the array section <tt> A(1:N:2)</tt> involves only the elements of <tt>  
  A</tt> with   
indices 1, 3, 5, ... . The same is true for a pointer array whose  
target is such a section. Most compilers ensure that an array that is a  
dummy argument is held in contiguous memory if it is declared with an  
explicit shape (e.g., <tt> B(N)</tt>) or is of assumed size (e.g., <tt> B(*)</tt>). If  
necessary, they do this by making a copy of the array into contiguous  
memory. Both Fortran 77 and Fortran 90 are carefully worded to allow  
such copying to occur, but few Fortran 77 compilers do  
it.<A HREF="JavaScript: alert('Technically, the Fortran standards are worded to allow  
non-contiguous storage of any array data.')">*</A>  
<P> 
Because <font face="sans-serif"> MPI</font> dummy buffer arguments are assumed-size arrays, this leads  
to a serious problem for a nonblocking call: the compiler copies the  
temporary array back on return but <font face="sans-serif"> MPI</font> continues to copy data to the  
memory that held it. For example, consider the following code fragment:  
  
<BR> 
<pre><tt>    real a(100) 
    call MPI_IRECV(a(1:100:2), MPI_REAL, 50, ...) 
</tt></pre> 
Since the first dummy argument to <font face="sans-serif"> MPI_IRECV</font> is an assumed-size  
array (<tt> &lt;type&gt; buf(*)</tt>), the array section <tt> a(1:100:2)</tt> is copied to  
a temporary before being passed to <font face="sans-serif"> MPI_IRECV</font>, so that it is  
contiguous in memory. <font face="sans-serif"> MPI_IRECV</font> returns immediately, and data is  
copied from the temporary back into the array <tt> a</tt>. Sometime later, <font face="sans-serif"> MPI</font>  
  
may write to the address of the deallocated temporary.  
  
Copying is also a problem for <font face="sans-serif"> MPI_ISEND</font> since the temporary  
array may be deallocated before the data has all been sent from it.  
<P> 
Most Fortran 90 compilers do not make a copy if the actual argument is  
the whole of an explicit-shape or assumed-size array or is a `simple'  
section such as <tt> A(1:N)</tt> of such an array. (We define `simple' more fully  
in the next paragraph.) Also, many compilers treat allocatable arrays  
the same as they treat explicit-shape arrays in this regard (though we know of one that  
does not). However, the same is not true for assumed-shape and pointer  
arrays; since they may be discontiguous, copying is often done. It is  
this copying that causes problems for <font face="sans-serif"> MPI</font> as described in the previous  
paragraph.  
<P> 
Our formal definition of a `simple' array section is   
<BR> 
<pre><tt>   name ( [:,]... [&lt;subscript&gt;]:[&lt;subscript&gt;] [,&lt;subscript&gt;]... ) 
</tt></pre> 
That is, there are zero or more dimensions that are selected in full,  
then one dimension selected without a stride, then zero or more  
dimensions that are selected with a simple subscript. Examples are  
<BR> 
<pre><tt>   A(1:N), A(:,N), A(:,1:N,1), A(1:6,N), A(:,:,1:N) 
</tt></pre> 
Because of Fortran's column-major ordering, where the first index  
varies fastest, a simple section of a contiguous array will also be  
contiguous.<A HREF="JavaScript: alert('To keep the definition of `simple' simple, we have chosen to 
require all but one of the section subscripts to be without bounds.  A 
colon without bounds makes it obvious both to the compiler and to the 
reader that the whole of the dimension is selected. It would have been 
possible to allow cases where the whole dimension is selected with one 
or two bounds, but this means for the reader that the array declaration 
or most recent allocation has to be consulted and for the compiler that 
a run-time check may be required.')">*</A>  
<P> 
The same problem can occur with a scalar argument. Some compilers, even for  
Fortran 77, make a copy of some scalar dummy arguments within  
a called procedure. That this can cause a problem is illustrated by the  
example  
  
<BR> 
<pre><tt>      call user1(a,rq)  
      call MPI_WAIT(rq,status,ierr)  
      write (*,*) a  
 
      subroutine user1(buf,request) 
      call MPI_IRECV(buf,...,request,...)  
      end  
</tt></pre> 
If <tt> a</tt> is copied, <font face="sans-serif"> MPI_IRECV</font> will alter the copy when it completes the  
communication and will not alter <tt> a</tt> itself.   
<P> 
Note that copying will almost certainly occur for an argument that is a  
non-trivial expression (one with at least one operator or function  
call), a section that does not select a contiguous part of its parent  
(e.g., <tt> A(1:n:2)</tt>), a pointer whose target is such a section, or an  
assumed-shape array that is (directly or indirectly) associated with  
such a section.  
<P> 
If there is a compiler option that inhibits copying of arguments,  
in either the calling or called procedure, this should be employed.  
<P> 
If a compiler makes copies in the calling procedure of arguments that  
are explicit-shape or assumed-size arrays, simple array sections of  
such arrays, or scalars, and if there is no compiler option to inhibit  
this, then the compiler cannot be used for applications that use   
  
<font face="sans-serif"> MPI_GET_ADDRESS</font>, or any nonblocking <font face="sans-serif"> MPI</font> routine.  If a  
  
compiler copies scalar arguments in the called procedure and there is no  
compiler option to inhibit this, then this compiler cannot be used for  
applications that use memory references across subroutine calls as  
in the example above.  
<P> 
  

<P>
<HR>
<A HREF="node343.htm#Node344"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node346"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node346"> Special Constants</a>
<b>Previous: </b><A HREF="node343.htm#Node344"> Problems Due to Strong Typing</a>
<P>
<HR><H3><A NAME="Node346">313.3. Special Constants</a></H3>
<A HREF="node343.htm#Node345"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node347"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node347"> Fortran 90 Derived Types</a>
<b>Previous: </b><A HREF="node343.htm#Node345"> Problems Due to Data Copying and Sequence Association</a>
<P>
  
2.2  
<font color="red">  
MPI requires a number of special ``constants'' that cannot be  
implemented as normal Fortran constants, e.g.,  
<font face="sans-serif">  MPI_BOTTOM</font>. The complete list can be found in Section  
<a href="node24.htm#Node24">Named Constants 
</a> on page <a href="node24.htm#Node24">Named Constants 
</a>.  
<font color="black">  
In C, these are implemented as constant pointers, usually as <tt>  
NULL</tt> and are used where the function prototype calls for a pointer to  
a variable, not the variable itself.  
<P> 
In Fortran the implementation of these special constants may require the  
use of language constructs that are outside the Fortran  
standard. Using special values for the constants (e.g., by defining  
them through <tt> parameter</tt> statements) is not possible because an  
implementation cannot distinguish these values from legal  
data. Typically these constants are implemented as predefined  
static variables (e.g., a variable in an <font face="sans-serif"> MPI</font>-declared <tt> COMMON</tt>  
block), relying on the fact that the target compiler passes data by  
address.  Inside the subroutine, this address can be extracted by some  
mechanism outside the Fortran standard (e.g., by Fortran extensions or  
by implementing the function in C).  
<P> 
  
<P> 

<P>
<HR>
<A HREF="node343.htm#Node345"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node347"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node347"> Fortran 90 Derived Types</a>
<b>Previous: </b><A HREF="node343.htm#Node345"> Problems Due to Data Copying and Sequence Association</a>
<P>
<HR><H3><A NAME="Node347">313.4. Fortran 90 Derived Types</a></H3>
<A HREF="node343.htm#Node346"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node348"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node348"> A Problem with Register Optimization</a>
<b>Previous: </b><A HREF="node343.htm#Node346"> Special Constants</a>
<P>
<font face="sans-serif"> MPI</font> does not explicitly support passing Fortran 90 derived  
types to choice dummy arguments. Indeed, for <font face="sans-serif"> MPI</font> implementations  
that provide explicit interfaces through the <tt> mpi</tt> module  
  
a compiler will reject derived type actual arguments at compile time. Even when   
  
no explicit interfaces are given,   
users should be aware that Fortran 90 provides no guarantee of  
sequence association for derived types or arrays of derived  
types. For instance, an array of a derived type consisting  
of two elements may be implemented as an array of the first  
elements followed by an array of the second. Use  
of the <tt> SEQUENCE</tt> attribute may help here, somewhat.  
<P> 
  
The following code fragment shows one possible way to send a derived  
type in Fortran. The example assumes that all data is passed by address.  
  
  
<BR> 
<pre><tt>    type mytype 
       integer i 
       real x 
       double precision d 
    end type mytype 
 
    type(mytype) foo 
    integer blocklen(3), type(3) 
    integer(MPI_ADDRESS_KIND) disp(3), base 
 
    call MPI_GET_ADDRESS(foo%i, disp(1), ierr) 
    call MPI_GET_ADDRESS(foo%x, disp(2), ierr) 
    call MPI_GET_ADDRESS(foo%d, disp(3), ierr) 
      
    base = disp(1) 
    disp(1) = disp(1) - base 
    disp(2) = disp(2) - base 
    disp(3) = disp(3) - base 
 
    blocklen(1) = 1 
    blocklen(2) = 1 
    blocklen(3) = 1 
 
    type(1) = MPI_INTEGER 
    type(2) = MPI_REAL 
    type(3) = MPI_DOUBLE_PRECISION 
 
    call MPI_TYPE_CREATE_STRUCT(3, blocklen, disp, type, newtype, ierr) 
    call MPI_TYPE_COMMIT(newtype, ierr) 
 
! unpleasant to send foo%i instead of foo, but it works for scalar 
! entities of type mytype 
    call MPI_SEND(foo%i, 1, newtype, ...) 
 
</tt></pre> 

<P>
<HR>
<A HREF="node343.htm#Node346"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node343.htm#Node348"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node343.htm#Node348"> A Problem with Register Optimization</a>
<b>Previous: </b><A HREF="node343.htm#Node346"> Special Constants</a>
<P>
<HR><H3><A NAME="Node348">313.5. A Problem with Register Optimization</a></H3>
<A HREF="node343.htm#Node347"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node349.htm#Node349"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node349.htm#Node349"> Basic Fortran Support</a>
<b>Previous: </b><A HREF="node343.htm#Node347"> Fortran 90 Derived Types</a>
<P>
  
  
<P> 
<font face="sans-serif"> MPI</font> provides operations that may be hidden from the user code  
  
and run concurrently with it, accessing the same memory as user  
  
code.  Examples include the data transfer for an  
<font face="sans-serif"> MPI_IRECV</font>.  
The optimizer of a compiler will assume that  
it can recognize periods when a copy of a variable can be kept  
in a register without reloading from or storing to memory.  When  
the user code is working with a register copy of some variable  
while the hidden operation reads or writes the memory copy, problems  
occur.  This section discusses register optimization pitfalls.  
<P> 
When a variable is local to a Fortran subroutine (i.e., not in  
a module or <tt> COMMON block</tt>), the compiler will assume that it cannot be modified  
by a called subroutine unless it is an actual argument of the  
call.  In the most common linkage convention, the subroutine is  
expected to save and restore certain registers. Thus, the optimizer  
will assume that a register which held a valid copy of such a  
variable before the call will still hold a valid copy on return.  
<P> 
Normally users are not afflicted with this.  
But the user should pay attention to this section if in his/her  
program a buffer argument to an <font face="sans-serif"> MPI_SEND</font>, <font face="sans-serif"> MPI_RECV</font>  
etc., uses a name which hides the actual variables involved.  
<font face="sans-serif">  MPI_BOTTOM</font> with an  
<font face="sans-serif"> MPI_Datatype</font> containing absolute addresses is one example.  Creating  
a datatype which uses one variable as an anchor and brings along  
others by using <font face="sans-serif"> MPI_GET_ADDRESS</font> to determine their offsets from  
the anchor is another. The anchor variable would be the only one  
mentioned in the call. Also attention must be paid if <font face="sans-serif"> MPI</font> operations  
are used that run in parallel with the user's application.  
<P> 
Example <a href="node336.htm#Table13">13 
</a>   
shows what Fortran compilers are allowed to do.  
<P> 
<BR><b> Example</b>  
Fortran 90 register optimization.  
   
  
<BR>   
This source ... can be compiled as:  
   
<BR> 
<pre><tt>call MPI_GET_ADDRESS(buf,bufaddr,       call MPI_GET_ADDRESS(buf,...) 
               ierror) 
call MPI_TYPE_CREATE_STRUCT(1,1,        call MPI_TYPE_CREATE_STRUCT(...) 
               bufaddr, 
               MPI_REAL,type,ierror) 
call MPI_TYPE_COMMIT(type,ierror)       call MPI_TYPE_COMMIT(...) 
val_old = buf                           register = buf 
                                        val_old = register 
call MPI_RECV(MPI_BOTTOM,1,type,...)    call MPI_RECV(MPI_BOTTOM,...) 
val_new = buf                           val_new = register 
</tt></pre> 
  
  
The compiler does not invalidate the register because it cannot  
see that <font face="sans-serif"> MPI_RECV</font> changes the value of <font face="sans-serif"> buf</font>.  
The access of <font face="sans-serif"> buf</font> is hidden by the use of  
<font face="sans-serif"> MPI_GET_ADDRESS</font> and <font face="sans-serif">  MPI_BOTTOM</font>.  
<P> 
Example <a href="node336.htm#Table13">13 
</a>   
shows extreme, but allowed, possibilities.  
<P> 
<BR><b> Example</b>  
Fortran 90 register optimization -- extreme.   
   
  
<BR>   
Source compiled as or compiled as  
  
  
<BR> 
<pre><tt>call MPI_IRECV(buf,..req)  call MPI_IRECV(buf,..req)  call MPI_IRECV(buf,..req) 
                           register = buf             b1 = buf 
call MPI_WAIT(req,..)      call MPI_WAIT(req,..)      call MPI_WAIT(req,..) 
b1 = buf                   b1 := register 
</tt></pre> 
  
  
  
<font face="sans-serif"> MPI_WAIT</font> on a concurrent thread modifies <font face="sans-serif"> buf</font>  
between the invocation of <font face="sans-serif"> MPI_IRECV</font> and the finish of  
<font face="sans-serif"> MPI_WAIT</font>.  But the compiler cannot see any possibility that  
<font face="sans-serif"> buf</font> can be changed after <font face="sans-serif"> MPI_IRECV</font> has returned,   
and may schedule the load of <font face="sans-serif"> buf</font> earlier than  
typed in the source. It has no reason to avoid using a register to  
hold <font face="sans-serif"> buf</font> across the call to <font face="sans-serif"> MPI_WAIT</font>.  It also  
may reorder the instructions as in the case on the right.   
  
<P> 
To prevent instruction reordering or the allocation of a buffer in  
a register there are two possibilities in portable Fortran code:  
<P> 
<ul> 
 
<li>The compiler may be prevented from moving a reference to a buffer  
across a call to an <font face="sans-serif"> MPI</font> subroutine by surrounding the call by calls to  
an external subroutine with the buffer as an actual argument. Note that  
if the intent is declared in the external subroutine, it  
must be <tt> OUT</tt> or <tt> INOUT</tt>. The subroutine itself may have an empty body, but  
the compiler does not know this and has to assume that the buffer may  
be altered.  For example, the above call of <font face="sans-serif"> MPI_RECV</font> might be replaced  
by  
<BR> 
<pre><tt>        call DD(buf) 
        call MPI_RECV(MPI_BOTTOM,...) 
        call DD(buf) 
</tt></pre> 
with the separately compiled  
 <P> 
  
<BR> 
<pre><tt>        subroutine DD(buf) 
          integer buf 
        end 
</tt></pre> 
  
 <P> 
(assuming that <tt> buf</tt> has type <tt> INTEGER</tt>).  The compiler may be similarly  
prevented from moving a reference to a variable across a call to an <font face="sans-serif"> MPI</font>  
subroutine.  
<P> 
In the case of a nonblocking call, as in the above call of <font face="sans-serif"> MPI_WAIT</font>,  
no reference to the buffer is permitted until it has been verified  
that the transfer has been completed. Therefore, in this case, the   
extra call ahead of the <font face="sans-serif"> MPI</font> call is not necessary, i.e., the call  
of <font face="sans-serif"> MPI_WAIT</font> in the example might be replaced by  
<P> 
<BR> 
<pre><tt>          call MPI_WAIT(req,..) 
          call DD(buf) 
</tt></pre> 
 
<li>An alternative is to put the buffer or variable into a module or a  
common block and access it through a <tt> USE</tt> or <tt> COMMON</tt> statement in each  
scope where it is referenced, defined or appears as an actual argument  
in a call to an <font face="sans-serif"> MPI</font> routine. The compiler will then have to assume that  
the <font face="sans-serif"> MPI</font> procedure (<font face="sans-serif"> MPI_RECV</font> in the above example) may alter the buffer  
or variable, provided that the compiler cannot analyze that the <font face="sans-serif"> MPI</font>  
procedure does not reference the module or common block.  
<P> 
</ul> 
<BR> 
  
2.2  
<font color="red">  
The <tt> VOLATILE</tt> attribute, available in later versions of Fortran,  
gives the buffer or variable the properties needed, but it may inhibit  
optimization of any code containing the buffer or variable.   
<font color="black">  
<P> 
  
In C, subroutines which modify variables that are not in the argument  
  
list will not cause register optimization problems.  This is because  
taking pointers to storage objects by using the &amp; operator and  
later referencing the objects by way of the pointer is an integral  
part of the language.  
A C compiler understands the implications,  
so that the problem should not occur, in general.  However,  
some compilers do offer optional aggressive optimization levels which may not  
be safe.  
<P> 
<P> 
  
<P> 

<P>
<HR>
<A HREF="node343.htm#Node347"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node343.htm#Node343"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node349.htm#Node349"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node343.htm#Node343"> Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>
<b>Next: </b><A HREF="node349.htm#Node349"> Basic Fortran Support</a>
<b>Previous: </b><A HREF="node343.htm#Node347"> Fortran 90 Derived Types</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-misc/misc-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>The <font face="sans-serif"> Info</font> Object</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node199">188. The  Info Object</a></H1>
<A HREF="node198.htm#Node198"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node200.htm#Node200"> Process Creation and Management</a>
<b>Previous: </b><A HREF="node198.htm#Node198"> Portable <font face="sans-serif"> MPI</font> Process Startup</a>
<P>
  
  
<P> 
<P> 
  
  
<P> 
  
<P> 
Many of the routines in   
<font face="sans-serif"> MPI</font>   
take an argument  
<font face="sans-serif"> info</font>. <font face="sans-serif"> info</font> is an opaque object with a handle of type  
<font face="sans-serif"> MPI_Info</font> in C, <font face="sans-serif"> MPI::Info</font> in C++, and <tt> INTEGER</tt> in Fortran.   
It stores an unordered set of  
(<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pairs (both <font face="sans-serif"> key</font> and  
<font face="sans-serif"> value</font> are strings).   
A key   
can  
have only one  
value. <font face="sans-serif"> MPI</font> reserves several keys and requires that if an  
implementation uses a reserved key, it must provide the specified  
functionality.  An implementation is not required to support these  
keys and may support any others not reserved by <font face="sans-serif"> MPI</font>.  
<P> 
An implementation must support info objects as caches for arbitrary (<font face="sans-serif"> key</font>,  
<font face="sans-serif"> value</font>) pairs, regardless of whether it recognizes the key. Each function that  
takes hints in the form of an <font face="sans-serif"> MPI_Info</font> must be prepared to ignore any key it  
does not recognize. This description of info objects does not attempt to  
define how a particular function should react if it recognizes a key but not the  
associated value.   
<font face="sans-serif"> MPI_INFO_GET_NKEYS</font>, <font face="sans-serif"> MPI_INFO_GET_NTHKEY</font>,  
<font face="sans-serif"> MPI_INFO_GET_VALUELEN</font>, and <font face="sans-serif"> MPI_INFO_GET</font>  
must retain all (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>)  
pairs so that layered functionality can also use the <font face="sans-serif"> Info</font> object.   
  
Keys have an implementation-defined maximum length of  
  
<font face="sans-serif">  MPI_MAX_INFO_KEY</font>, which is at least 32 and at most 255.   
  
Values have an implementation-defined maximum length of  
  
<font face="sans-serif">  MPI_MAX_INFO_VAL</font>.    
  
  
In Fortran, leading and trailing spaces are stripped from  
both.  Returned values will never be larger than these maximum  
lengths.  
  
Both <font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are case sensitive.  
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
Keys have a maximum length because the set of known keys will always  
be finite and known to the implementation and because there is no  
reason for keys to be complex.  The small maximum size allows  
  
applications to declare keys of size <font face="sans-serif">  MPI_MAX_INFO_KEY</font>.  
  
The limitation on value sizes is so that an implementation is not  
forced to deal with arbitrarily long  
strings.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
  
<font face="sans-serif">  MPI_MAX_INFO_VAL</font> might be very large, so it  
  
might not be wise to declare a string of that size.  
 (<em> End of advice to users.</em>) <BR> 
When it is an argument to a <font color="red">nonblocking<font color="black"> routine, <font face="sans-serif"> info</font>  
is parsed before that routine returns, so that it may  
be modified or freed immediately after return.  
<P> 
  
<P> 
When the descriptions refer to a key or value as being a boolean, an  
integer, or a list, they mean the string representation of these  
types.  An implementation may define its own rules for how info value  
strings are converted to other types, but to ensure portability, every  
implementation must support the following representations.  Legal  
values for a boolean must include the strings ``true'' and ``false''  
(all lowercase).  For integers, legal values must include string  
representations of decimal values of integers that are within the  
range of a standard integer type in the program.  (However it is  
possible that not every legal integer is a legal value for a given  
key.)  On positive numbers, <I>+</I> signs are optional.  No space may  
appear between a <I>+</I> or <I>-</I> sign and the leading digit of a number.  For  
comma separated lists, the string must contain legal elements  
separated by commas.  Leading and trailing spaces are stripped  
automatically from the types of info values described above and for  
each element of a comma separated list.  These rules apply to all info  
values of these types.  Implementations are free to specify a  
different interpretation for values of other info keys.  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_CREATE(info)</TD></TR>  
<TR><TD> OUT info</TD><TD>info object created (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Info_create(MPI_Info *info) <BR></tt>  
 <tt> MPI_INFO_CREATE(INFO, IERROR)<BR> INTEGER INFO, IERROR <BR></tt>  
  
 <font color="red">{<font color="black"> static MPI::Info MPI::Info::Create() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_INFO_CREATE</font> creates a new info object. The newly created object contains  
no key/value pairs.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_SET(info, key, value)</TD></TR>  
<TR><TD> INOUT info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN key</TD><TD>key (string)</TD></TR>  
<TR><TD> IN value</TD><TD>value (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Info_set(MPI_Info info, char *key, char *value) <BR></tt>  
  
 <tt> MPI_INFO_SET(INFO, KEY, VALUE, IERROR)<BR> INTEGER INFO, IERROR <BR>CHARACTER*(*) KEY, VALUE <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Info::Set(const char* key, const char* value) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_INFO_SET</font> adds the (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pair to <font face="sans-serif"> info</font>, and  overrides the value if a value for the same key was previously set.   
<font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are null-terminated strings in C.   
In Fortran, leading and trailing spaces in <font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are stripped.   
If either <font face="sans-serif"> key</font> or <font face="sans-serif"> value</font> are larger than   
  
the allowed maximums, the errors <font face="sans-serif"> MPI_ERR_INFO_KEY</font> or  
  
<font face="sans-serif"> MPI_ERR_INFO_VALUE</font> are raised, respectively.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_DELETE(info, key)</TD></TR>  
<TR><TD> INOUT info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN key</TD><TD>key (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Info_delete(MPI_Info info, char *key) <BR></tt>  
   
 <tt> MPI_INFO_DELETE(INFO, KEY, IERROR)<BR> INTEGER INFO, IERROR <BR>CHARACTER*(*) KEY <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Info::Delete(const char* key) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_INFO_DELETE</font> deletes a (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pair from <font face="sans-serif"> info</font>.  
If <font face="sans-serif"> key</font> is not defined in <font face="sans-serif"> info</font>, the call  
raises an error of class <font face="sans-serif"> MPI_ERR_INFO_NOKEY</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET(info, key, valuelen, value, flag)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN key</TD><TD>key (string)</TD></TR>  
<TR><TD> IN valuelen</TD><TD>length of value arg (integer)</TD></TR>  
<TR><TD> OUT value</TD><TD>value (string)</TD></TR>  
<TR><TD> OUT flag</TD><TD> <font face="sans-serif">  true</font> if key defined, <font face="sans-serif">  false</font> if not (boolean)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Info_get(MPI_Info info, char *key, int valuelen, char *value, int *flag) <BR></tt>  
  
 <tt> MPI_INFO_GET(INFO, KEY, VALUELEN, VALUE, FLAG, IERROR)<BR> INTEGER INFO, VALUELEN, IERROR <BR>CHARACTER*(*) KEY, VALUE <BR>LOGICAL FLAG <BR></tt>  
  
 <font color="red">{<font color="black"> bool MPI::Info::Get(const char* key, int valuelen, char* value) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function retrieves the value associated with key in a previous call to   
<font face="sans-serif"> MPI_INFO_SET</font>. If such a key exists, it sets <font face="sans-serif"> flag</font> to <font face="sans-serif">  true</font>   
and returns the value in <font face="sans-serif"> value</font>,  
otherwise it sets <font face="sans-serif"> flag</font> to <font face="sans-serif">  false</font> and leaves  
<font face="sans-serif"> value</font> unchanged.   
<font face="sans-serif"> valuelen</font> is the number of characters available in   
value. If it is less than the actual size of the value, the value is  
truncated. In C, <font face="sans-serif"> valuelen</font> should  
be one less than the amount of allocated space to allow  
for the null terminator.   
<P> 
  
If <font face="sans-serif"> key</font> is larger than <font face="sans-serif">  MPI_MAX_INFO_KEY</font>,   
  
the call is erroneous.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_VALUELEN(info, key, valuelen, flag)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN key</TD><TD>key (string)</TD></TR>  
<TR><TD> OUT valuelen</TD><TD>length of value arg (integer)</TD></TR>  
<TR><TD> OUT flag</TD><TD> <font face="sans-serif">  true</font> if key defined, <font face="sans-serif">  false</font> if not (boolean)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, int *flag) <BR></tt>  
  
 <tt> MPI_INFO_GET_VALUELEN(INFO, KEY, VALUELEN, FLAG, IERROR)<BR> INTEGER INFO, VALUELEN, IERROR <BR>LOGICAL FLAG <BR>CHARACTER*(*) KEY <BR></tt>  
  
 <font color="red">{<font color="black"> bool MPI::Info::Get_valuelen(const char* key, int&amp; valuelen) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
Retrieves the length of the <font face="sans-serif"> value</font> associated with  
<font face="sans-serif"> key</font>. If <font face="sans-serif"> key</font> is defined, <font face="sans-serif"> valuelen</font> is set  
to the length of its associated value and <font face="sans-serif"> flag</font> is set to  
<font face="sans-serif">  true</font>.  If <font face="sans-serif"> key</font> is not defined, <font face="sans-serif"> valuelen</font> is not  
touched and <font face="sans-serif"> flag</font> is set to <font face="sans-serif">  false</font>. The length returned in   
C or C++ does not include the end-of-string character.  
<P> 
  
If <font face="sans-serif"> key</font> is larger than <font face="sans-serif">  MPI_MAX_INFO_KEY</font>,   
  
the call is erroneous.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_NKEYS(info, nkeys)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> OUT nkeys</TD><TD>number of defined keys (integer)</TD></TR>  
</TABLE>  
 <tt> int MPI_Info_get_nkeys(MPI_Info info, int *nkeys) <BR></tt>  
 <tt> MPI_INFO_GET_NKEYS(INFO, NKEYS, IERROR)<BR> INTEGER INFO, NKEYS, IERROR <BR></tt>  
  
 <font color="red">{<font color="black"> int MPI::Info::Get_nkeys() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_INFO_GET_NKEYS</font> returns the number of currently defined keys in <font face="sans-serif"> info</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_NTHKEY(info, n, key)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN n</TD><TD>key number (integer)</TD></TR>  
<TR><TD> OUT key</TD><TD>key (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Info_get_nthkey(MPI_Info info, int n, char *key) <BR></tt>  
  
 <tt> MPI_INFO_GET_NTHKEY(INFO, N, KEY, IERROR)<BR> INTEGER INFO, N, IERROR <BR>CHARACTER*(*) KEY <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Info::Get_nthkey(int n, char* key) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function returns the <font face="sans-serif"> n</font>th defined key in <font face="sans-serif"> info</font>.  
Keys are numbered <I>0 ... N-1</I> where <I>N</I> is the  
value returned by <font face="sans-serif"> MPI_INFO_GET_NKEYS</font>.   
All keys between <I>0</I> and <I>N-1</I> are guaranteed to   
be defined. The number of a given key does not change  
as long as <font face="sans-serif"> info</font> is not modified with   
<font face="sans-serif"> MPI_INFO_SET</font> or <font face="sans-serif"> MPI_INFO_DELETE</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_DUP(info, newinfo)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> OUT newinfo</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo) <BR></tt>  
 <tt> MPI_INFO_DUP(INFO, NEWINFO, IERROR)<BR> INTEGER INFO, NEWINFO, IERROR <BR></tt>  
  
 <font color="red">{<font color="black"> MPI::Info MPI::Info::Dup() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_INFO_DUP</font> duplicates an existing info object, creating a new  
object, with the same (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pairs and the same ordering of keys.  
  
<TABLE><TR><TD COLSPAN=2>MPI_INFO_FREE(info)</TD></TR>  
<TR><TD> INOUT info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Info_free(MPI_Info *info) <BR></tt>  
 <tt> MPI_INFO_FREE(INFO, IERROR) <BR> INTEGER INFO, IERROR <BR></tt>  
  
 <font color="red">{<font color="black"> void MPI::Info::Free() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
  
This function frees <font face="sans-serif"> info</font> and sets it to <font face="sans-serif">  MPI_INFO_NULL</font>.  
The value of an info argument is interpreted each time the info is passed   
to a routine.  Changes to an info after return from a routine do not affect  
that interpretation.  
  
  
<P> 
  
  

<P>
<HR>
<A HREF="node198.htm#Node198"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node200.htm#Node200"> Process Creation and Management</a>
<b>Previous: </b><A HREF="node198.htm#Node198"> Portable <font face="sans-serif"> MPI</font> Process Startup</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

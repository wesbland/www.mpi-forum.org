<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Distributed Array Datatype Constructor</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node73">72. Distributed Array Datatype Constructor</a></H2>
<A HREF="node72.htm#Node72"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node69.htm#Node69"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node74.htm#Node74"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node69.htm#Node69"> Derived Datatypes</a>
<b>Next: </b><A HREF="node74.htm#Node74"> Address and Size Functions</a>
<b>Previous: </b><A HREF="node72.htm#Node72"> Subarray Datatype Constructor</a>
<P>
  
  
<P> 
The distributed array type constructor supports  
HPF-like [<a href="node433.htm#-Bib30">30</a>] data distributions.  
However, unlike in HPF, the storage order may be specified for C arrays  
as well as for Fortran arrays.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
One can create an HPF-like file view using this type constructor  
as follows.  
Complementary filetypes are created by having every process of a group  
call this constructor with identical arguments  
(with the exception of <font face="sans-serif"> rank</font> which should be set appropriately).  
These filetypes (along with identical <font face="sans-serif"> disp</font> and <font face="sans-serif"> etype</font>)  
are then used to define the view (via <font face="sans-serif"> MPI_FILE_SET_VIEW</font>),  
see <font face="sans-serif"> MPI</font> I/O, especially Section <a href="node263.htm#Node263">Definitions 
</a> on page <a href="node263.htm#Node263">Definitions 
</a>  
and Section <a href="node274.htm#Node274">File Views 
</a> on page <a href="node274.htm#Node274">File Views 
</a>.  
Using this view,  
a collective data access operation (with identical offsets)  
will yield an HPF-like distribution pattern.  
 (<em> End of advice to users.</em>) <BR> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_CREATE_DARRAY(size, rank, ndims, array_of_gsizes,   
     array_of_distribs,  array_of_dargs,  
     array_of_psizes, order, oldtype, newtype)</TD></TR>  
<TR><TD> IN size</TD><TD>size of process group (positive integer)</TD></TR>  
<TR><TD> IN rank</TD><TD>rank in process group (<font color="red">non-negative<font color="black"> integer)</TD></TR>  
<TR><TD> IN ndims</TD><TD>number of array dimensions  
                        as well as process grid dimensions  
                        (positive integer)</TD></TR>  
<TR><TD> IN array_of_gsizes</TD><TD>number of elements of type <font face="sans-serif"> oldtype</font>  
                         in each dimension of global array  
                        (array of positive integers)</TD></TR>  
<TR><TD> IN array_of_distribs</TD><TD>distribution of array in each dimension  
                        (array of state)</TD></TR>  
<TR><TD> IN array_of_dargs</TD><TD>distribution argument in each dimension  
                        (array of positive integers)</TD></TR>  
<TR><TD> IN array_of_psizes</TD><TD>size of process grid in each dimension  
                        (array of positive integers)</TD></TR>  
<TR><TD> IN order</TD><TD>array storage order flag (state)</TD></TR>  
<TR><TD> IN oldtype</TD><TD>old datatype (handle)</TD></TR>  
<TR><TD> OUT newtype</TD><TD>new datatype (handle)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Type_create_darray(int size, int rank, int ndims, int array_of_gsizes[], int array_of_distribs[], int array_of_dargs[], int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) <BR></tt>  
  
 <tt> MPI_TYPE_CREATE_DARRAY(SIZE, RANK, NDIMS, ARRAY_OF_GSIZES, ARRAY_OF_DISTRIBS, ARRAY_OF_DARGS, ARRAY_OF_PSIZES, ORDER, OLDTYPE, NEWTYPE, IERROR)<BR> INTEGER SIZE, RANK, NDIMS, ARRAY_OF_GSIZES(*), ARRAY_OF_DISTRIBS(*), ARRAY_OF_DARGS(*), ARRAY_OF_PSIZES(*), ORDER, OLDTYPE, NEWTYPE, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Datatype MPI::Datatype::Create_darray(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font> can be used to generate  
the datatypes corresponding to the distribution  
of an <font face="sans-serif"> ndims</font>-dimensional array of <font face="sans-serif"> oldtype</font> elements  
  
onto  
  
an <font face="sans-serif"> ndims</font>-dimensional grid of logical processes.  
  
Unused dimensions of <font face="sans-serif"> array_of_psizes</font> should be set to 1.  
  
  
(See Example <a href="node73.htm#Node73">Distributed Array Datatype Constructor 
</a>, page <a href="node73.htm#Node73">Distributed Array Datatype Constructor 
</a>.)  
  
For a call to <font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font> to be correct,  
the equation <I>prod<SUB>i=0</SUB><SUP>ndims-1</SUP> array_of_psizes[i] = size </I>  
must be satisfied.  
The ordering of processes in the process grid is assumed to be  
row-major, as in the case of virtual Cartesian process topologies  
.  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
For both Fortran and C arrays, the ordering of processes in the  
process grid is assumed to be row-major. This is consistent with the  
ordering used in virtual Cartesian process topologies in   
<font face="sans-serif"> MPI</font>.  
To create such virtual process topologies, or to find the coordinates  
of a process in the process grid, etc., users may use the corresponding   
process topology functions,  
see Chapter <a href="node163.htm#Node163">Process Topologies 
</a> on page <a href="node163.htm#Node163">Process Topologies 
</a>.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
Each dimension of the array   
  
can be  
  
distributed in one of three ways:  
<ul> 
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font>     - Block distribution  
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> - Cyclic distribution  
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_NONE</font> - Dimension not distributed.  
</ul> 
<BR> 
The constant <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font> specifies  
a default distribution argument.  
  
The distribution argument for a dimension that is not distributed  
is ignored.  
For any dimension   
<font face="sans-serif"> i</font>  
in which the distribution  
is <font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font>,  
it is erroneous   
to specify  
<font face="sans-serif"> array_of_dargs[i]</font> <I>*</I> <font face="sans-serif"> array_of_psizes[i]</font>  
<I>&lt;</I> <font face="sans-serif"> array_of_gsizes[i]</font>.  
  
<P> 
For example, the HPF layout <tt> ARRAY(CYCLIC(15))</tt>  
corresponds to <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with a distribution argument of 15, and the HPF layout ARRAY(BLOCK)  
  
corresponds to  
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> with a distribution argument of  
<font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>.  
<P> 
The <font face="sans-serif"> order</font> argument is used as in <font face="sans-serif"> MPI_TYPE_CREATE_SUBARRAY</font> to  
specify the storage order.  
  
  
Therefore, arrays described by this type constructor may be  
stored in Fortran (column-major) or C (row-major) order.  
Valid values for <font face="sans-serif"> order</font> are  
<font face="sans-serif">  MPI_ORDER_FORTRAN</font> and <font face="sans-serif">  MPI_ORDER_C</font>.  
<P> 
This routine creates a new <font face="sans-serif"> MPI</font> datatype with a typemap defined in  
terms of a function called ``cyclic()'' (see below).  
<P> 
Without loss of generality, it suffices to define the typemap  
for the <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> case where  
<font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font> is not used.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> and <font face="sans-serif">  MPI_DISTRIBUTE_NONE</font>  
can be reduced to the <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> case  
for dimension   
<font face="sans-serif"> i</font>  
as follows.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> equal to <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>  
is equivalent to  
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with <font face="sans-serif"> array_of_dargs[i]</font> set to  
<p><I> 
(mpiargarray_of_gsizes[i] + mpiargarray_of_psizes[i] - 1) 
        / mpiargarray_of_psizes[i]. 
</I><p>  
If <font face="sans-serif"> array_of_dargs[i]</font> is not <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>,  
then <font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> and <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
are equivalent.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_NONE</font> is equivalent to   
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with <font face="sans-serif"> array_of_dargs[i]</font> set to <font face="sans-serif"> array_of_gsizes[i]</font>.  
<P> 
Finally,   
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> equal to <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>  
is equivalent to  
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> set to 1.  
<P> 
For <font face="sans-serif">  MPI_ORDER_FORTRAN</font>,  
an <font face="sans-serif"> ndims</font>-dimensional distributed array (<font face="sans-serif"> newtype</font>)  
is defined by the following code fragment:  
<P> 
<BR> 
<pre><tt>    oldtype[0] = oldtype; 
    for ( i = 0; i &lt; ndims; i++ ) { 
       oldtype[i+1] = cyclic(array_of_dargs[i], 
                             array_of_gsizes[i], 
                             r[i],  
                             array_of_psizes[i], 
                             oldtype[i]); 
    } 
    newtype = oldtype[ndims]; 
</tt></pre> 
For <font face="sans-serif">  MPI_ORDER_C</font>, the code is:  
<P> 
<BR> 
<pre><tt>    oldtype[0] = oldtype; 
    for ( i = 0; i &lt; ndims; i++ ) { 
       oldtype[i + 1] = cyclic(array_of_dargs[ndims - i - 1],  
                               array_of_gsizes[ndims - i - 1], 
                               r[ndims - i - 1],  
                               array_of_psizes[ndims - i - 1], 
                               oldtype[i]); 
    } 
    newtype = oldtype[ndims]; 
 
</tt></pre> 
where <I>r[i]</I> is the position of the process (with rank <font face="sans-serif"> rank</font>)  
in the process grid at dimension <I>i</I>.  
The values of <I>r[i]</I> are given by the following code fragment:  
<P> 
<BR> 
<pre><tt>        t_rank = rank; 
        t_size = 1; 
        for (i = 0; i &lt; ndims; i++) 
                t_size *= array_of_psizes[i]; 
        for (i = 0; i &lt; ndims; i++) { 
            t_size = t_size / array_of_psizes[i]; 
            r[i] = t_rank / t_size; 
            t_rank = t_rank % t_size; 
        } 
</tt></pre> 
Let the typemap of <font face="sans-serif"> oldtype</font> have the form:  
<I> 
{(type<SUB>0</SUB>,disp<SUB>0</SUB>),(type<SUB>1</SUB>,disp<SUB>1</SUB>),...,(type<SUB>n-1</SUB>,disp<SUB>n-1</SUB>)} 
</I>  
where <I>type<SUB>i</SUB></I> is a predefined <font face="sans-serif"> MPI</font> datatype, and let <I>ex</I> be the  
extent of <font face="sans-serif"> oldtype</font>.    
<P> 
Given the above, the function cyclic() is defined as follows:  
<P><IMG WIDTH=399 HEIGHT=480 SRC="img36.gif"><P>
where <I>count</I> is defined by this code fragment:  
<BR> 
<pre><tt>        nblocks = (gsize + (darg - 1)) / darg; 
        count = nblocks / psize; 
        left_over = nblocks - count * psize; 
        if (r &lt; left_over) 
            count = count + 1; 
</tt></pre> 
Here, <I>nblocks</I> is the number of blocks that must be   
distributed among the processors.  
Finally, <I>darg<SUB>last</SUB></I> is defined by this code fragment:  
<BR> 
<pre><tt>        if ((num_in_last_cyclic = gsize % (psize * darg)) == 0) 
             darg_last = darg; 
        else 
             darg_last = num_in_last_cyclic - darg * r; 
             if (darg_last &gt; darg) 
                    darg_last = darg; 
             if (darg_last &lt;= 0) 
                    darg_last = darg; 
</tt></pre> 
  
<P> 
<BR><b> Example</b>  
Consider generating the filetypes corresponding to the HPF distribution:  
  
<BR> 
<pre><tt>      &lt;oldtype&gt; FILEARRAY(100, 200, 300) 
!HPF$ PROCESSORS PROCESSES(2, 3) 
!HPF$ DISTRIBUTE FILEARRAY(CYCLIC(10), *, BLOCK) ONTO PROCESSES 
</tt></pre> 
This can be achieved by the following Fortran code,  
assuming there will be six processes attached to the run:  
<P><IMG WIDTH=509 HEIGHT=254 SRC="img37.gif"><P>
  
<P> 
  
  
<P> 

<P>
<HR>
<A HREF="node72.htm#Node72"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node69.htm#Node69"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node74.htm#Node74"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node69.htm#Node69"> Derived Datatypes</a>
<b>Next: </b><A HREF="node74.htm#Node74"> Address and Size Functions</a>
<b>Previous: </b><A HREF="node72.htm#Node72"> Subarray Datatype Constructor</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

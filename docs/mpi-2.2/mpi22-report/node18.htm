<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-terms/terms-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Procedure Specification</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node18">18. Procedure Specification</a></H1>
<A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node19.htm#Node19"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node19.htm#Node19"> Semantic Terms</a>
<b>Previous: </b><A HREF="node17.htm#Node17"> Naming Conventions</a>
<P>
<font face="sans-serif"> MPI</font> procedures are specified using a language-independent notation.  
The arguments of procedure calls are marked as <font face="sans-serif">  IN</font>, <font face="sans-serif">  OUT</font> or  
<font face="sans-serif">  INOUT</font>.  The meanings of these are:  
<ul> 
 
<li><font face="sans-serif">  IN</font>:  
  the call may use the input value but does not update the argument,  
 
<li><font face="sans-serif">  OUT</font>:  
  the call may update the argument but does not use its input value,  
 
<li><font face="sans-serif">  INOUT</font>:  
  the call may both use and update the argument.  
</ul> 
<BR> 
  
There is one special case --- if an argument is a handle to  
an opaque object (these terms are defined in   
Section <a href="node21.htm#Node21">Opaque Objects 
</a>), and the  
object is updated by the procedure call, then the argument is marked  
<font face="sans-serif">  INOUT</font> or  
<font face="sans-serif">  OUT</font>.  It is marked this way even though the handle itself is not  
modified --- we use the   
<font face="sans-serif">  INOUT</font> or  
<font face="sans-serif">  OUT</font> attribute to denote that what the  
handle <em> references</em> is updated.    
Thus, in C++, <font face="sans-serif">  IN</font> arguments are   
usually   
either references or pointers to   
<tt> const</tt> objects.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The definition of <font face="sans-serif"> MPI</font> tries to avoid, to the largest possible extent,  
the use of <font face="sans-serif">  INOUT</font> arguments, because such use is error-prone,  
especially for scalar arguments.  
 (<em> End of rationale.</em>) <BR> 
<font face="sans-serif"> MPI</font>'s use of <font face="sans-serif">  IN</font>, <font face="sans-serif">  OUT</font> and <font face="sans-serif">  INOUT</font> is intended  
to indicate to the user how an argument is  
  
to be used, but  
  
does not provide a rigorous classification that can be translated  
directly into   
  
all   
  
language bindings (e.g., <tt> INTENT</tt> in Fortran 90 bindings  
or <tt> const</tt> in C bindings). For instance, the ``constant''  
<font face="sans-serif">  MPI_BOTTOM</font> can usually be passed to <font face="sans-serif">  OUT</font> buffer  
arguments. Similarly, <font face="sans-serif">  MPI_STATUS_IGNORE</font> can be passed as the  
<font face="sans-serif">  OUT</font> status argument.  
<P> 
A common occurrence for <font face="sans-serif"> MPI</font> functions is an argument that is used as  
<font face="sans-serif">  IN</font>   
by some processes and <font face="sans-serif">  OUT</font> by other processes. Such  
an argument is, syntactically, an <font face="sans-serif">  INOUT</font> argument and is marked as  
such, although, semantically, it is not used in one call both for  
input and for output on a single process.  
<P> 
Another frequent situation arises when an argument value is needed only by  
a subset of the processes.  When an argument is not significant at a  
process then an arbitrary value can be passed as an argument.  
<P> 
Unless specified otherwise, an argument of type <font face="sans-serif">  OUT</font> or type  
<font face="sans-serif">  INOUT</font> cannot be aliased with any other argument passed to an  
<font face="sans-serif"> MPI</font> procedure.  An example of argument aliasing in C appears below.  
If we define a C procedure like this,  
<BR> 
<pre><tt>void copyIntBuffer( int *pin, int *pout, int len ) 
{   int i; 
    for (i=0; i&lt;len; ++i) *pout++ = *pin++; 
} 
</tt></pre> 
then a call to it in the following code fragment has aliased arguments.  
<BR> 
<pre><tt>int a[10]; 
copyIntBuffer( a, a+3, 7); 
</tt></pre> 
Although the C language allows this, such usage of <font face="sans-serif"> MPI</font> procedures is  
forbidden unless otherwise specified.  Note that Fortran prohibits  
aliasing of arguments.  
<P> 
All <font face="sans-serif"> MPI</font> functions are first specified in the language-independent  
notation.  Immediately below this, the   
ISO C   
version of the function  
is shown followed by a version of the same function in Fortran and  
then the C++ binding.  
  
Fortran in this document refers to Fortran 90; see  
Section <a href="node28.htm#Node28">Language Binding 
</a>.  
  
<P> 

<P>
<HR>
<A HREF="node17.htm#Node17"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node19.htm#Node19"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node19.htm#Node19"> Semantic Terms</a>
<b>Previous: </b><A HREF="node17.htm#Node17"> Naming Conventions</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

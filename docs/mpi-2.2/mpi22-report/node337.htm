<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Communicators</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node337">307. Communicators</a></H2>
<A HREF="node336.htm#Node336"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node330.htm#Node330"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node338.htm#Node338"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node330.htm#Node330"> C++</a>
<b>Next: </b><A HREF="node338.htm#Node338"> Exceptions</a>
<b>Previous: </b><A HREF="node336.htm#Node336"> C++ Datatypes</a>
<P>
  
<P> 
The <tt> MPI::Comm</tt> class hierarchy makes explicit the different  
kinds of communicators implicitly defined by <font face="sans-serif"> MPI</font> and allows them to  
be strongly typed.  Since the original design of <font face="sans-serif"> MPI</font> defined only  
one type of handle for all types of communicators, the following  
clarifications are provided for the C++ design.  
<P> 
<P> 
Types of communicators There are <font color="red">six<font color="black"> different types of communicators:  
  
 <tt> MPI::Comm</tt>,  
  
 <tt> MPI::Intercomm</tt>,  
  
 <tt> MPI::Intracomm</tt>,   
  
 <tt> MPI::Cartcomm</tt>,   
  
 <tt> MPI::Graphcomm</tt><font color="red">, and  
  
 <tt> MPI::Distgraphcomm</tt><font color="black">.  
 <tt> MPI::Comm</tt> is the abstract base communicator class,  
 encapsulating the functionality common to all <font face="sans-serif"> MPI</font>  
 communicators.   
 <tt> MPI::Intercomm</tt> and  
 <tt> MPI::Intracomm</tt> are derived from <tt> MPI::Comm</tt>.  
 <tt> MPI::Cartcomm</tt><font color="red">,<font color="black">  
 <tt> MPI::Graphcomm</tt><font color="red">, and   
 <tt> MPI::Distgraphcomm</tt><font color="black">   
 are derived from <tt> MPI::Intracomm</tt>.  
 <P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Initializing a derived class with an instance of a base class is  
not legal in C++. For instance, it is not legal to initialize  
a Cartcomm from an Intracomm. Moreover, because <font face="sans-serif"> MPI::Comm</font>  
is an abstract base class, it is non-instantiable, so that it is  
not possible to have an object of class MPI::Comm. However, it  
is possible to have a reference or a pointer to an <font face="sans-serif"> MPI::Comm</font>.  
<P> 
  
    <BR><b> Example</b>  
      The following code is erroneous.  
<BR> 
<pre><tt>  Intracomm intra = MPI::COMM_WORLD.Dup(); 
  Cartcomm cart(intra);         // This is erroneous 
</tt></pre> 
  
      
 (<em> End of advice to users.</em>) <BR> 
<P> 
<font face="sans-serif">  MPI::COMM_NULL</font> The specific type of <font face="sans-serif">  MPI::COMM_NULL</font> is implementation  
  dependent.  <font face="sans-serif">  MPI::COMM_NULL</font> must be able to be used in  
  comparisons and initializations with all types of communicators.  
  <font face="sans-serif">  MPI::COMM_NULL</font> must also be able to be passed to a  
  function that expects a communicator argument in the parameter list  
  (provided that <font face="sans-serif">  MPI::COMM_NULL</font> is an allowed value for the  
  communicator argument).  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
There are several possibilities for implementation of  
  <font face="sans-serif">  MPI::COMM_NULL</font>.  Specifying its required behavior, rather  
  than its realization, provides maximum flexibility to implementors.  
 (<em> End of rationale.</em>) <BR> 
  
<BR><b> Example</b>  
    The following example demonstrates the behavior of assignment and  
    comparison using <font face="sans-serif">  MPI::COMM_NULL</font>.  
<BR> 
<pre><tt>MPI::Intercomm comm; 
comm = MPI::COMM_NULL;            // assign with COMM_NULL 
if (comm == MPI::COMM_NULL)       // true 
  cout &lt;&lt; "comm is NULL" &lt;&lt; endl; 
if (MPI::COMM_NULL == comm)       // note -- a different function! 
  cout &lt;&lt; "comm is still NULL" &lt;&lt; endl; 
</tt></pre> 
  
<P> 
  
<tt> Dup()</tt> is not defined as a member function  
of <tt> MPI::Comm</tt>, but it is defined for the derived  
classes of <tt> MPI::Comm</tt>.  <tt> Dup()</tt> is not virtual and  
it returns its   
 OUT parameter    
by value.  
<P> 
<P> 
<tt> MPI::Comm::Clone()</tt> The C++ language interface for <font face="sans-serif"> MPI</font> includes a new function  
<tt> Clone()</tt>.  <tt> MPI::Comm::Clone()</tt> is a pure virtual  
function.  For the derived communicator classes, <tt> Clone()</tt>  
behaves like <tt> Dup()</tt> except that it returns a new object by  
reference.  The <tt> Clone()</tt> functions are prototyped as follows:  
<P> 
  
  
 <tt>  Comm&amp; Comm::Clone() const = 0 <BR></tt>   
 <tt>  Intracomm&amp; Intracomm::Clone() const <BR></tt>   
 <tt>  Intercomm&amp; Intercomm::Clone() const <BR></tt>   
 <tt>  Cartcomm&amp; Cartcomm::Clone() const <BR></tt>   
 <tt>  Graphcomm&amp; Graphcomm::Clone() const <BR></tt>   
<font color="red"> <tt>  Distgraphcomm&amp; Distgraphcomm::Clone() const <BR></tt>   
<font color="black">  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
<tt> Clone()</tt> provides the ``virtual dup'' functionality that is  
  expected by C++ programmers and library writers.  Since  
  <tt> Clone()</tt> returns a new object by reference, users are  
  responsible for eventually deleting the object.  A new name is  
  introduced rather than changing the functionality of <tt> Dup()</tt>.  
 (<em> End of rationale.</em>) <BR> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Within their class declarations, prototypes for <tt> Clone()</tt> and  
  <tt> Dup()</tt> would look like the following:  
<P><IMG WIDTH=373 HEIGHT=213 SRC="img157.gif"><P>
 (<em> End of advice to implementors.</em>) <BR> 
  
  
  
<P> 

<P>
<HR>
<A HREF="node336.htm#Node336"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node330.htm#Node330"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node338.htm#Node338"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node330.htm#Node330"> C++</a>
<b>Next: </b><A HREF="node338.htm#Node338"> Exceptions</a>
<b>Previous: </b><A HREF="node336.htm#Node336"> C++ Datatypes</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

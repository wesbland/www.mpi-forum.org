<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Names, Addresses, Ports,  and All That</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node213">201. Names, Addresses, Ports,  and All That</a></H2>
<A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node214.htm#Node214"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node214.htm#Node214"> Server Routines</a>
<b>Previous: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<P>
Almost all of the complexity in <font face="sans-serif"> MPI</font> client/server routines  
addresses the question ``how does the client find out how  
to contact the server?''  
The difficulty, of course, is that there is no existing   
communication channel between them, yet they must somehow agree   
on a rendezvous point where they will establish communication.   
  
2.2  
  
Agreeing on a rendezvous point always involves a third party.   
The third party may itself provide the rendezvous point or may  
communicate rendezvous information from server to client.   
Complicating  
matters might be the fact that a client doesn't really care  
what server it contacts, only that it be able to get in touch  
with one that can handle its request.  
<P> 
Ideally, <font face="sans-serif"> MPI</font> can accommodate  
 a wide variety of run-time systems while  
retaining the ability to write simple portable code. The following  
should be compatible with <font face="sans-serif"> MPI</font>:  
<P> 
<ul> 
 
<li>The server resides at a well-known internet address host:port.   
 
<li>The server prints out an address to the terminal,   
the user gives this address to the client program.   
 
<li>The server places the address information on a nameserver,   
where it can be retrieved with an agreed-upon name.   
 
<li>The server to which the client connects is actually   
a broker, acting as a middleman between the client and the  
real server.   
</ul> 
<BR> 
<font face="sans-serif"> MPI</font> does not require a nameserver, so not all implementations  
will be able to support all of the above scenarios. However,   
<font face="sans-serif"> MPI</font> provides an optional nameserver interface, and is compatible  
with external name servers.   
<P> 
A <font face="sans-serif"> port_name</font> is a <em> system-supplied</em> string that encodes a  
low-level network address at which a server can be  
contacted. Typically this is an IP address and a port number, but an  
implementation is free to use any protocol.  
The server establishes a <font face="sans-serif"> port_name</font> with the  
<font face="sans-serif"> MPI_OPEN_PORT</font> routine. It accepts a   
connection to a given port with <font face="sans-serif"> MPI_COMM_ACCEPT</font>.   
A client uses <font face="sans-serif"> port_name</font> to connect to the server.   
<P> 
By itself, the <font face="sans-serif"> port_name</font> mechanism is  
completely portable, but it may be clumsy to use because  
of the necessity to communicate <font face="sans-serif"> port_name</font> to   
the client. It would be more convenient if a server could specify that  
it be known by an <em> application-supplied</em> <font face="sans-serif"> service_name</font> so   
that the client could connect to that <font face="sans-serif"> service_name</font>  
without knowing the <font face="sans-serif"> port_name</font>.   
<P> 
An <font face="sans-serif"> MPI</font> implementation may allow the  
server to publish a (<font face="sans-serif"> port_name</font>, <font face="sans-serif"> service_name</font>)  
pair with <font face="sans-serif"> MPI_PUBLISH_NAME</font> and the client  
to retrieve the port name from the service name   
with <font face="sans-serif"> MPI_LOOKUP_NAME</font>. This allows three levels  
of portability, with increasing levels of functionality.   
<ol> 
 
1. Applications that do not rely on the ability to publish  
names are the most portable. Typically the <font face="sans-serif"> port_name</font>  
must be transferred ``by hand'' from server to client.   
 
<BR> 
2. Applications that use the <font face="sans-serif"> MPI_PUBLISH_NAME</font>  
mechanism are completely portable among implementations  
that provide this service. To be portable among all   
implementations, these applications should have a fall-back mechanism  
that can be used when names are not published.   
 
<BR> 
3. Applications may ignore <font face="sans-serif"> MPI</font>'s name publishing  
functionality and use their own mechanism (possibly  
system-supplied) to publish names. This allows arbitrary  
flexibility but is not portable.   
</ol> 

<P>
<HR>
<A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node214.htm#Node214"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node214.htm#Node214"> Server Routines</a>
<b>Previous: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

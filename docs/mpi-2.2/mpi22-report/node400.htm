<HTML>
<HEAD>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Groups, Contexts, Communicators, and Caching Fortran Bindings</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node400">355. Groups, Contexts, Communicators, and Caching Fortran Bindings</a></H2>
<A HREF="node399.htm#Node399"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node396.htm#Node396"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node401.htm#Node401"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node396.htm#Node396"> Fortran Bindings</a>
<b>Next: </b><A HREF="node401.htm#Node401"> Process Topologies Fortran Bindings</a>
<b>Previous: </b><A HREF="node399.htm#Node399"> Collective Communication Fortran Bindings</a>
<P>
 <tt> MPI_COMM_COMPARE(COMM1, COMM2, RESULT, IERROR)<BR> INTEGER COMM1, COMM2, RESULT, IERROR <BR></tt>  
 <tt> MPI_COMM_CREATE(COMM, GROUP, NEWCOMM, IERROR)<BR> INTEGER COMM, GROUP, NEWCOMM, IERROR <BR></tt>  
 <tt> MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN, COMM_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN<BR>INTEGER COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
 <tt> MPI_COMM_DELETE_ATTR(COMM, COMM_KEYVAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR <BR></tt>    
 <tt> MPI_COMM_DUP(COMM, NEWCOMM, IERROR)<BR> INTEGER COMM, NEWCOMM, IERROR <BR></tt>  
 <tt> MPI_COMM_DUP_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_COMM_FREE(COMM, IERROR)<BR> INTEGER COMM, IERROR <BR></tt>  
 <tt> MPI_COMM_FREE_KEYVAL(COMM_KEYVAL, IERROR)<BR> INTEGER COMM_KEYVAL, IERROR <BR></tt>   
 <tt> MPI_COMM_GET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
 <tt> MPI_COMM_GET_NAME(COMM, COMM_NAME, RESULTLEN, IERROR) <BR> INTEGER COMM, RESULTLEN, IERROR<BR>CHARACTER*(*) COMM_NAME <BR></tt>  
 <tt> MPI_COMM_GROUP(COMM, GROUP, IERROR)<BR> INTEGER COMM, GROUP, IERROR <BR></tt>  
 <tt> MPI_COMM_NULL_COPY_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_COMM_NULL_DELETE_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
 <tt> MPI_COMM_RANK(COMM, RANK, IERROR)<BR> INTEGER COMM, RANK, IERROR <BR></tt>  
 <tt> MPI_COMM_REMOTE_GROUP(COMM, GROUP, IERROR)<BR> INTEGER COMM, GROUP, IERROR <BR></tt>  
 <tt> MPI_COMM_REMOTE_SIZE(COMM, SIZE, IERROR)<BR> INTEGER COMM, SIZE, IERROR <BR></tt>  
 <tt> MPI_COMM_SET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
 <tt> MPI_COMM_SET_NAME(COMM, COMM_NAME, IERROR) <BR> INTEGER COMM, IERROR<BR>CHARACTER*(*) COMM_NAME <BR></tt>  
 <tt> MPI_COMM_SIZE(COMM, SIZE, IERROR)<BR> INTEGER COMM, SIZE, IERROR <BR></tt>  
 <tt> MPI_COMM_SPLIT(COMM, COLOR, KEY, NEWCOMM, IERROR)<BR> INTEGER COMM, COLOR, KEY, NEWCOMM, IERROR <BR></tt>  
 <tt> MPI_COMM_TEST_INTER(COMM, FLAG, IERROR)<BR> INTEGER COMM, IERROR<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_GROUP_COMPARE(GROUP1, GROUP2, RESULT, IERROR)<BR> INTEGER GROUP1, GROUP2, RESULT, IERROR <BR></tt>  
 <tt> MPI_GROUP_DIFFERENCE(GROUP1, GROUP2, NEWGROUP, IERROR)<BR> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_EXCL(GROUP, N, RANKS, NEWGROUP, IERROR)<BR> INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_FREE(GROUP, IERROR)<BR> INTEGER GROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_INCL(GROUP, N, RANKS, NEWGROUP, IERROR)<BR> INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_INTERSECTION(GROUP1, GROUP2, NEWGROUP, IERROR)<BR> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_RANGE_EXCL(GROUP, N, RANGES, NEWGROUP, IERROR)<BR> INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_RANGE_INCL(GROUP, N, RANGES, NEWGROUP, IERROR)<BR> INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_GROUP_RANK(GROUP, RANK, IERROR)<BR> INTEGER GROUP, RANK, IERROR <BR></tt>  
 <tt> MPI_GROUP_SIZE(GROUP, SIZE, IERROR)<BR> INTEGER GROUP, SIZE, IERROR <BR></tt>  
 <tt> MPI_GROUP_TRANSLATE_RANKS(GROUP1, N, RANKS1, GROUP2, RANKS2, IERROR)<BR> INTEGER GROUP1, N, RANKS1(*), GROUP2, RANKS2(*), IERROR <BR></tt>  
 <tt> MPI_GROUP_UNION(GROUP1, GROUP2, NEWGROUP, IERROR)<BR> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <BR></tt>  
 <tt> MPI_INTERCOMM_CREATE(LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR)<BR> INTEGER LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR <BR></tt>  
 <tt> MPI_INTERCOMM_MERGE(INTERCOMM, HIGH, INTRACOMM, IERROR)<BR> INTEGER INTERCOMM, INTRACOMM, IERROR <BR>LOGICAL HIGH <BR></tt>  
 <tt> MPI_TYPE_CREATE_KEYVAL(TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN, TYPE_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN<BR>INTEGER TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
 <tt> MPI_TYPE_DELETE_ATTR(TYPE, TYPE_KEYVAL, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR <BR></tt>    
 <tt> MPI_TYPE_DUP_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_TYPE_FREE_KEYVAL(TYPE_KEYVAL, IERROR)<BR> INTEGER TYPE_KEYVAL, IERROR <BR></tt>   
 <tt> MPI_TYPE_GET_ATTR(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
 <tt> MPI_TYPE_GET_NAME(TYPE, TYPE_NAME, RESULTLEN, IERROR) <BR> INTEGER TYPE, RESULTLEN, IERROR<BR>CHARACTER*(*) TYPE_NAME <BR></tt>  
 <tt> MPI_TYPE_NULL_COPY_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_TYPE_NULL_DELETE_FN(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
 <tt> MPI_TYPE_SET_ATTR(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER TYPE, TYPE_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
 <tt> MPI_TYPE_SET_NAME(TYPE, TYPE_NAME, IERROR) <BR> INTEGER TYPE, IERROR<BR>CHARACTER*(*) TYPE_NAME <BR></tt>  
 <tt> MPI_WIN_CREATE_KEYVAL(WIN_COPY_ATTR_FN, WIN_DELETE_ATTR_FN, WIN_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL WIN_COPY_ATTR_FN, WIN_DELETE_ATTR_FN<BR>INTEGER WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
 <tt> MPI_WIN_DELETE_ATTR(WIN, WIN_KEYVAL, IERROR)<BR> INTEGER WIN, WIN_KEYVAL, IERROR <BR></tt>    
 <tt> MPI_WIN_DUP_FN(OLDWIN, WIN_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDWIN, WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_WIN_FREE_KEYVAL(WIN_KEYVAL, IERROR)<BR> INTEGER WIN_KEYVAL, IERROR <BR></tt>   
 <tt> MPI_WIN_GET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER WIN, WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
 <tt> MPI_WIN_GET_NAME(WIN, WIN_NAME, RESULTLEN, IERROR) <BR> INTEGER WIN, RESULTLEN, IERROR<BR>CHARACTER*(*) WIN_NAME <BR></tt>  
 <tt> MPI_WIN_NULL_COPY_FN(OLDWIN, WIN_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDWIN, WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
 <tt> MPI_WIN_NULL_DELETE_FN(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER WIN, WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
 <tt> MPI_WIN_SET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER WIN, WIN_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
 <tt> MPI_WIN_SET_NAME(WIN, WIN_NAME, IERROR) <BR> INTEGER WIN, IERROR<BR>CHARACTER*(*) WIN_NAME <BR></tt>  
<P> 

<P>
<HR>
<A HREF="node399.htm#Node399"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node396.htm#Node396"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node401.htm#Node401"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node396.htm#Node396"> Fortran Bindings</a>
<b>Next: </b><A HREF="node401.htm#Node401"> Process Topologies Fortran Bindings</a>
<b>Previous: </b><A HREF="node399.htm#Node399"> Collective Communication Fortran Bindings</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

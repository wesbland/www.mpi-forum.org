<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Server Routines</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node214">202. Server Routines</a></H2>
<A HREF="node213.htm#Node213"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node215.htm#Node215"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node215.htm#Node215"> Client Routines</a>
<b>Previous: </b><A HREF="node213.htm#Node213"> Names, Addresses, Ports,  and All That</a>
<P>
A server makes itself available with two routines. First  
it must call <font face="sans-serif"> MPI_OPEN_PORT</font> to establish  
a <font face="sans-serif"> port</font> at which it may be contacted.   
Secondly it must call <font face="sans-serif"> MPI_COMM_ACCEPT</font> to accept  
connections from clients.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_OPEN_PORT(info, port_name)</TD></TR>  
  
<TR><TD> IN info</TD><TD>implementation-specific  
information on how to establish an address (handle)</TD></TR>  
  
<TR><TD> OUT port_name</TD><TD>newly established port (string)</TD></TR>  
</TABLE>  
 <tt> int MPI_Open_port(MPI_Info info, char *port_name) <BR></tt>  
  
 <tt> MPI_OPEN_PORT(INFO, PORT_NAME, IERROR)<BR> CHARACTER*(*) PORT_NAME <BR>INTEGER INFO, IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Open_port(const MPI::Info&amp; info, char* port_name) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
This function establishes a network address, encoded in   
the <font face="sans-serif"> port_name</font> string, at which   
the server will be able to accept connections from clients.   
<font face="sans-serif"> port_name</font> is supplied by the system, possibly  
using information in the <font face="sans-serif"> info</font> argument.   
<P> 
  
<font face="sans-serif"> MPI</font> copies a system-supplied port name into   
<font face="sans-serif"> port_name</font>. <font face="sans-serif"> port_name</font>  
identifies the newly opened port and can be used by a client to contact the  
server.  The maximum size string that may be supplied by the system is  
  
<font face="sans-serif">  MPI_MAX_PORT_NAME</font>.  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
The system copies the port name into <font face="sans-serif"> port_name</font>. The application  
must pass a buffer of sufficient size to hold this value.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
<font face="sans-serif"> port_name</font> is essentially a network address.  
It is unique within the communication universe  
to which it belongs (determined by the implementation),   
and may be used by any client within that  
communication universe.  For instance, if it is an internet  
(host:port) address, it will be unique on the internet. If it is a low  
level switch address on an IBM SP, it will be unique to that SP.  
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
These examples are not meant to constrain implementations.   
A <font face="sans-serif"> port_name</font> could, for instance, contain a user name  
or the name of a batch job, as long as  it is unique within  
some well-defined communication domain. The larger the   
communication domain, the more useful <font face="sans-serif"> MPI</font>'s client/server  
functionality will be.  
 (<em> End of advice to implementors.</em>) <BR> 
The precise form of the address is implementation-defined. For  
instance, an internet address may be a host name or IP address,   
or anything that the implementation can decode into an IP address.   
A port name may be reused after it is freed with  
<font face="sans-serif"> MPI_CLOSE_PORT</font> and released by the system.   
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Since the user may type in <font face="sans-serif"> port_name</font> by hand,   
it is useful to choose a form that is easily readable  
and does not have embedded spaces.   
 (<em> End of advice to implementors.</em>) <BR> 
<font face="sans-serif"> info</font> may be used to tell the implementation  
how to establish the address. It may, and usually will,   
be <font face="sans-serif">  MPI_INFO_NULL</font> in order to get  
the implementation defaults.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CLOSE_PORT(port_name)</TD></TR>  
<TR><TD> IN port_name</TD><TD>a port (string)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Close_port(char *port_name) <BR></tt>  
 <tt> MPI_CLOSE_PORT(PORT_NAME, IERROR)<BR> CHARACTER*(*) PORT_NAME <BR>INTEGER IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Close_port(const char* port_name) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
This function releases the network address represented by   
<font face="sans-serif"> port_name</font>.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_ACCEPT(port_name, info, root, comm, newcomm)</TD></TR>  
<TR><TD> IN port_name</TD><TD>port name (string, used only on  
<font face="sans-serif"> root</font>)</TD></TR>  
<TR><TD> IN info</TD><TD>implementation-dependent information (handle, used  
only on <font face="sans-serif"> root</font>)</TD></TR>  
<TR><TD> IN root</TD><TD>rank in <font face="sans-serif"> comm</font> of root node (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>intracommunicator over which call is collective  
(handle)</TD></TR>  
<TR><TD> OUT newcomm</TD><TD>intercommunicator with client as remote group  
(handle)</TD></TR>  
</TABLE>  
  
 <tt> int MPI_Comm_accept(char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm) <BR></tt>  
 <tt> MPI_COMM_ACCEPT(PORT_NAME, INFO, ROOT, COMM, NEWCOMM, IERROR)<BR> CHARACTER*(*) PORT_NAME <BR>INTEGER INFO, ROOT, COMM, NEWCOMM, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Intercomm MPI::Intracomm::Accept(const char* port_name, const MPI::Info&amp; info, int root) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_COMM_ACCEPT</font> establishes communication with a client.   
It is collective over the calling communicator. It returns an  
intercommunicator that allows communication with the client.  
<P> 
The <font face="sans-serif"> port_name</font> must have been established  
through a call to <font face="sans-serif"> MPI_OPEN_PORT</font>.   
<P> 
<font face="sans-serif"> info</font> is a implementation-defined string that   
may allow fine control over the <font face="sans-serif"> ACCEPT</font> call.   
<P> 

<P>
<HR>
<A HREF="node213.htm#Node213"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node212.htm#Node212"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node215.htm#Node215"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node212.htm#Node212"> Establishing Communication</a>
<b>Next: </b><A HREF="node215.htm#Node215"> Client Routines</a>
<b>Previous: </b><A HREF="node213.htm#Node213"> Names, Addresses, Ports,  and All That</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

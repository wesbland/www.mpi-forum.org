<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Starting Multiple Executables and Establishing Communication</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node208">197. Starting Multiple Executables and Establishing Communication</a></H2>
<A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node205.htm#Node205"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node209.htm#Node209"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node205.htm#Node205"> Process Manager Interface</a>
<b>Next: </b><A HREF="node209.htm#Node209"> Reserved Keys</a>
<b>Previous: </b><A HREF="node207.htm#Node207"> Starting Processes and Establishing Communication</a>
<P>
  
<P> 
While <font face="sans-serif"> MPI_COMM_SPAWN</font> is sufficient for most cases, it does  
not allow the spawning of multiple binaries, or of the same  
binary with multiple sets of arguments.   
The following routine spawns multiple binaries or the same binary  
with multiple sets of arguments, establishing communication with them   
and placing them in the same  <font face="sans-serif">  MPI_COMM_WORLD</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SPAWN_MULTIPLE(count,  
array_of_commands, array_of_argv, array_of_maxprocs,   
array_of_info, root, comm, intercomm, array_of_errcodes)</TD></TR>  
  
<TR><TD> IN count</TD><TD>number of commands   
(positive integer, significant to <font face="sans-serif"> MPI</font> only at root --- see advice to users)</TD></TR>  
  
<TR><TD> IN array_of_commands</TD><TD>programs to be executed  
(array of strings, significant only at root)</TD></TR>  
<TR><TD> IN array_of_argv</TD><TD>arguments for <font face="sans-serif"> commands</font> (array  
of array of strings, significant only at root)</TD></TR>  
<TR><TD> IN array_of_maxprocs</TD><TD>maximum number of processes to start for   
each command (array of integer, significant only at root)</TD></TR>  
<TR><TD> IN array_of_info</TD><TD>info objects telling the runtime system where  
and how to start processes (array of handles, significant only at root)</TD></TR>  
<TR><TD> IN root</TD><TD>rank of process in which previous arguments are   
examined (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>intracommunicator containing group of spawning processes (handle)</TD></TR>  
<TR><TD> OUT intercomm</TD><TD>intercommunicator between original group and  
newly spawned group (handle)</TD></TR>  
<TR><TD> OUT array_of_errcodes</TD><TD>one error code per process  
(array of integer)</TD></TR>  
</TABLE>  
 <tt> int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[], int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) <BR></tt>   
 <tt> MPI_COMM_SPAWN_MULTIPLE(COUNT, ARRAY_OF_COMMANDS, ARRAY_OF_ARGV, ARRAY_OF_MAXPROCS, ARRAY_OF_INFO, ROOT, COMM, INTERCOMM, ARRAY_OF_ERRCODES, IERROR)<BR> INTEGER COUNT, ARRAY_OF_INFO(*), ARRAY_OF_MAXPROCS(*), ROOT, COMM, INTERCOMM, ARRAY_OF_ERRCODES(*), IERROR <BR>CHARACTER*(*) ARRAY_OF_COMMANDS(*), ARRAY_OF_ARGV(COUNT, *) <BR></tt>  
 <font color="red">{<font color="black"> MPI::Intercomm MPI::Intracomm::Spawn_multiple(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const MPI::Info array_of_info[], int root, int array_of_errcodes[]) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
 <font color="red">{<font color="black"> MPI::Intercomm MPI::Intracomm::Spawn_multiple(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const MPI::Info array_of_info[], int root) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> is identical to <font face="sans-serif"> MPI_COMM_SPAWN</font> except  
that there are multiple executable specifications. The first argument,   
<font face="sans-serif"> count</font>, gives the number of specifications. Each of the  
next four arguments are simply arrays of the corresponding arguments  
in <font face="sans-serif"> MPI_COMM_SPAWN</font>.   
For the Fortran version of <font face="sans-serif"> array_of_argv</font>, the element  
<font face="sans-serif"> array_of_argv(i,j)</font> is the   
<font face="sans-serif"> j</font>-th   
argument to command number <font face="sans-serif"> i</font>.   
  
 
<BR> 
<em> Rationale.</em>  
<P> 
This may seem backwards to   
Fortran programmers who are familiar with Fortran's   
column-major ordering. However, it is necessary to do   
it this way to allow <font face="sans-serif"> MPI_COMM_SPAWN</font> to sort out  
arguments. Note that the leading dimension of   
<font face="sans-serif"> array_of_argv</font> <em> must</em> be the same as  
<font face="sans-serif"> count</font>.   
 (<em> End of rationale.</em>) <BR> 
  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
The argument <font face="sans-serif"> count</font> is interpreted by <font face="sans-serif"> MPI</font> only at the root,   
as is <font face="sans-serif"> array_of_argv</font>. Since the leading dimension  
of <font face="sans-serif"> array_of_argv</font> is <font face="sans-serif"> count</font>, a non-positive  
value of <font face="sans-serif"> count</font> at a non-root node could theoretically  
cause a runtime bounds check error, even though   
<font face="sans-serif"> array_of_argv</font> should be ignored by the   
subroutine. If this happens, you should explicitly   
supply a reasonable value of <font face="sans-serif"> count</font> on the non-root  
nodes.   
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
In any language, an application may use the constant  
<font face="sans-serif">  MPI_ARGVS_NULL</font> (which is likely to be <tt> (char ***)0</tt> in C)  
to specify that no arguments should be passed to any  
commands. The effect of setting individual elements of <font face="sans-serif"> array_of_argv</font>  
to <font face="sans-serif"> MPI_ARGV_NULL</font> is not defined. To specify arguments  
for some commands but not others, the commands without  
arguments should have a corresponding <font face="sans-serif"> argv</font> whose  
first element is null (<tt> (char *)0</tt> in C and empty string in Fortran).   
<P> 
All of the spawned processes have the same  
<font face="sans-serif">  MPI_COMM_WORLD</font>. Their ranks in <font face="sans-serif">  MPI_COMM_WORLD</font>  
correspond directly to the order in which the commands are  
specified in <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>. Assume  
that <I>m<SUB>1</SUB></I> processes are generated by the first command, <I>m<SUB>2</SUB></I> by   
the second, etc.   
The processes  
corresponding to the first command have ranks <I>0, 1, ..., 
m<SUB>1</SUB>-1</I>. The processes in the second command have ranks  
<I>m<SUB>1</SUB>, m<SUB>1</SUB>+1, ..., m<SUB>1</SUB>+m<SUB>2</SUB>-1</I>. The processes in the third  
have ranks <I>m<SUB>1</SUB>+m<SUB>2</SUB>, m<SUB>1</SUB>+m<SUB>2</SUB>+1, ..., m<SUB>1</SUB>+m<SUB>2</SUB>+m<SUB>3</SUB>-1</I>, etc.   
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
Calling <font face="sans-serif"> MPI_COMM_SPAWN</font> multiple times  
would create many sets of children with different <font face="sans-serif">  MPI_COMM_WORLD</font>s  
whereas <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> creates children with  
a single <font face="sans-serif">  MPI_COMM_WORLD</font>, so the two methods  
are not completely equivalent.   
There are also two performance-related reasons why,   
if you need to spawn multiple executables, you may want to  use  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> instead of calling <font face="sans-serif"> MPI_COMM_SPAWN</font>  
several times. First, spawning several  
things at once may be faster than spawning them sequentially. Second,   
in some implementations,   
communication between processes spawned at the same time may be  
faster than communication between processes spawned separately.   
 (<em> End of advice to users.</em>) <BR> 
The <font face="sans-serif"> array_of_errcodes</font> argument is   
a  
1-dimensional array of size <IMG WIDTH=42 HEIGHT=12 SRC="img131.gif">
,   
where <I>n<SUB>i</SUB></I> is the   
<I>i</I>-th   
element of <font face="sans-serif"> array_of_maxprocs</font>.   
Command number <I>i</I> corresponds to the <I>n<SUB>i</SUB></I> contiguous  
slots in this array from element <IMG WIDTH=36 HEIGHT=15 SRC="img132.gif">
  
to <IMG WIDTH=64 HEIGHT=19 SRC="img133.gif">
.  
Error codes are treated  
as for <font face="sans-serif"> MPI_COMM_SPAWN</font>.  
<P> 
<BR><b> Example</b> Examples of <font face="sans-serif"> array_of_argv</font> in C and Fortran  
  
 To run the program ``ocean'' with arguments ``-gridfile'' and  
``ocean1.grd'' and the program ``atmos'' with argument ``atmos.grd''  
in C:  
<BR> 
<pre><tt>       char *array_of_commands[2] = {"ocean", "atmos"}; 
       char **array_of_argv[2]; 
       char *argv0[] = {"-gridfile", "ocean1.grd", (char *)0}; 
       char *argv1[] = {"atmos.grd", (char *)0}; 
       array_of_argv[0] = argv0; 
       array_of_argv[1] = argv1; 
       MPI_Comm_spawn_multiple(2, array_of_commands, array_of_argv, ...); 
</tt></pre> 
Here's how you do it in Fortran:  
<BR> 
<pre><tt>       CHARACTER*25 commands(2), array_of_argv(2, 3) 
       commands(1) = ' ocean ' 
       array_of_argv(1, 1) = ' -gridfile ' 
       array_of_argv(1, 2) = ' ocean1.grd' 
       array_of_argv(1, 3) = ' ' 
 
       commands(2) = ' atmos ' 
       array_of_argv(2, 1) = ' atmos.grd ' 
       array_of_argv(2, 2) = ' ' 
 
       call MPI_COMM_SPAWN_MULTIPLE(2, commands, array_of_argv, ...) 
</tt></pre> 
  
<P> 

<P>
<HR>
<A HREF="node207.htm#Node207"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node205.htm#Node205"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node209.htm#Node209"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node205.htm#Node205"> Process Manager Interface</a>
<b>Next: </b><A HREF="node209.htm#Node209"> Reserved Keys</a>
<b>Previous: </b><A HREF="node207.htm#Node207"> Starting Processes and Establishing Communication</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

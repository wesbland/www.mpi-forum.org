<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Datatypes for File Interoperability</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node289">266. Datatypes for File Interoperability</a></H2>
<A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<b>Next: </b><A HREF="node290.htm#Node290"> External Data Representation: ``external32''</a>
<b>Previous: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<P>
  
<P> 
  
If the file data representation is other than ``native,'' care  
must be taken in constructing etypes and filetypes.  Any of the  
datatype constructor functions may be used; however, for those  
functions that accept displacements in bytes, the displacements  
must be specified in terms of their values in the file for the   
file data representation being used.  
  
<font face="sans-serif"> MPI</font> will interpret these byte displacements as is;  
no scaling will be done.  
  
The function  
<font face="sans-serif"> MPI_FILE_GET_TYPE_EXTENT</font> can be used to calculate  
the extents of datatypes in the file.    
  
For etypes and filetypes that are portable datatypes  
(see Section <a href="node19.htm#Node19">Semantic Terms 
</a>, page <a href="node19.htm#Node19">Semantic Terms 
</a>),  
<font face="sans-serif"> MPI</font> will scale any displacements in the datatypes  
to match the file data representation.  
  
Datatypes passed as   
arguments to read/write routines specify the data layout in  
memory; therefore, they must always be constructed using  
displacements corresponding to displacements in memory.  
<P> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
  
One can logically think of the file as if it were stored in the memory of a  
file server.  The <font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font> are interpreted  
as if they were defined at this file server, by the same sequence of  
calls used to define them at the calling process.  If the data  
representation is ``native'', then this logical file server runs on the  
same architecture as the calling process, so that these types define  
the same data layout on the file as they would define in the memory of  
the calling process.  If the <font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font> are  
portable datatypes, then the data layout defined in the file is the  
same as would be defined in the calling process memory, up to a scaling  
factor.  The routine   
<font color="red"><font color="black"><font face="sans-serif"> MPI_FILE_GET_FILE_EXTENT</font>   
can be used to  
calculate this scaling factor.  Thus, two equivalent, portable  
datatypes will define the same data layout in the file, even in a  
heterogeneous environment with ``internal'', ``external32'', or user  
defined data representations.  Otherwise, the <font face="sans-serif"> etype</font> and  
<font face="sans-serif"> filetype</font> must be constructed so that their typemap and extent  
are the same on any architecture.  This can be achieved if   
they   
have an explicit upper bound and lower bound (defined either using  
<font face="sans-serif">  MPI_LB</font> and <font face="sans-serif">  MPI_UB</font> markers, or using  
<font face="sans-serif"> MPI_TYPE_CREATE_RESIZED</font>).  This condition must also be  
fulfilled by any datatype that is used in the construction of the  
<font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font>, if this datatype is replicated  
contiguously, either explicitly, by a call to  
<font face="sans-serif"> MPI_TYPE_CONTIGUOUS</font>, or implictly, by a blocklength argument  
that is greater than one.  If an <font face="sans-serif"> etype</font> or <font face="sans-serif"> filetype</font> is  
not portable, and has a typemap or extent that is architecture  
dependent, then the data layout specified by it on a file is  
implementation dependent.  
  
<P> 
File data representations other than ``native'' may  
be different from corresponding data representations in  
memory.  Therefore, for these file data representations,  
it is important not to use hardwired byte offsets for  
file positioning, including the initial displacement that  
specifies the view.  
When a portable datatype  
(see Section <a href="node19.htm#Node19">Semantic Terms 
</a>, page <a href="node19.htm#Node19">Semantic Terms 
</a>)  
is used in a data access operation,   
any holes in the datatype are scaled to match the data representation.  
However,  
note that this technique only works when all the processes  
that created the file view build their etypes from the same  
predefined datatypes.  
For example, if one  
process  
  
uses an etype built from <font face="sans-serif">  MPI_INT</font>  
and another uses an etype built from <font face="sans-serif">  MPI_FLOAT</font>,  
the resulting views  
may  
  
be nonportable because the relative  
sizes of these types may differ from one data representation to another.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_GET_TYPE_EXTENT(fh, datatype, extent)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype (handle)</TD></TR>  
<TR><TD> OUT extent</TD><TD>datatype extent (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent) <BR></tt>  
 <tt> MPI_FILE_GET_TYPE_EXTENT(FH, DATATYPE, EXTENT, IERROR)<BR> INTEGER FH, DATATYPE, IERROR <BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTENT <BR></tt>  
 <font color="red">{<font color="black"> MPI::Aint MPI::File::Get_type_extent(const MPI::Datatype&amp; datatype) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
Returns the extent of <font face="sans-serif"> datatype</font> in the file <font face="sans-serif"> fh</font>.  
  
This extent will be the same for all processes accessing   
the file <font face="sans-serif"> fh</font>.  
  
If the current view uses a user-defined data representation  
(see Section <a href="node291.htm#Node291">User-Defined Data Representations 
</a>, page <a href="node291.htm#Node291">User-Defined Data Representations 
</a>),  
<font face="sans-serif"> MPI</font> uses the <font face="sans-serif"> dtype_file_extent_fn</font> callback  
to calculate the extent.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
In the case of user-defined data representations,  
the extent of a derived datatype can be calculated    
by first determining the extents of the predefined datatypes  
in this derived datatype using <font face="sans-serif"> dtype_file_extent_fn</font>  
(see Section <a href="node291.htm#Node291">User-Defined Data Representations 
</a>, page <a href="node291.htm#Node291">User-Defined Data Representations 
</a>).  
 (<em> End of advice to implementors.</em>) <BR> 
  
<P> 

<P>
<HR>
<A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node288.htm#Node288"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node290.htm#Node290"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<b>Next: </b><A HREF="node290.htm#Node290"> External Data Representation: ``external32''</a>
<b>Previous: </b><A HREF="node288.htm#Node288"> File Interoperability</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

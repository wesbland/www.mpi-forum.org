<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Introduction</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node201">190. Introduction</a></H1>
<A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node202.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node202.htm#Node202"> The Dynamic Process Model</a>
<b>Previous: </b><A HREF="node200.htm#Node200"> Process Creation and Management</a>
<P>
  
<P> 
  
<font face="sans-serif"> MPI</font> is primarily concerned with communication rather than process or   
resource management.  However, it is necessary to address these issues   
to some degree in order to define a useful framework for communication.    
This chapter presents a set of <font face="sans-serif"> MPI</font> interfaces that allow for   
a variety of approaches to process management while placing minimal   
restrictions on the execution environment.  
<P> 
The <font face="sans-serif"> MPI</font> model for process creation allows both the creation   
of an intial set of processes related by their membership in a common   
<font face="sans-serif">  MPI_COMM_WORLD</font> and the creation and management of processes  
after an <font face="sans-serif"> MPI</font> application has been started.    
A major impetus for the later form of process creation comes   
from the PVM [<a href="node433.htm#-Bib23">23</a>] research effort.  This work   
has provided a wealth of experience with process  
management and resource control that illustrates their benefits   
and potential pitfalls.    
<P> 
The <font face="sans-serif"> MPI</font> Forum decided not to address resource   
control because  
it was not able to design a portable interface that would be  
appropriate for the broad spectrum of existing and potential resource and  
process controllers.  Resource control can encompass a wide range of  
abilities, including adding and deleting nodes from a virtual parallel  
machine, reserving and scheduling resources, managing compute  
partitions of an MPP, and returning information about available  
resources.  
assumes that resource control is provided externally --- probably  
by computer vendors, in the case of tightly coupled systems, or by a third  
party software package when the environment is a cluster of workstations.   
<P> 
The reasons for   
including process management in <font face="sans-serif"> MPI</font> are both  
technical and practical.  Important classes of message-passing  
applications require process control. These include task  
farms, serial applications with parallel modules, and problems that  
require a run-time assessment of the number and type of processes that  
should be started.  On the practical side, users of workstation  
clusters who are migrating from PVM to <font face="sans-serif"> MPI</font> may be accustomed to using  
PVM's capabilities for process and resource management. The lack of  
these features   
would be  
a practical stumbling block to migration.  
<P> 
The following goals are central to the design of <font face="sans-serif"> MPI</font> process management:  
  
<ul> 
 
<li>The  
<font face="sans-serif"> MPI</font>  
process model must apply  
to the vast majority of current parallel environments. These  
include everything from tightly integrated MPPs   
to heterogeneous networks of  
workstations.   
 
<li><font face="sans-serif"> MPI</font> must not take over operating system responsibilities.  
It should instead provide a clean interface between an application  
and system software.   
<P> 
 
<li><font face="sans-serif"> MPI</font> must guarantee communication determinism in the presense of  
dynamic processes, i.e.,   
dynamic process management must not introduce unavoidable race  
conditions.   
  
 
<li><font face="sans-serif"> MPI</font> must not contain features that compromise performance.  
<P> 
</ul> 
<BR> 
The  
process management model addresses these issues in two  
ways. First, <font face="sans-serif"> MPI</font> remains primarily a communication library. It  
does not manage the parallel environment in which  
a parallel program executes, though it provides a minimal  
interface between an application and external resource and  
process managers.   
<P> 
Second, <font face="sans-serif"> MPI</font> maintains a consistent concept of a communicator, regardless  
of how its members came into existence.    
A communicator is never changed once created, and it is always  
created using deterministic collective operations.   
<P> 

<P>
<HR>
<A HREF="node200.htm#Node200"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node202.htm#Node202"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node202.htm#Node202"> The Dynamic Process Model</a>
<b>Previous: </b><A HREF="node200.htm#Node200"> Process Creation and Management</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Semantics</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node335">305. Semantics</a></H2>
<A HREF="node334.htm#Node334"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node330.htm#Node330"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node336.htm#Node336"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node330.htm#Node330"> C++</a>
<b>Next: </b><A HREF="node336.htm#Node336"> C++ Datatypes</a>
<b>Previous: </b><A HREF="node334.htm#Node334"> Class Member Functions for <font face="sans-serif"> MPI</font></a>
<P>
  
<P> 
  
<P> 
The semantics of the member functions constituting the C++ language  
binding for <font face="sans-serif"> MPI</font> are specified by the <font face="sans-serif"> MPI</font> function description  
itself.  Here, we specify the semantics for those portions of the C++  
language interface that are not part of the language binding.  
In this subsection, functions are prototyped using the type  
<tt> MPI::&lt;CLASS&gt;</tt> rather than listing each function  
for every <font face="sans-serif"> MPI</font> class; the word <tt> &lt;CLASS&gt;</tt> can be  
replaced with any valid <font face="sans-serif"> MPI</font> class name (e.g., <tt> Group</tt>),  
  
except as noted.  
  
<P> 
<P> 
Construction / Destruction The default constructor and destructor are prototyped as follows:  
<P> 
  
 <font color="red">{<font color="black">  MPI::&lt;CLASS&gt;() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>   
 <font color="red">{<font color="black">  <IMG WIDTH=6 HEIGHT=2 SRC="img154.gif">
MPI::&lt;CLASS&gt;() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
In terms of construction and destruction, opaque <font face="sans-serif"> MPI</font> user level  
objects behave like handles.  Default constructors for all <font face="sans-serif"> MPI</font>  
objects   
  
except <font face="sans-serif"> MPI::Status</font>  
  
create corresponding   
<font face="sans-serif">  MPI::*_NULL</font>   
handles.  That  
is, when an <font face="sans-serif"> MPI</font> object is instantiated, comparing it with its  
corresponding   
<font face="sans-serif">  MPI::*_NULL</font>   
object will return <tt> true</tt>.  
The default constructors do not create new <font face="sans-serif"> MPI</font> opaque objects.  Some  
classes have a member function <tt> Create()</tt> for this purpose.  
<P> 
  
<BR><b> Example</b>  
  In the following code fragment, the test will return <tt> true</tt> and  
  the message will be sent to <tt> cout</tt>.  
<P> 
<BR> 
<pre><tt>void foo() 
{ 
  MPI::Intracomm bar; 
 
  if (bar == MPI::COMM_NULL)  
    cout &lt;&lt; "bar is MPI::COMM_NULL" &lt;&lt; endl; 
} 
</tt></pre> 
  
  
  <P> 
The destructor for each <font face="sans-serif"> MPI</font> user level object does <em> not</em> invoke  
the corresponding <font face="sans-serif"> MPI_*_FREE</font> function (if it exists).  
  <P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI_*_FREE</font> functions are not automatically invoked for  
  the following reasons:  
  <ol> 
   
1. Automatic destruction contradicts the shallow-copy semantics  
    of the <font face="sans-serif"> MPI</font> classes.  
<P> 
 
<BR> 
2. The model put forth in <font face="sans-serif"> MPI</font> makes memory allocation and  
    deallocation the responsibility of the user, not the implementation.  
    <P> 
 
<BR> 
3. Calling <font face="sans-serif"> MPI_*_FREE</font> upon destruction could have  
    unintended side effects, including triggering collective  
    operations (this also affects the copy, assignment, and  
    construction semantics).  In the following example, we would want  
    neither <tt> foo_comm</tt> nor <tt> bar_comm</tt> to automatically invoke  
    <font face="sans-serif"> MPI_*_FREE</font> upon exit from the function.  
  
<BR> 
<pre><tt>void example_function()  
{ 
  MPI::Intracomm foo_comm(MPI::COMM_WORLD), bar_comm; 
  bar_comm = MPI::COMM_WORLD.Dup(); 
  // rest of function 
} 
</tt></pre> 
</ol> 
 (<em> End of rationale.</em>) <BR> 
<P> 
Copy / Assignment The copy constructor and assignment operator are prototyped as follows:  
<P> 
  
 <font color="red">{<font color="black">  MPI::&lt;CLASS&gt;(const MPI::&lt;CLASS&gt;&amp; data) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black">  MPI::&lt;CLASS&gt;&amp; MPI::&lt;CLASS&gt;::operator=(const MPI::&lt;CLASS&gt;&amp; data) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
In terms of copying and assignment, opaque <font face="sans-serif"> MPI</font> user level objects  
behave like handles.  Copy constructors perform handle-based (shallow)  
copies.  
<tt> MPI::Status</tt> objects are exceptions to this rule.  These  
objects perform deep copies for assignment and copy construction.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Each <font face="sans-serif"> MPI</font> user level object is likely to contain, by value or by  
  reference, implementation-dependent state information.  The  
  assignment and copying of <font face="sans-serif"> MPI</font> object handles may simply copy this  
  value (or reference).  
 (<em> End of advice to implementors.</em>) <BR> 
  
<BR><b> Example</b>  
  Example using assignment operator.  In this example, <tt>  
    MPI::Intracomm::Dup()</tt> is <em> not</em> called for <tt> foo_comm</tt>.  The  
    object <tt> foo_comm</tt> is simply an alias for <tt>  
    MPI::COMM_WORLD</tt>.  But <tt> bar_comm</tt> is created with a call to  
    <tt> MPI::Intracomm::Dup()</tt> and is therefore a different communicator  
    than <tt> foo_comm</tt> (and thus different from <tt>  
    MPI::COMM_WORLD</tt>).    
   
<tt> baz_comm</tt> becomes an alias for <tt> bar_comm</tt>.  If one   
of <tt> bar_comm</tt> or <tt> baz_comm</tt>  
is freed with <font face="sans-serif"> MPI_COMM_FREE</font> it will be set to   
<font face="sans-serif">  MPI::COMM_NULL</font>.  The state of the other handle will be  
    undefined --- it will be invalid, but not  
    necessarily set to <font face="sans-serif">  MPI::COMM_NULL</font>.  
  
  <P> 
<BR> 
<pre><tt>  MPI::Intracomm foo_comm, bar_comm, baz_comm; 
 
  foo_comm = MPI::COMM_WORLD; 
  bar_comm = MPI::COMM_WORLD.Dup(); 
  baz_comm = bar_comm; 
</tt></pre> 
  
  
<P> 
<P> 
Comparison   
<P> 
The comparison operators are prototyped as follows:  
<P> 
  
 <font color="red">{<font color="black"> bool MPI::&lt;CLASS&gt;::operator==(const MPI::&lt;CLASS&gt;&amp; data) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> bool MPI::&lt;CLASS&gt;::operator!=(const MPI::&lt;CLASS&gt;&amp; data) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
The member function <tt> operator==()</tt> returns <tt> true</tt> only when  
the handles reference the same internal <font face="sans-serif"> MPI</font> object, <tt> false</tt>  
otherwise.  <tt> operator!=()</tt> returns the boolean complement of <tt>  
operator==()</tt>.  
  
However, since the <tt> Status</tt> class is not a handle to an underlying  
<font face="sans-serif"> MPI</font> object, it does not make sense to compare <tt> Status</tt> instances.  
Therefore, the <tt> operator==()</tt> and <tt> operator!=()</tt> functions are not  
defined on the <tt> Status</tt> class.   
  
<P> 
  
<P> 
Constants Constants are singleton objects and are declared <tt> const</tt>.  Note  
that not all globally defined <font face="sans-serif"> MPI</font> objects are constant.  For  
example, <tt> MPI::COMM_WORLD</tt> and <tt> MPI::COMM_SELF</tt> are not <tt>  
    const</tt>.  
  
<P> 

<P>
<HR>
<A HREF="node334.htm#Node334"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node330.htm#Node330"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node336.htm#Node336"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node330.htm#Node330"> C++</a>
<b>Next: </b><A HREF="node336.htm#Node336"> C++ Datatypes</a>
<b>Previous: </b><A HREF="node334.htm#Node334"> Class Member Functions for <font face="sans-serif"> MPI</font></a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

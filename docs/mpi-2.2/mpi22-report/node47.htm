<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Return Status</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node47">47. Return Status</a></H2>
<A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node42.htm#Node42"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node48.htm#Node48"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node42.htm#Node42"> Blocking Send and Receive Operations</a>
<b>Next: </b><A HREF="node48.htm#Node48"> Passing <font face="sans-serif">  MPI_STATUS_IGNORE</font> for Status</a>
<b>Previous: </b><A HREF="node46.htm#Node46"> Blocking Receive</a>
<P>
  
<P> 
The source or tag of a received message may not be known if wildcard  
values were used in the receive operation.  
  
Also, if multiple requests  
are completed by a single <font face="sans-serif"> MPI</font> function (see  
Section <a href="node62.htm#Node62">Multiple Completions 
</a>), a distinct error code may need to be  
returned for each request.  
The information is returned by the <font face="sans-serif"> status</font>  
argument of <font face="sans-serif"> MPI_RECV</font>.  The type of <font face="sans-serif"> status</font> is  
<font face="sans-serif"> MPI</font>-defined.  
Status variables need to be explicitly  
allocated by the user, that is, they are not system objects.  
<P> 
In C, <font face="sans-serif"> status</font> is a structure that contains three fields named  
<font face="sans-serif">  MPI_SOURCE</font>, <font face="sans-serif">  MPI_TAG</font>, and <font face="sans-serif">  MPI_ERROR</font>; the  
structure may contain additional fields.  Thus, <font face="sans-serif"> status.MPI_SOURCE</font>,  
<font face="sans-serif"> status.MPI_TAG</font> and <font face="sans-serif"> status.MPI_ERROR</font> contain the  
source, tag, and error code, respectively, of  
the received message.  
<P> 
In Fortran, <font face="sans-serif"> status</font> is an array of <tt> INTEGER</tt>s of size  
<font face="sans-serif">  MPI_STATUS_SIZE</font>.  The constants <font face="sans-serif">  MPI_SOURCE</font>,  
<font face="sans-serif">  MPI_TAG</font> and <font face="sans-serif">  MPI_ERROR</font>  
are the indices of the entries that store the  
source, tag and error fields.  Thus, <font face="sans-serif"> status(MPI_SOURCE)</font>,  
<font face="sans-serif"> status(MPI_TAG)</font> and <font face="sans-serif"> status(MPI_ERROR)</font>  
contain, respectively, the source,  
tag and error code of the received message.  
 <P> 
In C++, the <font face="sans-serif"> status</font> object is handled through the following methods:  
   
 <font color="red">{<font color="black"> int MPI::Status::Get_source() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> void MPI::Status::Set_source(int source) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> int MPI::Status::Get_tag() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> void MPI::Status::Set_tag(int tag) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> int MPI::Status::Get_error() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
 <font color="red">{<font color="black"> void MPI::Status::Set_error(int error) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
In general, message-passing calls do not modify the value of the error  
code field of status variables.  This field may be updated only by  
the functions in Section <a href="node62.htm#Node62">Multiple Completions 
</a> which return multiple  
statuses.  The field is updated if and only if such function returns with  
an error code of <font face="sans-serif">  MPI_ERR_IN_STATUS</font>.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The error field in status is not needed for calls that return only one  
status, such as <font face="sans-serif"> MPI_WAIT</font>, since that would only duplicate the  
information returned by the function itself.  The current design  
avoids the additional overhead of setting it, in such cases.  The field  
is needed for calls that return multiple statuses, since each request  
may have had a different failure.  
 (<em> End of rationale.</em>) <BR> 
  
<P> 
The status argument also returns information on the length of the message  
received.  However, this information is not directly available as a field  
of the status variable and a call to <font face="sans-serif"> MPI_GET_COUNT</font> is required  
to ``decode'' this information.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GET_COUNT(status, datatype, count)</TD></TR>  
<TR><TD> IN status</TD><TD>return status of receive operation (Status)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each receive buffer entry (handle)</TD></TR>  
<TR><TD> OUT count</TD><TD>number of received entries (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count) <BR></tt>  
  
<P> 
 <tt> MPI_GET_COUNT(STATUS, DATATYPE, COUNT, IERROR)<BR> INTEGER  STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERROR <BR></tt>  
 <font color="red">{<font color="black"> int MPI::Status::Get_count(const MPI::Datatype&amp; datatype) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
Returns the number of entries received.  (Again, we count <em> entries</em>, each of  
type <em> datatype</em>, not <em> bytes</em>.)  
The <font face="sans-serif"> datatype</font> argument should match  
the argument provided by the receive call that set the <font face="sans-serif"> status</font> variable.  
(We shall later see, in Section <a href="node80.htm#Node80">Use of General Datatypes in Communication 
</a>, that  
<font face="sans-serif"> MPI_GET_COUNT</font> may return, in certain situations, the value  
<font face="sans-serif">  MPI_UNDEFINED</font>.)  
  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
Some message-passing libraries use <font face="sans-serif">  INOUT</font> <font face="sans-serif"> count</font>,  
<font face="sans-serif"> tag</font> and <font face="sans-serif"> source</font> arguments, thus using them both to specify  
the selection criteria for incoming messages and return the actual envelope  
values of the received message.  
The use of a separate status argument prevents errors that are often attached  
with <font face="sans-serif">  INOUT</font> argument (e.g., using the  
<font face="sans-serif">  MPI_ANY_TAG</font> constant as  
the tag in a receive).  
Some libraries use calls that refer implicitly to the ``last message  
received.''  This is not thread safe.  
<P> 
The <font face="sans-serif"> datatype</font> argument is passed to <font face="sans-serif"> MPI_GET_COUNT</font> so as to  
improve performance. A message might be received without counting the number  
of elements it contains, and the count value is often not needed.  
Also, this allows the same function to be used after a call to  
  
<font face="sans-serif"> MPI_PROBE</font> or <font face="sans-serif"> MPI_IPROBE</font>. With a status from <font face="sans-serif"> MPI_PROBE</font> or <font face="sans-serif"> MPI_IPROBE</font>,  
the same datatypes are allowed as in a call to <font face="sans-serif"> MPI_RECV</font> to receive this message.  
 (<em> End of rationale.</em>) <BR> 
The value returned as the <font face="sans-serif"> count</font> argument of  
<font face="sans-serif"> MPI_GET_COUNT</font> for a datatype of length zero where zero bytes  
have been transferred is zero.  If the number of bytes transfered is  
greater than zero, <font face="sans-serif">  MPI_UNDEFINED</font> is returned.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
Zero-length datatypes may be created in a number of cases.    
An important case is  
<font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font>, where the  
definition of the particular   
darray   
results in an empty block on some  
<font face="sans-serif"> MPI</font> process.  Programs written in an SPMD style will not check for  
this special case and may want to use <font face="sans-serif"> MPI_GET_COUNT</font> to check  
the status.    
 (<em> End of rationale.</em>) <BR> 
   
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
The buffer size required for the receive can be affected by data conversions and  
by the stride of the receive datatype.  
In most cases, the safest approach is to use the same datatype with <font face="sans-serif"> MPI_GET_COUNT</font> and the receive.  
 (<em> End of advice to users.</em>) <BR> 
  
All send and receive operations use the <font face="sans-serif"> buf</font>, <font face="sans-serif"> count</font>,<font face="sans-serif">   
datatype</font>, <font face="sans-serif"> source</font>, <font face="sans-serif"> dest</font>, <font face="sans-serif"> tag</font>,  
<font face="sans-serif"> comm</font> and <font face="sans-serif"> status</font> arguments in the same way as the blocking  
<font face="sans-serif"> MPI_SEND</font> and  
<font face="sans-serif"> MPI_RECV</font> operations described in this section.  
  
  
  

<P>
<HR>
<A HREF="node46.htm#Node46"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node42.htm#Node42"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node48.htm#Node48"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node42.htm#Node42"> Blocking Send and Receive Operations</a>
<b>Next: </b><A HREF="node48.htm#Node48"> Passing <font face="sans-serif">  MPI_STATUS_IGNORE</font> for Status</a>
<b>Previous: </b><A HREF="node46.htm#Node46"> Blocking Receive</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-ei/ei-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Generalized Requests</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node254">239. Generalized Requests</a></H1>
<A HREF="node253.htm#Node253"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node255.htm#Node255"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node255.htm#Node255"> Examples</a>
<b>Previous: </b><A HREF="node253.htm#Node253"> Introduction</a>
<P>
  
<P> 
The goal of   
generalized requests   
is to allow users to define new  
nonblocking operations.  Such an outstanding nonblocking operation is  
represented by a (generalized) request.  A fundamental property of   
nonblocking operations is that progress toward the completion of this  
operation occurs asynchronously, i.e., concurrently with normal program  
execution.  Typically, this requires execution of code concurrently  
with the execution of the user code, e.g., in a separate thread or in a  
signal handler.  Operating systems provide a variety of mechanisms in  
support of concurrent execution.  
<font face="sans-serif"> MPI</font> does not attempt to standardize or   
replace these mechanisms: it is assumed  
programmers who wish to define new asynchronous operations will use  
the  mechanisms provided by the underlying operating system.   
Thus, the calls in this section only provide a means for  
defining the effect of <font face="sans-serif"> MPI</font> calls such as <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_CANCEL</font> when they apply to generalized requests, and for  
signaling to <font face="sans-serif"> MPI</font> the completion of a generalized operation.   
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
It is tempting to also define an <font face="sans-serif"> MPI</font> standard mechanism for  
achieving concurrent execution of  
user-defined nonblocking operations.    
  
However, it is very difficult to define such a mechanism without  
consideration of the specific mechanisms used in the operating system.  
  
The Forum feels that concurrency mechanisms are a proper part  
of the underlying operating system and should not be standardized by  
<font face="sans-serif"> MPI</font>; the <font face="sans-serif"> MPI</font> standard should only deal with the interaction of  
such mechanisms with <font face="sans-serif"> MPI</font>.  
 (<em> End of rationale.</em>) <BR> 
For a regular request, the operation associated with the request is  
performed by the <font face="sans-serif"> MPI</font> implementation, and the operation  
completes without intervention by the application.  For a generalized  
request, the operation associated with the request is performed by the  
application; therefore, the application must notify <font face="sans-serif"> MPI</font> when the  
  
operation completes.  This is done by making a call to  
  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font>.    
<font face="sans-serif"> MPI</font> maintains the ``completion'' status of generalized requests.  Any  
other request state has to be maintained by the user.   
 <P> 
A new generalized request is started with  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GREQUEST_START(query_fn, free_fn, cancel_fn, extra_state, request)</TD></TR>  
<TR><TD> IN query_fn</TD><TD>callback function invoked when request status is queried (function)</TD></TR>  
<TR><TD> IN free_fn</TD><TD>callback function invoked when request is freed (function)</TD></TR>  
<TR><TD> IN cancel_fn</TD><TD>callback function invoked when request is cancelled (function)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state</TD></TR>  
<TR><TD> OUT request</TD><TD>generalized request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_GREQUEST_START(QUERY_FN, FREE_FN, CANCEL_FN, EXTRA_STATE, REQUEST, IERROR)<BR> INTEGER REQUEST, IERROR<BR>EXTERNAL QUERY_FN, FREE_FN, CANCEL_FN<BR>INTEGER (KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
<P> 
<font color="red">  
 <font color="red">{<font color="black"> static MPI::Grequest MPI::Grequest::Start(const MPI::Grequest::Query_function* query_fn, const MPI::Grequest::Free_function* free_fn, const MPI::Grequest::Cancel_function* cancel_fn, void *extra_state) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<font color="black">  
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Note that a generalized request belongs, in C++, to the class  
<font face="sans-serif"> MPI::Grequest</font>, which is a derived class of <font face="sans-serif"> MPI::Request</font>.  
It is of the same type as regular requests, in C and Fortran.  
 (<em> End of advice to users.</em>) <BR> 
The call starts a generalized request and returns a handle to it in  
<font face="sans-serif"> request</font>.  
<P> 
The syntax and meaning of the callback functions are listed below.  
All callback functions are passed the <font face="sans-serif"> extra_state</font> argument  
that was associated with the request by the starting call  
<font face="sans-serif"> MPI_GREQUEST_START</font>.  This can be used to maintain user-defined  
state for the request.    
  
In   
C, the query function is  
  
<P> 
 <tt> typedef int MPI_Grequest_query_function(void *extra_state, MPI_Status *status); <BR></tt>   
<P> 
<BR>  
in Fortran  
<P> 
  
<P> 
  
 <tt> SUBROUTINE GREQUEST_QUERY_FUNCTION(EXTRA_STATE, STATUS, IERROR)<BR> INTEGER STATUS(MPI_STATUS_SIZE), IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
  
<P> 
<BR>  
and in C++  
<P> 
  
<P> 
 <font color="red">{<font color="black"><tt> typedef int MPI::Grequest::Query_function(void* extra_state, MPI::Status&amp; status); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
<P> 
<font face="sans-serif"> query_fn</font> function computes the status  
that should be returned for the generalized request.  
The status  
also includes information about successful/unsuccessful cancellation of  
the request (result to be returned by <font face="sans-serif"> MPI_TEST_CANCELLED</font>).  
<P> 
<font face="sans-serif"> query_fn</font> callback is invoked by the   
<font face="sans-serif"> MPI_ {WAIT<I>|</I>TEST }{ANY<I>|</I>SOME<I>|</I>ALL }</font> call that  
completed the generalized request associated with this callback.    
  
  
The callback function  
is also   
invoked by calls to <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font>, if the request is  
complete when the call occurs.  In   
both  
cases, the callback is passed a reference to the corresponding status variable  
passed by the user to the <font face="sans-serif"> MPI</font> call; the status set by the callback  
function is returned by the <font face="sans-serif"> MPI</font> call.   
  
If the user provided <font face="sans-serif">  MPI_STATUS_IGNORE</font> or  
<font face="sans-serif">  MPI_STATUSES_IGNORE</font> to the <font face="sans-serif"> MPI</font> function that causes  
<font face="sans-serif"> query_fn</font> to be called, then <font face="sans-serif"> MPI</font> will pass  
a valid status object to <font face="sans-serif"> query_fn</font>, and this status will be  
ignored upon return of the callback function.    
  
Note that <font face="sans-serif"> query_fn</font>  
is invoked only after   
  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> is called on the request;   
  
it may be invoked several times for  
the same generalized request, e.g., if the user calls  
<font face="sans-serif"> MPI_REQUEST_GET_STATUS</font> several times for this request.  
Note also that a call to   
<font face="sans-serif"> MPI_ {WAIT<I>|</I>TEST }{SOME<I>|</I>ALL }</font> may cause multiple  
invocations of  
<font face="sans-serif"> query_fn</font> callback functions, one for each  
generalized request that is completed by the <font face="sans-serif"> MPI</font> call.  The order of  
these invocations is not specified by <font face="sans-serif"> MPI</font>.  
<P> 
In C, the free function is  
  
<P> 
 <tt> typedef int MPI_Grequest_free_function(void *extra_state); <BR></tt>   
<P> 
<BR>  
and in Fortran  
<P> 
  
<P> 
  
 <tt> SUBROUTINE GREQUEST_FREE_FUNCTION(EXTRA_STATE, IERROR)<BR> INTEGER IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
  
<P> 
<BR>  
and in C++  
<P> 
  
<P> 
 <font color="red">{<font color="black"><tt> typedef int MPI::Grequest::Free_function(void* extra_state); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
<P> 
<font face="sans-serif"> free_fn</font> function is invoked to clean up user-allocated  
resources when the generalized request is freed.   
<P> 
<font face="sans-serif"> free_fn</font> callback is invoked by the   
<font face="sans-serif"> MPI_ {WAIT<I>|</I>TEST }{ANY<I>|</I>SOME<I>|</I>ALL }</font> call that  
completed the generalized request associated with this  
callback. <font face="sans-serif"> free_fn</font> is invoked after the call to  
<font face="sans-serif"> query_fn</font> for the same request.  However, if the <font face="sans-serif"> MPI</font> call  
completed multiple generalized requests, the order in which  
<font face="sans-serif"> free_fn</font> callback functions are invoked is not specified by  
<font face="sans-serif"> MPI</font>.  
 <P> 
<font face="sans-serif"> free_fn</font> callback   
is also invoked for generalized requests that are freed by a call to  
<font face="sans-serif"> MPI_REQUEST_FREE</font> (no call to   
<font face="sans-serif"> WAIT_ {WAIT<I>|</I>TEST }{ANY<I>|</I>SOME<I>|</I>ALL }</font> will occur for  
such a request).  In this case, the callback  
function will be called either in the <font face="sans-serif"> MPI</font> call  
<font face="sans-serif"> MPI_REQUEST_FREE(request)</font>, or in the <font face="sans-serif"> MPI</font> call  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE(request)</font>, whichever happens   
last, i.e.,   
in this case the actual freeing code is executed  
as soon as both calls <font face="sans-serif"> MPI_REQUEST_FREE</font> and  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> have occurred.   
  
The <font face="sans-serif"> request</font> is not deallocated until after  
<font face="sans-serif"> free_fn</font> completes.  
  
Note that <font face="sans-serif"> free_fn</font> will be   
invoked only once per request by a correct program.   
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Calling <font face="sans-serif"> MPI_REQUEST_FREE(request)</font> will cause the  
<font face="sans-serif"> request</font> handle to be set to <font face="sans-serif">  MPI_REQUEST_NULL</font>.  
This handle to the generalized request is no longer valid.  However,  
user copies of this handle are valid until after  
  
<font face="sans-serif"> free_fn</font> completes since <font face="sans-serif"> MPI</font> does not deallocate the object  
until then.  Since <font face="sans-serif"> free_fn</font> is not  
called until after <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font>, the user copy of  
the handle can be used to make this call.  Users should note that  
<font face="sans-serif"> MPI</font> will deallocate the object after <font face="sans-serif"> free_fn</font>  
executes.  At this point, user copies of the <font face="sans-serif"> request</font> handle no  
longer point to a valid request.  <font face="sans-serif"> MPI</font> will not set user copies to  
<font face="sans-serif">  MPI_REQUEST_NULL</font> in this case, so it is up to the user to  
avoid accessing this stale handle.  This is a special case where <font face="sans-serif"> MPI</font>  
defers deallocating the object until a later time that is known by  
the user.  
  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
  
  <P> 
In C, the cancel function is  
<P> 
 <tt> typedef int MPI_Grequest_cancel_function(void *extra_state, int complete); <BR></tt>   
<P> 
<BR>  
in Fortran  
<P> 
  
<P> 
  
 <tt> SUBROUTINE GREQUEST_CANCEL_FUNCTION(EXTRA_STATE, COMPLETE, IERROR)<BR> INTEGER IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE<BR>LOGICAL COMPLETE <BR></tt>  
  
<P> 
<BR>  
and in C++  
<P> 
  
<P> 
 <font color="red">{<font color="black"><tt> typedef int MPI::Grequest::Cancel_function(void* extra_state, bool complete); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
<P> 
<font face="sans-serif"> cancel_fn</font> function is invoked to start the cancelation of  
a generalized request.  
It is called by <font face="sans-serif"> MPI_CANCEL(request)</font>.  
<font face="sans-serif"> MPI</font> passes to the callback function  
<font face="sans-serif"> complete=true</font> if   
  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> was already called on the request,  
and <font face="sans-serif"> complete=false</font> otherwise.  
  
<P> 
All callback functions return an error code.    
  
The code is passed back and dealt with as appropriate for the error  
code by the <font face="sans-serif"> MPI</font> function that invoked the callback function.  For  
example, if error codes are returned then the error code returned by  
the callback function will be returned by the <font face="sans-serif"> MPI</font> function that  
invoked the callback function.  
  
In the case of  
an   
<font face="sans-serif"> MPI_ {WAIT<I>|</I>TEST }{ANY }</font> call that invokes both  
<font face="sans-serif"> query_fn</font> and <font face="sans-serif"> free_fn</font>, the <font face="sans-serif"> MPI</font> call will return  
the error code returned by the last callback, namely  
<font face="sans-serif"> free_fn</font>.  If one or more of the requests in a call to  
<font face="sans-serif"> MPI_ {WAIT<I>|</I>TEST }{SOME<I>|</I>ALL }</font> failed,  
then the <font face="sans-serif"> MPI</font> call will return  
<font face="sans-serif">  MPI_ERR_IN_STATUS</font>.   
  
In such a case, if the <font face="sans-serif"> MPI</font> call was  
passed an array of statuses, then <font face="sans-serif"> MPI</font> will return in each of the  
statuses that correspond to a completed generalized request the error  
code returned by the corresponding invocation of its <font face="sans-serif"> free_fn</font>  
callback function.  However, if the <font face="sans-serif"> MPI</font> function was passed  
<font face="sans-serif">  MPI_STATUSES_IGNORE</font>, then the individual error codes  
returned by each callback functions will be lost.  
  
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> query_fn</font> must <b> not</b> set the error field of  
<font face="sans-serif"> status</font>  
since <font face="sans-serif"> query_fn</font> may be called by <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_TEST</font>, in which case the error field of <font face="sans-serif"> status</font>  
should not change.  The <font face="sans-serif"> MPI</font> library knows the ``context'' in which  
<font face="sans-serif"> query_fn</font> is invoked and can decide correctly when to put  
in the error field of status the returned error code.  
 (<em> End of advice to users.</em>) <BR> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GREQUEST_COMPLETE(request)</TD></TR>  
<TR><TD> INOUT request</TD><TD>generalized request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Grequest_complete(MPI_Request request) <BR></tt>  
<P> 
 <tt> MPI_GREQUEST_COMPLETE(REQUEST, IERROR)<BR> INTEGER REQUEST, IERROR <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> void MPI::Grequest::Complete() <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
  
The call informs <font face="sans-serif"> MPI</font> that the operations represented by the generalized request  
<font face="sans-serif"> request</font> are   
complete (see   
definitions in Section <a href="node19.htm#Node19">Semantic Terms 
</a>).  
A call to <font face="sans-serif"> MPI_WAIT(request, status)</font> will return and a call to  
<font face="sans-serif"> MPI_TEST(request, flag, status)</font> will return <font face="sans-serif"> flag=true</font>  
only after a call to <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> has declared that  
these operations are complete.  
  
<P> 
<font face="sans-serif"> MPI</font> imposes no restrictions on the code executed by the callback functions.  
However, new nonblocking operations should be defined so that the general  
semantic rules about <font face="sans-serif"> MPI</font> calls such as <font face="sans-serif"> MPI_TEST</font>,  
<font face="sans-serif"> MPI_REQUEST_FREE</font>, or <font face="sans-serif"> MPI_CANCEL</font> still hold.  For example, all  
these calls are supposed to be local and nonblocking.  Therefore, the  
callback functions <font face="sans-serif"> query_fn</font>, <font face="sans-serif"> free_fn</font>, or  
<font face="sans-serif"> cancel_fn</font> should invoke blocking <font face="sans-serif"> MPI</font> communication  
calls only if the context is such that these calls are guaranteed to  
return in finite time.    
Once <font face="sans-serif"> MPI_CANCEL</font> is invoked, the cancelled operation  
should complete in finite time, irrespective of the state of  
other processes (the operation has acquired ``local'' semantics).  It  
should either succeed, or fail without side-effects.  The user should  
guarantee these same properties for newly defined operations.    
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A call to <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> may unblock a blocked user  
process/thread. The <font face="sans-serif"> MPI</font> library should ensure that the blocked user  
computation will resume.  
 (<em> End of advice to implementors.</em>) <BR> 
<menu> 
</menu> 

<P>
<HR>
<A HREF="node253.htm#Node253"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node255.htm#Node255"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node255.htm#Node255"> Examples</a>
<b>Previous: </b><A HREF="node253.htm#Node253"> Introduction</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

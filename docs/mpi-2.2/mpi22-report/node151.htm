<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Communicators</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node151">147. Communicators</a></H2>
<A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node149.htm#Node149"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node152.htm#Node152"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node149.htm#Node149"> Caching</a>
<b>Next: </b><A HREF="node152.htm#Node152"> Windows</a>
<b>Previous: </b><A HREF="node150.htm#Node150"> Functionality</a>
<P>
  
<P> 
Functions   
for caching on communicators are:  
  
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CREATE_KEYVAL(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval,  extra_state)</TD></TR>  
<TR><TD> IN comm_copy_attr_fn</TD><TD>copy callback function for <font face="sans-serif"> comm_keyval</font> (function)</TD></TR>  
<TR><TD> IN comm_delete_attr_fn</TD><TD>delete callback function for <font face="sans-serif"> comm_keyval</font> (function)</TD></TR>  
<TR><TD> OUT comm_keyval</TD><TD>key value for future access (integer)</TD></TR>  
<TR><TD> IN extra_state</TD><TD>extra state for callback functions</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) <BR></tt>  
<P> 
 <tt> MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN, COMM_KEYVAL, EXTRA_STATE, IERROR)<BR> EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN<BR>INTEGER COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <BR></tt>  
<P> 
  
 <font color="red">{<font color="black"> static int MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
  
Generates a new attribute key.  Keys are locally unique in a process,  
and opaque to user, though they are explicitly stored in integers.  
Once allocated, the key value can be used to associate attributes  
and access them on any locally defined communicator.  
  
This function replaces <font face="sans-serif"> MPI_KEYVAL_CREATE</font>,  
  
whose use is deprecated.  
  
The C binding  
is identical.  The Fortran binding differs in that  
<font face="sans-serif"> extra_state</font> is an address-sized integer.  Also, the copy and  
delete callback functions have Fortran bindings that are consistent  
with address-sized attributes.  
  
<P> 
  
The C callback functions are:  
<P> 
  
 <tt> typedef int MPI_Comm_copy_attr_function(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag); <BR></tt>  
<P> 
and  
<P> 
 <tt> typedef int MPI_Comm_delete_attr_function(MPI_Comm comm, int comm_keyval, void *attribute_val, void *extra_state); <BR></tt>  
  
<P> 
  
which are the same as the <font face="sans-serif"> MPI-1.1</font> calls but with a new name.  
  
The old names are deprecated.  
  
<P> 
The Fortran callback functions are:  
<P> 
 <tt> SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<BR> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<BR>    ATTRIBUTE_VAL_OUT<BR>LOGICAL FLAG <BR></tt>  
<P> 
and  
<P> 
 <tt> SUBROUTINE COMM_DELETE_ATTR_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <BR></tt>  
<P> 
The C++ callbacks are:  
<P> 
  
 <font color="red">{<font color="black"><tt> typedef int MPI::Comm::Copy_attr_function(const MPI::Comm&amp; oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool&amp; flag); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
<P> 
and  
<P> 
 <font color="red">{<font color="black"><tt> typedef int MPI::Comm::Delete_attr_function(MPI::Comm&amp; comm, int comm_keyval, void* attribute_val, void* extra_state); <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR></tt>  
  
  
  
The <font face="sans-serif"> comm_copy_attr_fn</font> function is invoked when a communicator is  
duplicated by <font face="sans-serif"> MPI_COMM_DUP</font>.  <font face="sans-serif"> comm_copy_attr_fn</font> should be  
of type <font face="sans-serif">  MPI_Comm_copy_attr_function</font>.  
The copy callback function is invoked for each key value in  
<font face="sans-serif"> oldcomm</font> in arbitrary order.  Each call  
to the copy callback is made with a key value and its corresponding attribute.  
If it returns <font face="sans-serif">  flag = 0</font>, then the  
attribute is deleted in the duplicated communicator.  Otherwise  
(<font face="sans-serif">  flag = 1</font>),  
  
the new attribute value is set to the value  
returned in  
<font face="sans-serif"> attribute_val_out</font>.  
  
The function returns <font face="sans-serif">  MPI_SUCCESS</font> on  
success and an error code on failure (in which case  
<font face="sans-serif"> MPI_COMM_DUP</font> will fail).  
  
  
The argument <font face="sans-serif"> comm_copy_attr_fn</font> may be specified as  
  
<font face="sans-serif"> MPI_COMM_NULL_COPY_FN</font> or  
  
<font face="sans-serif"> MPI_COMM_DUP_FN</font>  
from either C, C++, or Fortran.  
<font face="sans-serif"> MPI_COMM_NULL_COPY_FN</font>  
is a function that does nothing other than returning <font face="sans-serif"> flag = 0</font>  
and <font face="sans-serif">  MPI_SUCCESS</font>.  
<font face="sans-serif"> MPI_COMM_DUP_FN</font> is a simple-minded  
copy function that sets <font face="sans-serif"> flag = 1</font>,  
returns the value of  
<font face="sans-serif"> attribute_val_in</font> in <font face="sans-serif"> attribute_val_out</font>, and  
returns <font face="sans-serif">  MPI_SUCCESS</font>.  
These replace the <font face="sans-serif"> MPI-1</font> predefined callbacks <font face="sans-serif"> MPI_NULL_COPY_FN</font>  
and <font face="sans-serif"> MPI_DUP_FN</font>, whose use is deprecated.  
<P> 
  
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
Even though both formal arguments <font face="sans-serif"> attribute_val_in</font> and  
<font face="sans-serif"> attribute_val_out</font> are of type <font face="sans-serif">  void *</font>, their usage differs.  
The C copy function is passed by <font face="sans-serif"> MPI</font> in <font face="sans-serif"> attribute_val_in</font>  
the <em> value</em> of the attribute, and in  
<font face="sans-serif"> attribute_val_out</font> the <em> address</em> of the attribute, so as  
to allow the function to return the (new) attribute value.  
The use of type <font face="sans-serif">  void *</font> for both is to avoid messy type casts.  
  
<P> 
A valid copy function is one that completely duplicates the  
information by making a full duplicate copy of the data structures  
implied by an attribute; another might just make another reference to  
that data structure, while using a reference-count mechanism.  Other  
types of attributes might not copy at all (they might be specific to  
<font face="sans-serif"> oldcomm</font> only).  
 (<em> End of advice to users.</em>) <BR> 
  
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
A C interface should be assumed for copy and delete functions  
associated with key values created in C; a Fortran calling interface  
should be assumed for key values created in Fortran.  
 (<em> End of advice to implementors.</em>) <BR> 
  
  
Analogous to <font face="sans-serif"> comm_copy_attr_fn</font> is a callback deletion function, defined  
as follows.  The <font face="sans-serif"> comm_delete_attr_fn</font> function is invoked when a communicator is  
deleted by <font face="sans-serif"> MPI_COMM_FREE</font> or when a call is made explicitly to  
<font face="sans-serif"> MPI_COMM_DELETE_ATTR</font>.    
<font face="sans-serif"> comm_delete_attr_fn</font> should be  
of type <font face="sans-serif">  MPI_Comm_delete_attr_function</font>.  
  
This function is called by <font face="sans-serif"> MPI_COMM_FREE</font>,  
<font face="sans-serif"> MPI_COMM_DELETE_ATTR</font>,  
  
and <font face="sans-serif"> MPI_COMM_SET_ATTR</font>  
  
to do whatever is needed to remove an attribute.  
  
The function returns <font face="sans-serif">  MPI_SUCCESS</font> on  
success and an error code on failure (in which case  
<font face="sans-serif"> MPI_COMM_FREE</font> will fail).  
  
  
The argument <font face="sans-serif"> comm_delete_attr_fn</font> may be specified as  
  
  
<font face="sans-serif"> MPI_COMM_NULL_DELETE_FN</font> from either C, C++, or Fortran.  
<font face="sans-serif"> MPI_COMM_NULL_DELETE_FN</font> is a function that does nothing, other  
than returning <font face="sans-serif">  MPI_SUCCESS</font>.  <font face="sans-serif"> MPI_COMM_NULL_DELETE_FN</font>  
replaces <font face="sans-serif"> MPI_NULL_DELETE_FN</font>, whose use is deprecated.  
<P> 
  
  
  
  
  
If an attribute copy function or attribute delete function returns other than  
<font face="sans-serif">  MPI_SUCCESS</font>, then the call that caused it to be invoked (for example,  
<font face="sans-serif"> MPI_COMM_FREE</font>), is erroneous.  
<P> 
The special key value <font face="sans-serif">  MPI_KEYVAL_INVALID</font> is never returned  
by <font face="sans-serif"> MPI_KEYVAL_CREATE</font>.  Therefore, it can be used for  
static initialization of key values.  
<P> 
<font color="red">  
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
To be able to use the predefined C functions   
<font face="sans-serif"> MPI_COMM_NULL_COPY_FN</font> or <font face="sans-serif"> MPI_COMM_DUP_FN</font> as   
<font face="sans-serif"> comm_copy_attr_fn</font> argument and/or   
<font face="sans-serif"> MPI_COMM_NULL_DELETE_FN</font> as the <font face="sans-serif"> comm_delete_attr_fn</font> argument in a call to the   
C++ routine <font face="sans-serif"> MPI::Comm::Create_keyval</font>,   
this routine may be overloaded with 3 additional   
routines that accept the C functions as the first, the second, or   
both input arguments (instead of an argument that matches the C++ prototype).  
 (<em> End of advice to implementors.</em>) <BR> 
 
<BR> 
<em> Advice to users.</em>  
<P> 
If a user wants to write a ``wrapper'' routine that   
internally calls <font face="sans-serif"> MPI::Comm::Create_keyval</font>   
and <font face="sans-serif"> comm_copy_attr_fn</font> and/or <font face="sans-serif"> comm_delete_attr_fn</font>   
are arguments of this wrapper routine, and if this wrapper routine should be   
callable with both user-defined C++ copy and delete functions and with the   
predefined C functions, then the same overloading as described above in the   
advice to implementors may be necessary.   
 (<em> End of advice to users.</em>) <BR> 
<font color="black">  
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_FREE_KEYVAL(comm_keyval)</TD></TR>  
<TR><TD> INOUT comm_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_free_keyval(int *comm_keyval) <BR></tt>  
<P> 
 <tt> MPI_COMM_FREE_KEYVAL(COMM_KEYVAL, IERROR)<BR> INTEGER COMM_KEYVAL, IERROR <BR></tt>   
<P> 
 <font color="red">{<font color="black"> static void MPI::Comm::Free_keyval(int&amp; comm_keyval) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Frees an extant attribute key.  
This function sets the value of <font face="sans-serif"> keyval</font> to  
<font face="sans-serif">  MPI_KEYVAL_INVALID</font>.  
Note that it is not erroneous to free an attribute key  
that is in use, because the actual free does not transpire until after all  
references (in other communicators on the process) to the key have been freed.  
These references need to be explictly freed by the program, either via calls  
to <font face="sans-serif"> MPI_COMM_DELETE_ATTR</font> that free one attribute instance, or by calls  
to <font face="sans-serif"> MPI_COMM_FREE</font> that free all attribute instances associated with  
the freed communicator.  
<P> 
  
  
  
This call is identical to the <font face="sans-serif"> MPI-1</font> call <font face="sans-serif"> MPI_KEYVAL_FREE</font>  
but is needed to match the new communicator-specific creation function.  
  
The use of <font face="sans-serif"> MPI_KEYVAL_FREE</font> is deprecated.  
  
  
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SET_ATTR(comm, comm_keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator from which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) <BR></tt>  
 <P> 
 <tt> MPI_COMM_SET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <BR></tt>   
<P> 
 <font color="red">{<font color="black"> void MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
This function stores the stipulated attribute value <font face="sans-serif"> attribute_val</font>  
for subsequent retrieval by <font face="sans-serif"> MPI_COMM_GET_ATTR</font>.  
If the value is already present, then the outcome  
is as if <font face="sans-serif"> MPI_COMM_DELETE_ATTR</font>was first called to delete the previous  
value (and the callback function <font face="sans-serif"> comm_delete_attr_fn</font> was executed), and a new  
value was next stored.  The call is erroneous if there is no key with value  
<font face="sans-serif"> keyval</font>; in particular  
<font face="sans-serif">  MPI_KEYVAL_INVALID</font> is an erroneous key value.  
  
The call will fail if the <font face="sans-serif"> comm_delete_attr_fn</font> function returned an error code  
other than <font face="sans-serif">  MPI_SUCCESS</font>.  
  
  
This function replaces <font face="sans-serif"> MPI_ATTR_PUT</font>,  
  
whose use is deprecated.  
  
The C binding  
is identical.  The Fortran binding  
differs in that <font face="sans-serif"> attribute_val</font> is an address-sized integer.  
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_GET_ATTR(comm, comm_keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator to which the attribute is attached (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless <font face="sans-serif"> flag =  
false</font></TD></TR>  
<TR><TD> OUT flag</TD><TD><font face="sans-serif">  false</font> if no attribute is associated with  
the key (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) <BR></tt>  
<P> 
 <tt> MPI_COMM_GET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR<BR>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<BR>LOGICAL FLAG <BR></tt>    
<P> 
 <font color="red">{<font color="black"> bool MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Retrieves attribute value by key.  
The call is erroneous if there is no key with value  
<font face="sans-serif"> keyval</font>.  On the other hand, the call is correct if the key value  
exists, but no attribute is attached on <tt> comm</tt> for that key; in such case,  
the call returns <tt> flag = false</tt>.  In particular  
<font face="sans-serif">  MPI_KEYVAL_INVALID</font> is an erroneous key value.  
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
The call to <font face="sans-serif"> MPI_Comm_set_attr</font> passes in <font face="sans-serif"> attribute_val</font>  
the <em> value</em> of the attribute; the call to <font face="sans-serif"> MPI_Comm_get_attr</font>  
passes in <font face="sans-serif"> attribute_val</font> the <em> address</em> of   
the  
location where the attribute value is to be returned.  
Thus, if the attribute value itself is a pointer of type <font face="sans-serif">  void*</font>,   
then the   
actual <font face="sans-serif"> attribute_val</font> parameter to  
<font face="sans-serif"> MPI_Comm_set_attr</font> will be of type <font face="sans-serif">  void*</font> and the actual  
<font face="sans-serif"> attribute_val</font> parameter to   
<font face="sans-serif"> MPI_Comm_get_attr</font>   
will be of type <font face="sans-serif">  void**</font>.  
 (<em> End of advice to users.</em>) <BR> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The use of a formal parameter <font face="sans-serif"> attribute_val</font> or type  
<font face="sans-serif">  void*</font> (rather than <font face="sans-serif">  void**</font>) avoids the messy type  
casting that would be needed if the attribute value is declared with a  
type other than <font face="sans-serif">  void*</font>.  
 (<em> End of rationale.</em>) <BR> 
  
  
This function replaces <font face="sans-serif"> MPI_ATTR_GET</font>,  
  
whose use is deprecated.  
  
The C binding is  
identical.  The Fortran binding differs in that  
<font face="sans-serif"> attribute_val</font> is an address-sized integer.  
  
<TABLE><TR><TD COLSPAN=2>MPI_COMM_DELETE_ATTR(comm, comm_keyval)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator from which the attribute is deleted (handle)</TD></TR>  
<TR><TD> IN comm_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) <BR></tt>  
<P> 
  
 <tt> MPI_COMM_DELETE_ATTR(COMM, COMM_KEYVAL, IERROR)<BR> INTEGER COMM, COMM_KEYVAL, IERROR <BR></tt>    
  
<P> 
  
 <font color="red">{<font color="black"> void MPI::Comm::Delete_attr(int comm_keyval) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
Delete attribute from cache by key.  This function invokes the  
attribute delete function <font face="sans-serif"> comm_delete_attr_fn</font>  
specified when the <font face="sans-serif"> keyval</font> was created.  
  
The call will fail if the <font face="sans-serif"> comm_delete_attr_fn</font> function returns an  
error code other than <font face="sans-serif">  MPI_SUCCESS</font>.  
  
<P> 
Whenever a communicator is replicated using the function  
<font face="sans-serif"> MPI_COMM_DUP</font>, all call-back copy functions for attributes  
that are currently set are invoked (in arbitrary order).  
Whenever a communicator is deleted using the function  
<font face="sans-serif"> MPI_COMM_FREE</font> all callback delete functions for attributes  
that are currently set are invoked.  
  
This function is the same as <font face="sans-serif"> MPI_ATTR_DELETE</font> but is needed  
to match the new communicator specific functions.  
  
The use of <font face="sans-serif"> MPI_ATTR_DELETE</font> is deprecated.  
  
  
<P> 

<P>
<HR>
<A HREF="node150.htm#Node150"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node149.htm#Node149"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node152.htm#Node152"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node149.htm#Node149"> Caching</a>
<b>Next: </b><A HREF="node152.htm#Node152"> Windows</a>
<b>Previous: </b><A HREF="node150.htm#Node150"> Functionality</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-topol/topol.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Topology Inquiry Functions</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node173">166. Topology Inquiry Functions</a></H2>
<A HREF="node172.htm#Node172"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node168.htm#Node168"> Topology Constructors</a>
<b>Next: </b><A HREF="node174.htm#Node174"> Cartesian Shift Coordinates</a>
<b>Previous: </b><A HREF="node172.htm#Node172"> Distributed (Graph) Constructor</a>
<P>
  
<P> 
If a topology has been defined with one of the above functions, then the topology  
information can be looked up using inquiry functions. They all are local  
calls.  
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TOPO_TEST(comm, status)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator (handle)</TD></TR>  
<TR><TD> OUT  status</TD><TD> topology type of communicator <tt> comm</tt> (state)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Topo_test(MPI_Comm comm, int *status) <BR></tt>  
<P> 
 <tt> MPI_TOPO_TEST(COMM, STATUS, IERROR)<BR> INTEGER COMM, STATUS, IERROR <BR></tt>  
 <font color="red">{<font color="black"> int MPI::Comm::Get_topology() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
The function <font face="sans-serif"> MPI_TOPO_TEST</font> returns the type of topology that  
is assigned to a communicator.  
<P> 
The output value <tt> status</tt> is one of the following:  
<P><IMG WIDTH=423 HEIGHT=48 SRC="img113.gif"><P>
<TABLE><TR><TD COLSPAN=2>MPI_GRAPHDIMS_GET(comm, nnodes, nedges)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator for group with graph structure (handle)</TD></TR>  
<TR><TD> OUT  nnodes</TD><TD> number of nodes in graph (integer) (same as number of processes in the group)</TD></TR>  
<TR><TD> OUT  nedges</TD><TD> number of edges in graph (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges) <BR></tt>  
<P> 
 <tt> MPI_GRAPHDIMS_GET(COMM, NNODES, NEDGES, IERROR)<BR> INTEGER COMM, NNODES, NEDGES, IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Graphcomm::Get_dims(int nnodes[], int nedges[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Functions <font face="sans-serif"> MPI_GRAPHDIMS_GET</font> and  
<font face="sans-serif"> MPI_GRAPH_GET</font> retrieve the graph-topology information  
that was associated with a communicator by  
<font face="sans-serif"> MPI_GRAPH_CREATE</font>.  
<P> 
The information provided by <font face="sans-serif"> MPI_GRAPHDIMS_GET</font> can be used  
to dimension the  
vectors <tt> index</tt> and <tt> edges</tt> correctly for the following call  
to <font face="sans-serif"> MPI_GRAPH_GET</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_GET(comm, maxindex, maxedges, index, edges)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with graph structure (handle)</TD></TR>  
<TR><TD> IN  maxindex</TD><TD> length of vector <font face="sans-serif"> index</font> in the calling program <BR>(integer)</TD></TR>  
<TR><TD> IN  maxedges</TD><TD> length of vector <font face="sans-serif"> edges</font> in the calling program <BR>(integer)</TD></TR>  
<TR><TD> OUT  index</TD><TD> array of integers containing the graph structure (for details see the definition of <font face="sans-serif"> MPI_GRAPH_CREATE</font>)</TD></TR>  
<TR><TD> OUT  edges</TD><TD> array of integers containing the graph structure </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int *index, int *edges) <BR></tt>  
<P> 
 <tt> MPI_GRAPH_GET(COMM, MAXINDEX, MAXEDGES, INDEX, EDGES, IERROR)<BR> INTEGER COMM, MAXINDEX, MAXEDGES, INDEX(*), EDGES(*), IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Graphcomm::Get_topo(int maxindex, int maxedges, int index[], int edges[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<TABLE><TR><TD COLSPAN=2>MPI_CARTDIM_GET(comm, ndims)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with Cartesian structure (handle)</TD></TR>  
<TR><TD> OUT  ndims</TD><TD> number of dimensions of the Cartesian structure (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cartdim_get(MPI_Comm comm, int *ndims) <BR></tt>  
<P> 
 <tt> MPI_CARTDIM_GET(COMM, NDIMS, IERROR)<BR> INTEGER COMM, NDIMS, IERROR <BR></tt>  
 <font color="red">{<font color="black"> int MPI::Cartcomm::Get_dim() const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
The functions <font face="sans-serif"> MPI_CARTDIM_GET</font> and  
<font face="sans-serif"> MPI_CART_GET</font> return the Cartesian topology information that was  
associated with a communicator by  
<font face="sans-serif"> MPI_CART_CREATE</font>.  
If <font face="sans-serif"> comm</font> is associated with a zero-dimensional Cartesian topology,  
<font face="sans-serif"> MPI_CARTDIM_GET</font> returns <font face="sans-serif"> ndims=0</font> and <font face="sans-serif"> MPI_CART_GET</font> will keep  
all output arguments unchanged.   
  
<TABLE><TR><TD COLSPAN=2>MPI_CART_GET(comm, maxdims, dims, periods, coords)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with Cartesian structure (handle)</TD></TR>  
<TR><TD> IN  maxdims</TD><TD> length of vectors <tt> dims, periods</tt>, and <tt> coords</tt> in the calling program (integer)</TD></TR>  
<TR><TD> OUT  dims</TD><TD> number of processes for each Cartesian dimension (array of integer)</TD></TR>  
<TR><TD> OUT  periods</TD><TD> periodicity (<font face="sans-serif">  true</font>/<font face="sans-serif">  false</font>) for each Cartesian dimension (array of logical)</TD></TR>  
<TR><TD> OUT  coords</TD><TD> coordinates of calling process in Cartesian structure (array of integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cart_get(MPI_Comm comm, int maxdims, int *dims, int *periods, int *coords) <BR></tt>  
<P> 
 <tt> MPI_CART_GET(COMM, MAXDIMS, DIMS, PERIODS, COORDS, IERROR)<BR> INTEGER COMM, MAXDIMS, DIMS(*), COORDS(*), IERROR <BR>LOGICAL PERIODS(*) <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Cartcomm::Get_topo(int maxdims, int dims[], bool periods[], int coords[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CART_RANK(comm, coords, rank)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with Cartesian structure (handle)</TD></TR>  
<TR><TD> IN  coords</TD><TD> integer array (of size <tt> ndims</tt>) specifying the Cartesian coordinates of a process </TD></TR>  
<TR><TD> OUT  rank</TD><TD> rank of specified process (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank) <BR></tt>  
<P> 
 <tt> MPI_CART_RANK(COMM, COORDS, RANK, IERROR)<BR> INTEGER COMM, COORDS(*), RANK, IERROR <BR></tt>  
 <font color="red">{<font color="black"> int MPI::Cartcomm::Get_cart_rank(const int coords[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
For a process group with Cartesian structure, the function  
<font face="sans-serif"> MPI_CART_RANK</font> translates the logical process coordinates to process  
ranks as they are used by the point-to-point routines.  
<P> 
For dimension <tt> i</tt> with <tt> periods(i) = true</tt>, if the coordinate,  
<tt> coords(i)</tt>, is out of range, that is, <tt> coords(i) <I>&lt;</I> 0</tt> or  
<tt> coords(i) <IMG WIDTH=7 HEIGHT=9 SRC="img114.gif">
 dims(i)</tt>, it is shifted back to the interval  
<BR>  
<tt> 0 <IMG WIDTH=7 HEIGHT=9 SRC="img115.gif">
 coords(i) <I>&lt;</I> dims(i)</tt> automatically. Out-of-range  
coordinates are erroneous for non-periodic dimensions.  
 <P> 
If <font face="sans-serif"> comm</font> is associated with a zero-dimensional Cartesian topology,  
<font color="red"><font face="sans-serif"> coords</font><font color="black"> is not significant and 0 is returned in <font face="sans-serif"> rank</font>.   
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CART_COORDS(comm, rank, maxdims, coords)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with Cartesian structure (handle)</TD></TR>  
<TR><TD> IN  rank</TD><TD> rank of a process within group of <font face="sans-serif"> comm</font> (integer)</TD></TR>  
<TR><TD> IN  maxdims</TD><TD> length of vector  <tt> coords</tt> in the calling program (integer)</TD></TR>  
<TR><TD> OUT  coords</TD><TD> integer array (of size <tt> ndims</tt>) containing the Cartesian coordinates of specified process (array of integers)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int *coords) <BR></tt>  
<P> 
 <tt> MPI_CART_COORDS(COMM, RANK, MAXDIMS, COORDS, IERROR)<BR> INTEGER COMM, RANK, MAXDIMS, COORDS(*), IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Cartcomm::Get_coords(int rank, int maxdims, int coords[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
The inverse mapping, rank-to-coordinates translation is provided by  
<font face="sans-serif"> MPI_CART_COORDS</font>.   
If <font face="sans-serif"> comm</font> is associated with a zero-dimensional Cartesian topology,  
<font face="sans-serif"> coords</font> will be unchanged.   
  
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_NEIGHBORS_COUNT(comm, rank, nneighbors)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with graph topology (handle)</TD></TR>  
<TR><TD> IN  rank</TD><TD> rank of process in group of <font face="sans-serif"> comm</font> (integer)</TD></TR>  
<TR><TD> OUT  nneighbors</TD><TD> number of neighbors of specified process (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors) <BR></tt>  
<P> 
 <tt> MPI_GRAPH_NEIGHBORS_COUNT(COMM, RANK, NNEIGHBORS, IERROR)<BR> INTEGER COMM, RANK, NNEIGHBORS, IERROR <BR></tt>  
 <font color="red">{<font color="black"> int MPI::Graphcomm::Get_neighbors_count(int rank) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
  
2.2  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_NEIGHBORS(comm, rank, maxneighbors, neighbors)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator with graph topology (handle)</TD></TR>  
<TR><TD> IN  rank</TD><TD> rank of process in group of <font face="sans-serif"> comm</font> (integer)</TD></TR>  
<TR><TD> IN  maxneighbors</TD><TD> size of array <font face="sans-serif"> neighbors</font> (integer)</TD></TR>  
<TR><TD> OUT  neighbors</TD><TD> ranks of processes that are neighbors to specified process (array of integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int *neighbors) <BR></tt>  
<P> 
 <tt> MPI_GRAPH_NEIGHBORS(COMM, RANK, MAXNEIGHBORS, NEIGHBORS, IERROR)<BR> INTEGER COMM, RANK, MAXNEIGHBORS, NEIGHBORS(*), IERROR <BR></tt>  
 <font color="red">{<font color="black"> void MPI::Graphcomm::Get_neighbors(int rank, int maxneighbors, int neighbors[]) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
<font color="red">  
<font face="sans-serif"> MPI_GRAPH_NEIGHBORS_COUNT</font> and <font face="sans-serif"> MPI_GRAPH_NEIGHBORS</font> provide    
adjacency information for a general graph topology.    
The returned count and array of neighbors for the queried rank will   
both include <em> all</em> neighbors and reflect the same edge ordering as   
was specified by the original call to <font face="sans-serif"> MPI_GRAPH_CREATE</font>.   
Specifically, <font face="sans-serif"> MPI_GRAPH_NEIGHBORS_COUNT</font> and   
<font face="sans-serif"> MPI_GRAPH_NEIGHBORS</font> will return values based on the original   
<tt> index</tt> and <tt> edges</tt> array passed to <font face="sans-serif"> MPI_GRAPH_CREATE</font>   
(assuming that <tt> index[-1]</tt> effectively equals zero):   
 <P> 
<ul> 
 
<li>The <tt> count</tt> returned from   
  <font face="sans-serif"> MPI_GRAPH_NEIGHBORS_COUNT</font> will be (<tt> index[rank]</tt> -   
  <tt> index[rank-1]</tt>).   
 
<li>The <tt> neighbors</tt> array returned from   
  <font face="sans-serif"> MPI_GRAPH_NEIGHBORS</font> will be <tt> edges[index[rank-1]]</tt>   
  through <tt> edges[index[rank]-1]</tt>.  
</ul> 
<BR> 
<BR><b> Example</b>    
     
     
  Assume there are four processes 0, 1, 2, 3 with the following   
  adjacency matrix (note that some neighbors are listed multiple times):   
  <BR>   
     
  <TABLE><TR><TD ALIGN="CENTER">     
  process</TD><TD ALIGN="LEFT"> neighbors </TD></TR> 
<TR><TD ALIGN="CENTER">  
     
  0</TD><TD ALIGN="LEFT"> 1, 1, 3   </TD></TR> 
<TR><TD ALIGN="CENTER">  
  1</TD><TD ALIGN="LEFT"> 0, 0      </TD></TR> 
<TR><TD ALIGN="CENTER">  
  2</TD><TD ALIGN="LEFT"> 3         </TD></TR> 
<TR><TD ALIGN="CENTER">  
  3</TD><TD ALIGN="LEFT"> 0, 2, 2   </TD></TR> 
<TR><TD ALIGN="CENTER">  
     
  </TD></TR></TABLE> 
   
   <P> 
Thus, the input arguments to <font face="sans-serif"> MPI_GRAPH_CREATE</font> are: <BR>   
     
  <TABLE><TR><TD ALIGN="LEFT">  nnodes =</TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  index =</TD><TD ALIGN="LEFT"> 3, 5, 6, 9 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  edges =</TD><TD ALIGN="LEFT"> 1, 1, 3, 0, 0, 3, 0, 2, 2   
  </TD></TR></TABLE> 
   
   <P> 
Therefore, calling <font face="sans-serif"> MPI_GRAPH_NEIGHBORS_COUNT</font> and   
  <font face="sans-serif"> MPI_GRAPH_NEIGHBORS</font> for each of the 4 processes will return: <BR>   
     
  <TABLE><TR><TD ALIGN="CENTER">  <TD ALIGN="CENTER" COLSPAN=1><b> Input rank</b></TD><TD ALIGN="LEFT"> <TD ALIGN="CENTER" COLSPAN=1><b> Count</b></TD><TD ALIGN="LEFT">   
  <TD ALIGN="CENTER" COLSPAN=1><b> Neighbors</b> </TD></TR> 
<TR><TD ALIGN="CENTER">  
     
  0</TD><TD ALIGN="CENTER"> 3</TD><TD ALIGN="LEFT"> 1, 1, 3 </TD></TR> 
<TR><TD ALIGN="CENTER">  
  1</TD><TD ALIGN="CENTER"> 2</TD><TD ALIGN="LEFT"> 0, 0 </TD></TR> 
<TR><TD ALIGN="CENTER">  
  2</TD><TD ALIGN="CENTER"> 1</TD><TD ALIGN="LEFT"> 3 </TD></TR> 
<TR><TD ALIGN="CENTER">  
  3</TD><TD ALIGN="CENTER"> 3</TD><TD ALIGN="LEFT"> 0, 2, 2 </TD></TR> 
<TR><TD ALIGN="CENTER">  
     
  </TD></TR></TABLE> 
   
   <P> 
    
<font color="black">  
<P> 
<BR><b> Example</b>    
  
  
Suppose that <tt> comm</tt> is a communicator with a  
shuffle-exchange topology.   The group has <I>2<SUP>n</SUP></I> members.  
Each process is labeled by <I>a<SUB>1</SUB> , ..., a<SUB>n</SUB></I> with <IMG WIDTH=48 HEIGHT=12 SRC="img116.gif">
, and has three neighbors:  
exchange(<IMG WIDTH=137 HEIGHT=11 SRC="img117.gif">
  
(<IMG WIDTH=45 HEIGHT=7 SRC="img118.gif">
), shuffle(<I>a<SUB>1</SUB> , ..., a<SUB>n</SUB> )= a<SUB>2</SUB> , ..., 
a<SUB>n</SUB>, a<SUB>1</SUB></I>, and unshuffle(<I>a<SUB>1</SUB> , ..., a<SUB>n</SUB> ) = a<SUB>n</SUB> , a<SUB>1</SUB> , ... , a<SUB>n-1</SUB></I>.  
The graph adjacency list is illustrated below for <I>n=3</I>.  
<BR>  
<CENTER>  
<TABLE><TR><TD ALIGN="CENTER">  
<TD ALIGN="CENTER" COLSPAN=2><b> node</b></TD><TD ALIGN="CENTER"><b> exchange</b></TD><TD ALIGN="CENTER"><b> shuffle</b></TD><TD ALIGN="CENTER"><b> unshuffle</b></TD></TR> 
<TR><TD ALIGN="CENTER">  
</TD><TD ALIGN="CENTER"></TD><TD ALIGN="CENTER"> neighbors(1)</TD><TD ALIGN="CENTER"> neighbors(2)</TD><TD ALIGN="CENTER"> neighbors(3) </TD></TR> 
<TR><TD ALIGN="CENTER">  
  
0</TD><TD ALIGN="CENTER"> (000)</TD><TD ALIGN="CENTER"> 1</TD><TD ALIGN="CENTER"> 0</TD><TD ALIGN="CENTER"> 0</TD></TR> 
<TR><TD ALIGN="CENTER">  
1</TD><TD ALIGN="CENTER"> (001)</TD><TD ALIGN="CENTER"> 0</TD><TD ALIGN="CENTER"> 2</TD><TD ALIGN="CENTER"> 4</TD></TR> 
<TR><TD ALIGN="CENTER">  
2</TD><TD ALIGN="CENTER"> (010)</TD><TD ALIGN="CENTER"> 3</TD><TD ALIGN="CENTER"> 4</TD><TD ALIGN="CENTER"> 1</TD></TR> 
<TR><TD ALIGN="CENTER">  
3</TD><TD ALIGN="CENTER"> (011)</TD><TD ALIGN="CENTER"> 2</TD><TD ALIGN="CENTER"> 6</TD><TD ALIGN="CENTER"> 5</TD></TR> 
<TR><TD ALIGN="CENTER">  
4</TD><TD ALIGN="CENTER"> (100)</TD><TD ALIGN="CENTER"> 5</TD><TD ALIGN="CENTER"> 1</TD><TD ALIGN="CENTER"> 2</TD></TR> 
<TR><TD ALIGN="CENTER">  
5</TD><TD ALIGN="CENTER"> (101)</TD><TD ALIGN="CENTER"> 4</TD><TD ALIGN="CENTER"> 3</TD><TD ALIGN="CENTER"> 6</TD></TR> 
<TR><TD ALIGN="CENTER">  
6</TD><TD ALIGN="CENTER"> (110)</TD><TD ALIGN="CENTER"> 7</TD><TD ALIGN="CENTER"> 5</TD><TD ALIGN="CENTER"> 3</TD></TR> 
<TR><TD ALIGN="CENTER">  
7</TD><TD ALIGN="CENTER"> (111)</TD><TD ALIGN="CENTER"> 6</TD><TD ALIGN="CENTER"> 7</TD><TD ALIGN="CENTER"> 7</TD></TR> 
<TR><TD ALIGN="CENTER">  
  
</TD></TR></TABLE> 
</CENTER>  
<P> 
  
Suppose that the communicator <tt> comm</tt> has this topology associated with it.  
The following code fragment cycles through the three types of neighbors  
and performs an appropriate permutation for each.  
<P> 
<BR> 
<pre><tt>C  assume: each process has stored a real number A. 
C  extract neighborhood information 
      CALL MPI_COMM_RANK(comm, myrank, ierr) 
      CALL MPI_GRAPH_NEIGHBORS(comm, myrank, 3, neighbors, ierr) 
C  perform exchange permutation 
      CALL MPI_SENDRECV_REPLACE(A, 1, MPI_REAL, neighbors(1), 0, 
     +     neighbors(1), 0, comm, status, ierr) 
C  perform shuffle permutation 
      CALL MPI_SENDRECV_REPLACE(A, 1, MPI_REAL, neighbors(2), 0, 
     +     neighbors(3), 0, comm, status, ierr) 
C  perform unshuffle permutation 
      CALL MPI_SENDRECV_REPLACE(A, 1, MPI_REAL, neighbors(3), 0, 
     +     neighbors(2), 0, comm, status, ierr) 
</tt></pre> 
   
<P> 
<font color="red">  
<font face="sans-serif"> MPI_DIST_GRAPH_NEIGHBORS_COUNT</font> and <font face="sans-serif"> MPI_DIST_GRAPH_NEIGHBORS</font>   
provide adjacency information for a distributed graph topology.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_DIST_GRAPH_NEIGHBORS_COUNT(comm, indegree, outdegree, weighted)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator with distributed graph topology (handle)</TD></TR>  
<TR><TD> OUT indegree</TD><TD>number of edges into this process (non-negative integer)</TD></TR>  
<TR><TD> OUT outdegree</TD><TD>number of edges out of this process (non-negative integer)</TD></TR>  
<TR><TD> OUT weighted</TD><TD><font face="sans-serif">  false</font> if <font face="sans-serif">  MPI_UNWEIGHTED</font> was supplied during creation,   
  <font face="sans-serif">  true</font> otherwise (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Dist_graph_neighbors_count(MPI_Comm comm, int *indegree, int *outdegree, int *weighted) <BR></tt>  
<P> 
 <tt> MPI_DIST_GRAPH_NEIGHBORS_COUNT(COMM, INDEGREE, OUTDEGREE, WEIGHTED, IERROR)<BR> INTEGER COMM, INDEGREE, OUTDEGREE, IERROR <BR>LOGICAL WEIGHTED <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Distgraphcomm::Get_dist_neighbors_count(int rank, int indegree[], int outdegree[], bool&amp; weighted) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_DIST_GRAPH_NEIGHBORS(comm, maxindegree, sources, sourceweights,   
    maxoutdegree, destinations, destweights)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator with distributed graph topology (handle)</TD></TR>  
<TR><TD> IN maxindegree</TD><TD>size of sources and sourceweights arrays (non-negative integer)</TD></TR>  
<TR><TD> OUT sources</TD><TD>processes for which the calling process is a   
  destination (array of non-negative integers)</TD></TR>  
<TR><TD> OUT sourceweights</TD><TD>weights of the edges into the calling process   
  (array of non-negative integers)</TD></TR>  
<TR><TD> IN maxoutdegree</TD><TD>size of destinations and destweights arrays (non-negative integer)</TD></TR>  
<TR><TD> OUT destinations</TD><TD>processes for which the calling process is a source  
  (array of non-negative integers)</TD></TR>  
<TR><TD> OUT destweights</TD><TD>weights of the edges out of the calling process   
  (array of non-negative integers)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]) <BR></tt>  
<P> 
 <tt> MPI_DIST_GRAPH_NEIGHBORS(COMM, MAXINDEGREE, SOURCES, SOURCEWEIGHTS, MAXOUTDEGREE, DESTINATIONS, DESTWEIGHTS, IERROR)<BR> INTEGER COMM, MAXINDEGREE, SOURCES(*), SOURCEWEIGHTS(*), MAXOUTDEGREE, <BR>    DESTINATIONS(*), DESTWEIGHTS(*), IERROR <BR></tt>  
<P> 
 <font color="red">{<font color="black"> void MPI::Distgraphcomm::Get_dist_neighbors(int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]) <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
<P> 
These calls are local. The number of edges into and out of the process  
returned by <font face="sans-serif"> MPI_DIST_GRAPH_NEIGHBORS_COUNT</font> are the total  
number of such edges given in the call to  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE_ADJACENT</font> or  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE</font> (potentially by processes other  
than the calling process in the case of  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE</font>). Multiply defined edges are all  
counted and returned by <font face="sans-serif"> MPI_DIST_GRAPH_NEIGHBORS</font> in some  
order. If <font face="sans-serif">  MPI_UNWEIGHTED</font> is supplied for  
<font face="sans-serif"> sourceweights</font> or <font face="sans-serif"> destweights</font> or both, or if  
<font face="sans-serif">  MPI_UNWEIGHTED</font> was supplied during the construction of the  
graph then no weight information is returned in that array or those  
arrays. The only requirement on the order of values in  
<font face="sans-serif"> sources</font> and <font face="sans-serif"> destinations</font> is that two calls to the  
routine with same input argument <font face="sans-serif"> comm</font> will return the same  
sequence of edges. If <font face="sans-serif"> maxindegree</font> or <font face="sans-serif"> maxoutdegree</font> is  
smaller than the numbers returned by  
<font face="sans-serif"> MPI_DIST_GRAPH_NEIGHBOR_COUNT</font>, then only the first part  
of the full list is returned. Note, that the order of returned edges  
does need not to be identical to the order that was provided in the  
creation of <font face="sans-serif"> comm</font> for the case that  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE_ADJACENT</font> was used.  
<P> 
 
<BR> 
<em> Advice  
        to implementors.</em>  
<P> 
Since the query calls are defined to be local, each process needs to  
store the list of its neighbors with incoming and outgoing  
edges. Communication is required at the collective  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE</font> call in order to compute the neighbor  
lists for each process from the distributed graph specification.  
 (<em> End of advice to implementors.</em>) <BR> 
<font color="black">  
<P> 

<P>
<HR>
<A HREF="node172.htm#Node172"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node168.htm#Node168"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node174.htm#Node174"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node168.htm#Node168"> Topology Constructors</a>
<b>Next: </b><A HREF="node174.htm#Node174"> Cartesian Shift Coordinates</a>
<b>Previous: </b><A HREF="node172.htm#Node172"> Distributed (Graph) Constructor</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

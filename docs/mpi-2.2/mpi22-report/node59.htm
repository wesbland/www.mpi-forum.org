<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Communication Initiation</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node59">58. Communication Initiation</a></H2>
<A HREF="node58.htm#Node58"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node57.htm#Node57"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node60.htm#Node60"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node57.htm#Node57"> Nonblocking Communication</a>
<b>Next: </b><A HREF="node60.htm#Node60"> Communication Completion</a>
<b>Previous: </b><A HREF="node58.htm#Node58"> Communication Request Objects</a>
<P>
  
<P> 
We use the same naming conventions as for blocking communication: a  
prefix of <font face="sans-serif"> B</font>, <font face="sans-serif"> S</font>, or <font face="sans-serif"> R</font> is used for <font face="sans-serif"> buffered</font>, <font face="sans-serif">  
synchronous</font> or <font face="sans-serif"> ready</font> mode.  In addition a prefix of <font face="sans-serif"> I</font> (for <font face="sans-serif">  
immediate</font>) indicates that the call is nonblocking.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ISEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_ISEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<BR> &lt;type&gt; BUF(*) <BR>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Request MPI::Comm::Isend(const void* buf, int count, const MPI::Datatype&amp; datatype, int dest, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Start a standard mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IBSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Ibsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_IBSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<BR> &lt;type&gt; BUF(*) <BR>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Request MPI::Comm::Ibsend(const void* buf, int count, const MPI::Datatype&amp; datatype, int dest, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Start a buffered mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ISSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Issend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_ISSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<BR> &lt;type&gt; BUF(*) <BR>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Request MPI::Comm::Issend(const void* buf, int count, const MPI::Datatype&amp; datatype, int dest, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Start a synchronous mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IRSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Irsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_IRSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<BR> &lt;type&gt; BUF(*) <BR>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Request MPI::Comm::Irsend(const void* buf, int count, const MPI::Datatype&amp; datatype, int dest, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Start a ready mode nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IRECV (buf, count, datatype, source, tag, comm, request)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in receive buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each receive buffer element (handle)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source <font color="red">or <font face="sans-serif">  MPI_ANY_SOURCE</font><font color="black"> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag <font color="red">or <font face="sans-serif">  MPI_ANY_TAG</font><font color="black"> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <BR></tt>  
<P> 
 <tt> MPI_IRECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR)<BR> &lt;type&gt; BUF(*) <BR>INTEGER  COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR <BR></tt>  
 <font color="red">{<font color="black"> MPI::Request MPI::Comm::Irecv(void* buf, int count, const MPI::Datatype&amp; datatype, int source, int tag) const <font color="red"><em> (binding deprecated, see Section <a href="node328.htm#Node328">Deprecated since <font face="sans-serif"> MPI-2.2</font> 
</a>)</em> }<font color="black"><BR>  
  
Start a nonblocking receive.  
<P> 
These calls allocate a communication  
request object and associate it with the request handle (the argument  
<font face="sans-serif"> request</font>).  
The request can be used later to  
query the status of the communication or wait for its completion.  
<P> 
A nonblocking send call indicates that the  
system may start copying data out of the send buffer.  
The sender should not   
<font color="red">modify<font color="black">  
any part of the send  
buffer after a nonblocking send operation is called, until the send completes.  
<P> 
A nonblocking receive call indicates that the system may start  
writing data into the receive buffer.  The receiver should not access  
any part of the  
receive buffer after a nonblocking receive operation is called,  
until the receive completes.  
<P> 
  
 
<BR> 
<em> Advice to users.</em>  
<P> 
To prevent problems with the argument copying and register optimization done  
  by Fortran compilers, please note the hints in subsections ``Problems Due to  
  Data Copying and Sequence Association,'' and ``A Problem with  
  Register Optimization''    
  in Section <a href="node343.htm#Node343">Problems With Fortran Bindings for <font face="sans-serif"> MPI</font> 
</a> on  
  pages <a href="node343.htm#Node345">Problems Due to Data Copying and Sequence Association 
</a> and <a href="node343.htm#Node348">A Problem with Register Optimization 
</a>.  
 (<em> End of advice to users.</em>) <BR> 

<P>
<HR>
<A HREF="node58.htm#Node58"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node57.htm#Node57"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node60.htm#Node60"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node57.htm#Node57"> Nonblocking Communication</a>
<b>Next: </b><A HREF="node60.htm#Node60"> Communication Completion</a>
<b>Previous: </b><A HREF="node58.htm#Node58"> Communication Request Objects</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

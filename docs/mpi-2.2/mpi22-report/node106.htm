<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>MINLOC and MAXLOC</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node106">105. MINLOC and MAXLOC</a></H2>
<A HREF="node105.htm#Node105"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node102.htm#Node102"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node107.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node102.htm#Node102"> Global Reduction Operations</a>
<b>Next: </b><A HREF="node107.htm#Node107"> User-Defined Reduction Operations</a>
<b>Previous: </b><A HREF="node105.htm#Node105"> Signed Characters and Reductions</a>
<P>
  
<P> 
The operator <font face="sans-serif">  MPI_MINLOC</font> is used to compute  
a global minimum and also  
an index attached to the minimum value.  
<font face="sans-serif">  MPI_MAXLOC</font> similarly computes a global maximum and index.  
One application of these is to compute a global minimum (maximum) and the  
rank of the process containing this value.  
<P> 
The operation that defines <font face="sans-serif">  MPI_MAXLOC</font> is:  
<P> 
<P><IMG WIDTH=118 HEIGHT=29 SRC="img69.gif"><P>
  
where  
<P><IMG WIDTH=67 HEIGHT=11 SRC="img70.gif"><P>
  
and  
<P><IMG WIDTH=121 HEIGHT=42 SRC="img71.gif"><P>
  
<P> 
<font face="sans-serif">  MPI_MINLOC</font> is defined similarly:  
<P> 
<P><IMG WIDTH=118 HEIGHT=29 SRC="img72.gif"><P>
  
where  
<P><IMG WIDTH=65 HEIGHT=11 SRC="img73.gif"><P>
  
and  
<P><IMG WIDTH=121 HEIGHT=42 SRC="img74.gif"><P>
  
<P> 
Both operations are associative and commutative.  
Note that if <font face="sans-serif">  MPI_MAXLOC</font>  
is applied to reduce a sequence of pairs  
<I>(u<SUB>0</SUB>, 0), (u<SUB>1</SUB>, 1) , ..., (u<SUB>n-1</SUB> , n-1)</I>, then the value  
returned is <I>(u , r)</I>, where <IMG WIDTH=55 HEIGHT=6 SRC="img75.gif">
 and <I>r</I> is the index of  
the first global maximum in the sequence.  Thus, if each process  
supplies a value and its rank within the group, then a reduce  
operation with <font face="sans-serif"> op</font> = <font face="sans-serif">  MPI_MAXLOC</font> will return the  
maximum value and the rank of the first process with that value.  
Similarly, <font face="sans-serif">  MPI_MINLOC</font> can be used to return a minimum and its  
index.  
More generally, <font face="sans-serif">  MPI_MINLOC</font> computes a <em> lexicographic  
minimum</em>, where elements are ordered according to the first component  
of each pair, and ties are resolved according to the second component.  
<P> 
The reduce operation is defined to operate on arguments that  
consist of a pair: value and index.  
For both Fortran and C, types are provided to describe the pair.  
The potentially mixed-type nature of such arguments  
is a problem in Fortran.  The problem is circumvented, for Fortran, by  
having the <font face="sans-serif"> MPI</font>-provided type consist of a pair of the same type as  
value, and coercing the index to this type also.  In C, the <font face="sans-serif"> MPI</font>-provided  
pair type has distinct types and the index is an <tt>int</tt>.  
<P> 
In order to use <font face="sans-serif">  MPI_MINLOC</font> and <font face="sans-serif">  MPI_MAXLOC</font> in a  
reduce operation, one must provide a <font face="sans-serif"> datatype</font> argument  
that represents a pair (value and index).  <font face="sans-serif"> MPI</font> provides  
nine  
such predefined datatypes.  The operations <font face="sans-serif">  MPI_MAXLOC</font> and  
<font face="sans-serif">  MPI_MINLOC</font> can be used with each of the following datatypes.  
  
<P><IMG WIDTH=347 HEIGHT=75 SRC="img76.gif"><P>
<P><IMG WIDTH=302 HEIGHT=100 SRC="img77.gif"><P>
  
The datatype <font face="sans-serif">  MPI_2REAL</font> is <em> as if</em> defined by the following  
(see Section <a href="node69.htm#Node69">Derived Datatypes 
</a>).  
<P> 
<BR> 
<pre><tt>MPI_TYPE_CONTIGUOUS(2, MPI_REAL, MPI_2REAL) 
</tt></pre> 
Similar statements apply for <font face="sans-serif">  MPI_2INTEGER</font>,  
<font face="sans-serif">  MPI_2DOUBLE_PRECISION</font>, and <font face="sans-serif">  MPI_2INT</font>.  
<P> 
The datatype <font face="sans-serif">  MPI_FLOAT_INT</font> is <em> as if</em> defined by the  
following sequence of instructions.  
<P><IMG WIDTH=462 HEIGHT=105 SRC="img78.gif"><P>
Similar statements apply for <font face="sans-serif">  MPI_LONG_INT</font>  
and <font face="sans-serif">  MPI_DOUBLE_INT</font>.  
<P> 
The following examples use intracommunicators.  
   
<BR><b> Example</b>   
  
  
Each process has an array of 30 <tt> double</tt>s, in C.  For each  
of the 30 locations, compute the value and rank of the process containing  
the largest value.  
<P> 
<BR> 
<pre><tt>    ... 
    /* each process has an array of 30 double: ain[30] 
     */ 
    double ain[30], aout[30]; 
    int  ind[30]; 
    struct { 
        double val; 
        int   rank; 
    } in[30], out[30]; 
    int i, myrank, root; 
 
    MPI_Comm_rank(comm, &amp;myrank); 
    for (i=0; i&lt;30; ++i) { 
        in[i].val = ain[i]; 
        in[i].rank = myrank; 
    } 
    MPI_Reduce( in, out, 30, MPI_DOUBLE_INT, MPI_MAXLOC, root, comm ); 
    /* At this point, the answer resides on process root 
     */ 
    if (myrank == root) { 
        /* read ranks out 
         */ 
        for (i=0; i&lt;30; ++i) { 
            aout[i] = out[i].val; 
            ind[i] = out[i].rank; 
        } 
    } 
</tt></pre> 
   
<P> 
<BR><b> Example</b>   
  
  
Same example, in Fortran.  
<P> 
<BR> 
<pre><tt>    ... 
    ! each process has an array of 30 double: ain(30) 
 
    DOUBLE PRECISION ain(30), aout(30) 
    INTEGER ind(30) 
    DOUBLE PRECISION in(2,30), out(2,30) 
    INTEGER i, myrank, root, ierr 
 
    CALL MPI_COMM_RANK(comm, myrank, ierr) 
    DO I=1, 30 
        in(1,i) = ain(i) 
        in(2,i) = myrank    ! myrank is coerced to a double 
    END DO 
 
    CALL MPI_REDUCE( in, out, 30, MPI_2DOUBLE_PRECISION, MPI_MAXLOC, root, 
                                                               comm, ierr ) 
    ! At this point, the answer resides on process root 
 
    IF (myrank .EQ. root) THEN 
        ! read ranks out 
        DO I= 1, 30 
            aout(i) = out(1,i) 
            ind(i) = out(2,i)  ! rank is coerced back to an integer 
        END DO 
    END IF 
</tt></pre> 
   
<P> 
<BR><b> Example</b>   
  
  
Each process has a non-empty array of values.  
Find the minimum global value, the rank of the process that holds it  
and its index on this process.  
<P> 
<P><IMG WIDTH=511 HEIGHT=469 SRC="img79.gif"><P>
   
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The definition of <font face="sans-serif">  MPI_MINLOC</font> and <font face="sans-serif">  MPI_MAXLOC</font> given  
here has the advantage that it does not require any special-case  
handling of these two operations: they are handled like any other  
reduce operation.  A programmer can provide his or her own definition  
of <font face="sans-serif">  MPI_MAXLOC</font> and <font face="sans-serif">  MPI_MINLOC</font>, if so desired.  
The disadvantage is that values and indices have to be first  
interleaved, and that indices and values have to be coerced to the  
same type, in Fortran.  
 (<em> End of rationale.</em>) <BR> 

<P>
<HR>
<A HREF="node105.htm#Node105"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node102.htm#Node102"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node107.htm#Node107"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node102.htm#Node102"> Global Reduction Operations</a>
<b>Next: </b><A HREF="node107.htm#Node107"> User-Defined Reduction Operations</a>
<b>Previous: </b><A HREF="node105.htm#Node105"> Signed Characters and Reductions</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

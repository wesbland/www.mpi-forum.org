<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>Communication Calls</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H1><A NAME="Node233">218. Communication Calls</a></H1>
<A HREF="node232.htm#Node232"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node234.htm#Node234"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node234.htm#Node234"> Put</a>
<b>Previous: </b><A HREF="node232.htm#Node232"> Window Attributes</a>
<P>
  
<P> 
<font face="sans-serif"> MPI</font> supports three <font face="sans-serif"> RMA</font> communication calls: <font face="sans-serif"> MPI_PUT</font>  
transfers data from the  
caller memory (origin) to the target memory;  
<font face="sans-serif"> MPI_GET</font> transfers data from the target memory to the caller  
memory;  
and <font face="sans-serif"> MPI_ACCUMULATE</font> updates locations in the target memory,  
e.g. by adding to these locations values sent from the caller memory.  
These operations are <em> nonblocking</em>: the call initiates  
the transfer, but the transfer may continue after the call returns.  
The transfer is completed, both at the origin and at the target, when  
a subsequent <em> synchronization</em> call is issued by the caller on  
the involved window object.  These synchronization calls are described in  
Section <a href="node238.htm#Node238">Synchronization Calls 
</a>,  
page <a href="node238.htm#Node238">Synchronization Calls 
</a>.  
<P> 
The local communication buffer of an <font face="sans-serif"> RMA</font> call should not be updated,  
and the local communication buffer of a get call should not be accessed  
after the <font face="sans-serif"> RMA</font>  
call, until the subsequent synchronization call completes.  
<P> 
  
2.2  
<P> 
It is erroneous to have concurrent conflicting accesses to the same memory location in a window; if a location is updated by a put or accumulate operation, then this location cannot be accessed by a load or another <font face="sans-serif"> RMA</font> operation until the updating operation has completed at the target.  
There is one exception to this rule; namely, the same location can be  
updated by several concurrent accumulate calls, the outcome being as  
if these updates occurred in some order.  In addition, a window cannot  
concurrently be updated by a put or accumulate operation and by a  
local store operation.  This, even if these two updates access  
different locations in the window.  The last restriction enables  
more efficient implementations of <font face="sans-serif"> RMA</font> operations on many systems.  
These restrictions are described in more detail in  
Section <a href="node248.htm#Node248">Semantics and Correctness 
</a>, page <a href="node248.htm#Node248">Semantics and Correctness 
</a>.  
<P> 
The calls use general datatype arguments to specify communication  
buffers at the origin and at the target.  Thus, a transfer operation  
may also gather data at the source and scatter it at the destination.  
However, all arguments specifying both communication buffers are  
provided by the caller.  
<P> 
For all three calls, the target process may be identical with the  
origin process;  
i.e., a  
process may use an RMA operation to move data in its memory.  
<P> 
 
<BR> 
<em> Rationale.</em>  
<P> 
The choice of supporting ``self-communication'' is the same as for  
message-passing.  
It simplifies some coding, and is very useful with accumulate  
operations, to allow atomic updates of local variables.  
 (<em> End of rationale.</em>) <BR> 
<font face="sans-serif">  MPI_PROC_NULL</font> is a valid target rank in the <font face="sans-serif"> MPI</font> RMA calls  
<font face="sans-serif"> MPI_ACCUMULATE</font>, <font face="sans-serif"> MPI_GET</font>, and <font face="sans-serif"> MPI_PUT</font>.    
The effect is the same as for <font face="sans-serif">  MPI_PROC_NULL</font> in <font face="sans-serif"> MPI</font> point-to-point  
communication.  
After any RMA operation with rank <font face="sans-serif">  MPI_PROC_NULL</font>, it is still necessary to  
finish the RMA epoch with the synchronization method that started the epoch.   
  
<menu> 
</menu> 

<P>
<HR>
<A HREF="node232.htm#Node232"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="mpi22-report.htm#Node0"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node234.htm#Node234"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="mpi22-report.htm#Node0">Contents</a>
<b>Next: </b><A HREF="node234.htm#Node234"> Put</a>
<b>Previous: </b><A HREF="node232.htm#Node232"> Window Attributes</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<!-- This file was generated by tohtml from chap-terms/terms-2.tex -->
<!-- with the command
tohtml erif"> MPI-2.0</font>
-->
<TITLE>C Binding Issues</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<HR><H2><A NAME="Node31">31. C Binding Issues</a></H2>
<A HREF="node30.htm#Node30"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node28.htm#Node28"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node32.htm#Node32"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node28.htm#Node28"> Language Binding</a>
<b>Next: </b><A HREF="node32.htm#Node32"> C++ Binding Issues</a>
<b>Previous: </b><A HREF="node30.htm#Node30"> Fortran Binding Issues</a>
<P>
We use the   
ISO C   
declaration format.  All <font face="sans-serif"> MPI</font> names have an <tt> MPI_</tt>  
prefix, defined constants are in all capital letters, and defined types and  
functions have one capital letter after the prefix.  
Programs must not declare variables or functions with names beginning with  
the prefix <tt> MPI_</tt>.    
To support the profiling interface, programs should not declare  
functions with names beginning with the prefix <tt> PMPI_</tt>.  
<P> 
The definition of named constants, function prototypes, and type  
definitions must be supplied in an include file <font face="sans-serif"> mpi.h</font>.    
<P> 
Almost all C functions return an error code.  The successful return code will  
be <font face="sans-serif">  MPI_SUCCESS</font>, but failure return codes are implementation dependent.  
<P> 
Type declarations are provided for handles to each category of opaque  
objects.  
<P> 
Array arguments are indexed from zero.  
<P> 
Logical flags are integers with value 0 meaning ``false'' and a non-zero  
value meaning ``true.''  
<P> 
Choice arguments are pointers of type <tt> void *</tt>.  
<P> 
Address arguments are of <font face="sans-serif"> MPI</font> defined type  
<font face="sans-serif"> MPI_Aint</font>.   
File displacements are of type <font face="sans-serif"> MPI_Offset</font>.  
<font face="sans-serif">  MPI_Aint</font> is defined to be an integer of the size needed to  
hold any valid address on the target architecture.  
<font face="sans-serif"> MPI_Offset</font> is defined to be an integer of the size needed to  
hold any valid file size on the target architecture.  
<P> 

<P>
<HR>
<A HREF="node30.htm#Node30"><IMG WIDTH=16 HEIGHT=16 SRC="previous.gif"></A><A HREF="node28.htm#Node28"><IMG WIDTH=16 HEIGHT=16 SRC="up.gif"></A><A HREF="node32.htm#Node32"><IMG WIDTH=16 HEIGHT=16 SRC="next.gif"></A><BR>
<b>Up: </b><A HREF="node28.htm#Node28"> Language Binding</a>
<b>Next: </b><A HREF="node32.htm#Node32"> C++ Binding Issues</a>
<b>Previous: </b><A HREF="node30.htm#Node30"> Fortran Binding Issues</a>
<P>
<HR>
Return to <A HREF="node434.htm">MPI-2.2 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-2.2 of September 4, 2009<BR>
HTML Generated on September 10, 2009
</FONT>
</BODY>
</HTML>

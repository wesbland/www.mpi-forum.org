<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Another Way to Establish <font face="sans-serif"> MPI</font> Communication</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node257">236. Another Way to Establish  MPI Communication</span></h2>
<a href="node256.htm#Node256"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node252.htm#Node252"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node258.htm#Node258"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node252.htm#Node252"> Other Functionality</a>
<b>Next: </b><a href="node258.htm#Node258"> One-Sided Communications</a>
<b>Previous: </b><a href="node256.htm#Node256"> Releasing Connections</a>
<p>
<TABLE><TR><TD COLSPAN=2>MPI_COMM_JOIN(fd, intercomm)</TD></TR>  
<TR><TD> IN fd</TD><TD>socket file descriptor</TD></TR>  
<TR><TD> OUT intercomm</TD><TD>new intercommunicator (handle)</TD></TR>  
</TABLE>  
 <tt> int MPI_Comm_join(int fd, MPI_Comm *intercomm) <br></tt>  
 <tt> MPI_Comm_join(fd, intercomm, ierror) <br> INTEGER, INTENT(IN) :: fd <br>TYPE(MPI_Comm), INTENT(OUT) :: intercomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_COMM_JOIN(FD, INTERCOMM, IERROR)<br> INTEGER FD, INTERCOMM, IERROR <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_COMM_JOIN</font> is intended for <font face="sans-serif"> MPI</font> implementations  
that exist in an environment supporting the Berkeley Socket  
interface [<a href="node522.htm#-Bib45">45</a>,<a href="node522.htm#-Bib49">49</a>].   
Implementations that exist in an environment not supporting Berkeley Sockets  
should provide the entry point for <font face="sans-serif"> MPI_COMM_JOIN</font>  
and should return <font face="sans-serif">  MPI_COMM_NULL</font>.  
<P> 
This call creates an intercommunicator from the union of two <font face="sans-serif"> MPI</font>  
processes which are connected by a socket.   
<font face="sans-serif"> MPI_COMM_JOIN</font> should normally  
succeed if the local and remote processes have access to   
the same implementation-defined <font face="sans-serif"> MPI</font> communication universe.   
<P> 
 
<br> 
<em> Advice to users.</em>  
 An <font face="sans-serif"> MPI</font> implementation may require a specific  
communication medium for <font face="sans-serif"> MPI</font> communication, such as a shared memory  
segment or a special switch. In this case, it may not be possible for  
two processes to successfully join even if there is a socket  
connecting them and they are using the same <font face="sans-serif"> MPI</font> implementation.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will attempt to establish  
communication over a slow medium if its preferred one  
is not available.   
If implementations do not do this, they must document  
why they cannot do <font face="sans-serif"> MPI</font> communication over the medium  
used by the socket (especially if the socket is a TCP  
connection).  
 (<em> End of advice to implementors.</em>) <br> 
<font face="sans-serif"> fd</font> is a file descriptor representing a socket of type  
<font face="sans-serif">  SOCK_STREAM</font> (a two-way reliable byte-stream connection).  
Nonblocking I/O and asynchronous notification via <font face="sans-serif">  SIGIO</font>  
must not be enabled for the socket. The socket must be in a connected  
state.  The socket must be quiescent when  
<font face="sans-serif"> MPI_COMM_JOIN</font> is called (see below). It is the responsibility  
of the application to create the socket using standard socket API  
calls.  
<P> 
<font face="sans-serif"> MPI_COMM_JOIN</font> must be called by the process at each end of the  
socket. It does not return until both processes have called  
<font face="sans-serif"> MPI_COMM_JOIN</font>. The two processes are referred to as the local  
and remote processes.  
<P> 
<font face="sans-serif"> MPI</font> uses the socket to bootstrap creation of the intercommunicator,  
and for nothing else. Upon return from <font face="sans-serif"> MPI_COMM_JOIN</font>, the  
file descriptor will be open and quiescent (see below).  
<P> 
If <font face="sans-serif"> MPI</font> is unable to create an intercommunicator, but  
is able to leave the socket in its original state, with no   
pending communication, it succeeds and   
sets <font face="sans-serif"> intercomm</font> to <font face="sans-serif">  MPI_COMM_NULL</font>.  
<P> 
The socket must be quiescent before  
<font face="sans-serif"> MPI_COMM_JOIN</font> is called and  
after <font face="sans-serif"> MPI_COMM_JOIN</font> returns. More specifically, on entry to  
<font face="sans-serif"> MPI_COMM_JOIN</font>, a <tt>read</tt> on the socket will not read any data  
that was written to the socket before the remote process called  
<font face="sans-serif"> MPI_COMM_JOIN</font>. On exit from <font face="sans-serif"> MPI_COMM_JOIN</font>, a <tt>read</tt>  
will not read any data that was written to the socket before the  
remote process returned from <font face="sans-serif"> MPI_COMM_JOIN</font>. It is the  
responsibility of the application to ensure the first condition, and  
the responsibility of the <font face="sans-serif"> MPI</font> implementation to ensure the second.  
In a multithreaded application, the application must ensure that  
one thread does not access the socket while another is calling  
<font face="sans-serif"> MPI_COMM_JOIN</font>, or call <font face="sans-serif"> MPI_COMM_JOIN</font> concurrently.   
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
<font face="sans-serif"> MPI</font> is free to use any available communication path(s) for <font face="sans-serif"> MPI</font>  
messages in the new communicator; the socket is only used for the  
initial handshaking.  
 (<em> End of advice to implementors.</em>) <br> 
<font face="sans-serif"> MPI_COMM_JOIN</font> uses non-<font face="sans-serif"> MPI</font> communication to do its work.   
The interaction of non-<font face="sans-serif"> MPI</font> communication with pending <font face="sans-serif"> MPI</font>  
communication is not defined. Therefore, the result of calling  
<font face="sans-serif"> MPI_COMM_JOIN</font> on two connected processes   
(see Section <a href="node256.htm#Node256">Releasing Connections 
</a> for the definition of connected) is  
undefined.  
<P> 
The returned communicator may be used to establish <font face="sans-serif"> MPI</font>  
communication with additional processes, through the usual <font face="sans-serif"> MPI</font>  
communicator creation mechanisms.   
<P> 
<P> 
  
  
<P> 

<P>
<hr>
<a href="node256.htm#Node256"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node252.htm#Node252"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node258.htm#Node258"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node252.htm#Node252"> Other Functionality</a>
<b>Next: </b><a href="node258.htm#Node258"> One-Sided Communications</a>
<b>Previous: </b><a href="node256.htm#Node256"> Releasing Connections</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

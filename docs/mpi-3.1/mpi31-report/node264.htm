<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Window of Dynamically Attached Memory</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node264">243. Window of Dynamically Attached Memory</span></h2>
<a href="node263.htm#Node263"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node260.htm#Node260"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node265.htm#Node265"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node260.htm#Node260"> Initialization</a>
<b>Next: </b><a href="node265.htm#Node265"> Window Destruction</a>
<b>Previous: </b><a href="node263.htm#Node263"> Window That Allocates Shared Memory</a>
<p>
  
  
<P> 
The <font face="sans-serif"> MPI-2</font> <font face="sans-serif"> RMA</font> model requires the user to identify the local memory  
that may be a target of <font face="sans-serif"> RMA</font> calls at the time the window is created.    
This has advantages for both the  
programmer (only this memory can be updated by one-sided operations  
and provides greater safety) and the <font face="sans-serif"> MPI</font> implementation (special steps may  
be taken to make one-sided access to such memory more efficient).  
However, consider implementing a modifiable linked list using <font face="sans-serif"> RMA</font>  
operations; as new items are added to the list, memory must be  
allocated.  
In a C or C++ program,  
this memory is typically allocated using <tt>malloc</tt> or  
<tt>new</tt> respectively.  In <font face="sans-serif"> MPI-2</font> <font face="sans-serif"> RMA</font>, the programmer must create  
a window with a predefined amount of memory and then  
implement routines for allocating memory from within the window's  
memory.  In addition, there is no easy way to handle the situation  
where the predefined amount of memory turns out to be inadequate.  
To support this model, the routine <font face="sans-serif"> MPI_WIN_CREATE_DYNAMIC</font>  
creates a window that makes it possible to expose memory  
without remote synchronization. It must be used in combination with the local  
routines <font face="sans-serif"> MPI_WIN_ATTACH</font> and <font face="sans-serif"> MPI_WIN_DETACH</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_CREATE_DYNAMIC(info, comm, win)</TD></TR>  
<TR><TD> IN info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD>intra-communicator (handle)</TD></TR>  
<TR><TD> OUT win</TD><TD>window object returned by the call (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win) <br></tt>  
<P> 
 <tt> MPI_Win_create_dynamic(info, comm, win, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Win), INTENT(OUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_CREATE_DYNAMIC(INFO, COMM, WIN, IERROR)<br>  INTEGER INFO, COMM, WIN, IERROR <br></tt>  
<P> 
<P> 
This is a collective call executed by all processes in the group of  
<font face="sans-serif"> comm</font>. It returns a window <font face="sans-serif"> win</font> without memory attached.  
Existing process memory can be attached as described below.  
This routine returns a window object that can be used by these processes  
to perform <font face="sans-serif"> RMA</font> operations on attached memory.  
Because this window has special properties, it will sometimes be  
referred to as a <em> dynamic</em> window.  
<P> 
The <font face="sans-serif"> info</font> argument can be used to specify hints  
similar to the <font face="sans-serif"> info</font> argument for <font face="sans-serif"> MPI_WIN_CREATE</font>.    
<P> 
In the case of a window created with  
<font face="sans-serif"> MPI_WIN_CREATE_DYNAMIC</font>, the <font face="sans-serif"> target_disp</font> for all  
<font face="sans-serif"> RMA</font> functions is the address at the target; i.e., the effective  
<font face="sans-serif"> window_base</font> is <font face="sans-serif">  MPI_BOTTOM</font> and the <font face="sans-serif"> disp_unit</font> is one.  
For dynamic windows, the <font face="sans-serif"> target_disp</font>  
  argument to <font face="sans-serif"> RMA</font> communication operations is not restricted to  
  non-negative values.  
Users  
should use <font face="sans-serif"> MPI_GET_ADDRESS</font> at the target process to  
determine the address of a target memory location and communicate this  
address to the origin process.    
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Users are cautioned that displacement arithmetic can overflow in  
variables of type <font face="sans-serif"> MPI_Aint</font> and result in unexpected values on some  
platforms.  
The <font face="sans-serif"> MPI_AINT_ADD</font> and <font face="sans-serif"> MPI_AINT_DIFF</font>  
functions can be used to safely perform address arithmetic with <font face="sans-serif"> MPI_Aint</font>  
displacements.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
In environments with heterogeneous data representations, care must be  
exercised in communicating addresses between processes.  For example, it  
is possible that an address valid at the target process (for example, a  
64-bit pointer) cannot be expressed as an address at the origin (for  
example, the origin uses 32-bit pointers).  For this reason, a portable  
<font face="sans-serif"> MPI</font> implementation should ensure that the type <font face="sans-serif"> MPI_AINT</font>  
(see Table <a href="node48.htm#Table3">3 
</a>) is able to store addresses  
from any process.  
 (<em> End of advice to implementors.</em>) <br> 
Memory at the target cannot be accessed with this window until that memory  
has been  
attached using the function <font face="sans-serif"> MPI_WIN_ATTACH</font>.  
That is, in addition to using <font face="sans-serif"> MPI_WIN_CREATE_DYNAMIC</font> to  
create an <font face="sans-serif"> MPI</font> window, the user must use <font face="sans-serif"> MPI_WIN_ATTACH</font>  
before any local memory may be the target of an <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> operation.  
Only memory that is currently accessible may be attached.    
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_ATTACH(win, base, size)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
<TR><TD> IN base</TD><TD>initial address of memory to be attached</TD></TR>  
<TR><TD> IN size</TD><TD>size of memory to be attached in bytes</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size) <br></tt>  
<P> 
 <tt> MPI_Win_attach(win, base, size, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_ATTACH(WIN, BASE, SIZE, IERROR)<br> INTEGER WIN, IERROR<br>&lt;type&gt; BASE(*)<br>INTEGER (KIND=MPI_ADDRESS_KIND) SIZE <br></tt>  
<P> 
<P> 
Attaches a local memory region beginning at  
<font face="sans-serif"> base</font> for remote access within the given window. The memory region  
specified must not contain any part that is already attached to the  
window <font face="sans-serif"> win</font>,  
that is, attaching overlapping memory concurrently within the same window is  
erroneous. The argument <font face="sans-serif"> win</font> must be a window that was created with  
<font face="sans-serif"> MPI_WIN_CREATE_DYNAMIC</font>.  
The local memory region attached to the window consists of <font face="sans-serif"> size</font> bytes,  
starting at address <font face="sans-serif"> base</font>.  
In C, <font face="sans-serif"> base</font> is the starting address of a  
memory region. In Fortran, one can pass the first element of a memory  
region or a whole array, which must be `simply contiguous' (for  
`simply contiguous,' see Section <a href="node422.htm#Node422">Problems Due to Data Copying and Sequence Association with Subscript Triplets 
</a>).  
Multiple (but non-overlapping) memory  
regions may be attached to the same window.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Requiring that memory be explicitly attached before it is exposed to  
one-sided access by other processes can  
simplify  
implementations and improve performance. The ability to make memory  
available for <font face="sans-serif"> RMA</font> operations without requiring a collective  
<font face="sans-serif"> MPI_WIN_CREATE</font> call is needed for some one-sided programming  
models.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Attaching memory to a window may require the use of scarce resources; thus,  
attaching large regions of memory is not recommended in portable  
programs.  Attaching memory to a window may fail if sufficient resources are  
not available; this is similar to the behavior of  
<font face="sans-serif"> MPI_ALLOC_MEM</font>.  
<P> 
The user is also responsible for ensuring that <font face="sans-serif"> MPI_WIN_ATTACH</font> at  
the target has returned before a process attempts to target that  
memory with an <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> call.  
<P> 
Performing an <font face="sans-serif"> RMA</font> operation to memory that has not been attached to  
a window created with <font face="sans-serif"> MPI_WIN_CREATE_DYNAMIC</font> is  
erroneous. (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will attempt to make as much memory  
available for attaching as possible. Any limitations should be  
documented by the implementor.  
 (<em> End of advice to implementors.</em>) <br> 
Attaching memory is a local operation as defined by <font face="sans-serif"> MPI</font>, which means  
that the call is not  
collective and completes without requiring any <font face="sans-serif"> MPI</font> routine to be  
called in any other process.  
Memory may be detached with the routine  
<font face="sans-serif"> MPI_WIN_DETACH</font>. After memory has been  
detached, it may not be the target of an <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> operation on   
that window (unless the   
memory is re-attached with <font face="sans-serif"> MPI_WIN_ATTACH</font>).  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_DETACH(win, base)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
<TR><TD> IN base</TD><TD>initial address of memory to be detached</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_detach(MPI_Win win, const void *base) <br></tt>  
<P> 
 <tt> MPI_Win_detach(win, base, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_DETACH(WIN, BASE, IERROR)<br> INTEGER WIN, IERROR<br>&lt;type&gt; BASE(*) <br></tt>  
<P> 
<P> 
Detaches a previously attached memory region beginning at  
<font face="sans-serif"> base</font>. The arguments <font face="sans-serif"> base</font> and <font face="sans-serif"> win</font>  
must match the arguments passed to a previous call to  
<font face="sans-serif"> MPI_WIN_ATTACH</font>.   
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Detaching memory may permit the implementation to make more  
efficient use of special memory or provide memory that may be needed  
by a subsequent <font face="sans-serif"> MPI_WIN_ATTACH</font>.  Users are encouraged to  
detach memory that is no longer needed.  
Memory should be detached before it is freed by the user.  
 (<em> End of advice to users.</em>) <br> 
Memory becomes detached when the associated dynamic memory window is  
freed, see Section <a href="node265.htm#Node265">Window Destruction 
</a>.  
<P> 

<P>
<hr>
<a href="node263.htm#Node263"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node260.htm#Node260"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node265.htm#Node265"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node260.htm#Node260"> Initialization</a>
<b>Next: </b><a href="node265.htm#Node265"> Window Destruction</a>
<b>Previous: </b><a href="node263.htm#Node263"> Window That Allocates Shared Memory</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

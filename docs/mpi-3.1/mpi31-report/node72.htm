<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Cancel</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node72">67. Cancel</span></h2>
<a href="node71.htm#Node71"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node73.htm#Node73"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node73.htm#Node73"> Persistent Communication Requests</a>
<b>Previous: </b><a href="node71.htm#Node71"> Matched Receives</a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CANCEL(request)</TD></TR>  
<TR><TD> IN request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cancel(MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Cancel(request, ierror) <br> TYPE(MPI_Request), INTENT(IN) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_CANCEL(REQUEST, IERROR)<br> INTEGER  REQUEST, IERROR <br></tt>  
  
<P> 
A call to <font face="sans-serif"> MPI_CANCEL</font> marks for cancellation a pending,  
nonblocking communication operation (send or receive).  The cancel call is  
local. It returns immediately, possibly before the  
communication is actually cancelled.  
It is still necessary to call <font face="sans-serif"> MPI_REQUEST_FREE</font>,  
<font face="sans-serif"> MPI_WAIT</font> or <font face="sans-serif"> MPI_TEST</font> (or any of the derived operations)  
with the cancelled request as argument after the call to <font face="sans-serif"> MPI_CANCEL</font>.  
If a communication is marked for cancellation, then a <font face="sans-serif"> MPI_WAIT</font>  
call for that communication is guaranteed to return, irrespective of  
the activities of other processes (i.e., <font face="sans-serif"> MPI_WAIT</font> behaves as a  
local function); similarly if <font face="sans-serif"> MPI_TEST</font> is  
repeatedly called in a busy wait loop for a cancelled communication,  
then <font face="sans-serif"> MPI_TEST</font> will eventually be successful.  
<P> 
<font face="sans-serif"> MPI_CANCEL</font> can be used to cancel a communication that uses  
a persistent request (see Section <a href="node73.htm#Node73">Persistent Communication Requests 
</a>), in  
the same way it is used for nonpersistent requests.  
A successful cancellation cancels  
the active communication, but not the request itself.  After the call to  
<font face="sans-serif"> MPI_CANCEL</font> and the subsequent call to <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_TEST</font>, the request becomes inactive and  
can be activated for a new communication.  
<P> 
The successful  
cancellation of a buffered send frees the buffer space occupied by  
the pending message.  
<P> 
Either the cancellation succeeds, or the communication succeeds, but  
not both.  
If a send is marked for cancellation, then it must be the case that  
either the send completes normally, in which case the  
message sent was received at the destination process, or that the send is  
successfully  
cancelled, in which case no part of the message was received at the  
destination.  Then, any matching receive has to be satisfied by another send.  
If a receive is marked for cancellation, then it must be the case that  
either the receive completes normally, or that the receive is  
successfully cancelled, in which case no part of the receive buffer  
is altered.  Then, any matching send has to be satisfied by another receive.  
<P> 
If the operation has been  
cancelled, then information to that effect will be returned in the  
status argument of the operation that completes the communication.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Although the IN request handle parameter should not need to be passed   
by reference, the C binding has listed the argument type as <font face="sans-serif"> MPI_Request*</font> since   
<font face="sans-serif"> MPI-1.0</font>. This function signature therefore cannot be changed without breaking   
existing <font face="sans-serif"> MPI</font> applications.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_TEST_CANCELLED(status, flag)</TD></TR>  
<TR><TD> IN status</TD><TD>status object (Status)</TD></TR>  
<TR><TD> OUT flag</TD><TD>(logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Test_cancelled(const MPI_Status *status, int *flag) <br></tt>  
<P> 
 <tt> MPI_Test_cancelled(status, flag, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: status <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TEST_CANCELLED(STATUS, FLAG, IERROR)<br> LOGICAL FLAG <br>INTEGER  STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
  
<P> 
Returns <font face="sans-serif"> flag = true</font> if the communication associated with the  
status object was cancelled successfully.  In such a case, all  
other fields of <font face="sans-serif"> status</font> (such as <font face="sans-serif"> count</font> or <font face="sans-serif"> tag</font>) are  
undefined.  Returns <font face="sans-serif"> flag = false</font>, otherwise.  If a receive  
operation might be cancelled then one should call <font face="sans-serif"> MPI_TEST_CANCELLED</font>  
first, to check whether the operation was  
cancelled, before checking on the other fields of the return status.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Cancel can be an expensive operation that should be used only exceptionally.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If a send operation uses an ``eager'' protocol (data is transferred to  
the receiver  
before a matching receive is posted), then the cancellation of this send  
may require communication with the intended receiver in order to free  
allocated  
buffers.  On some systems this may require an interrupt to the  
intended receiver.  
Note that, while communication may be needed to implement  
<font face="sans-serif"> MPI_CANCEL</font>,  
this is still a local operation, since its completion does not  
depend on the code executed by other processes.  If processing is required on  
another process, this should be transparent to the application (hence the need  
for an interrupt and an interrupt handler).  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node71.htm#Node71"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node73.htm#Node73"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node73.htm#Node73"> Persistent Communication Requests</a>
<b>Previous: </b><a href="node71.htm#Node71"> Matched Receives</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

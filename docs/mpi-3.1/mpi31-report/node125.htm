<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Example using <font face="sans-serif"> MPI_SCAN</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node125">119. Example using  MPI_SCAN</span></h2>
<a href="node124.htm#Node124"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node122.htm#Node122"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node126.htm#Node126"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node122.htm#Node122"> Scan</a>
<b>Next: </b><a href="node126.htm#Node126"> Nonblocking Collective Operations</a>
<b>Previous: </b><a href="node124.htm#Node124"> Exclusive Scan</a>
<p>
  
 <P> 
The example in this section uses an intracommunicator.  
<P> 
<br><b> Example</b>  
  
  
This example uses a user-defined operation to produce a <em> segmented  
scan</em>.  A segmented scan takes, as input, a set of values and a set of logicals,  
and the logicals delineate the various segments of the scan.  
For example:  
<P><img width=313 height=37 src="img130.gif" alt="Image file"><P>
<P> 
The operator that produces this effect is  
<P> 
<P><img width=124 height=29 src="img131.gif" alt="Image file"><P>
<P> 
where  
<P> 
<P><img width=114 height=29 src="img132.gif" alt="Image file"><P>
<P> 
Note that this is a non-commutative operator.  
C code that implements it is given below.  
<P> 
<br> 
<pre><tt>typedef struct { 
    double val; 
    int log; 
} SegScanPair; 
 
/* the user-defined function 
 */ 
void segScan(SegScanPair *in, SegScanPair *inout, int *len, 
                                                MPI_Datatype *dptr) 
{ 
    int i; 
    SegScanPair c; 
 
    for (i=0; i&lt; *len; ++i) { 
        if (in-&gt;log == inout-&gt;log) 
            c.val = in-&gt;val + inout-&gt;val; 
        else 
            c.val = inout-&gt;val; 
        c.log = inout-&gt;log; 
        *inout = c; 
        in++; inout++; 
    } 
} 
</tt></pre> 
Note that the <font face="sans-serif"> inout</font> argument to the user-defined function  
corresponds to the right-hand operand of the operator.  When using  
this operator, we must be careful to specify that it is non-commutative, as in the following.  
<br> 
<pre><tt>    int i,base; 
    SegScanPair  a, answer; 
    MPI_Op       myOp; 
    MPI_Datatype type[2] = {MPI_DOUBLE, MPI_INT}; 
    MPI_Aint     disp[2]; 
    int          blocklen[2] = { 1, 1}; 
    MPI_Datatype sspair; 
 
    /* explain to MPI how type SegScanPair is defined 
     */ 
    MPI_Get_address( &amp;a, disp); 
    MPI_Get_address( &amp;a.log, disp+1); 
    base = disp[0]; 
    for (i=0; i&lt;2; ++i) disp[i] -= base; 
    MPI_Type_create_struct( 2, blocklen, disp, type, &amp;sspair ); 
    MPI_Type_commit( &amp;sspair ); 
    /* create the segmented-scan user-op 
     */ 
    MPI_Op_create(segScan, 0, &amp;myOp); 
    ... 
    MPI_Scan( &amp;a, &amp;answer, 1, sspair, myOp, comm ); 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node124.htm#Node124"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node122.htm#Node122"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node126.htm#Node126"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node122.htm#Node122"> Scan</a>
<b>Next: </b><a href="node126.htm#Node126"> Nonblocking Collective Operations</a>
<b>Previous: </b><a href="node124.htm#Node124"> Exclusive Scan</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

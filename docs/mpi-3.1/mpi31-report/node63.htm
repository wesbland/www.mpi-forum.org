<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Communication Initiation</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node63">58. Communication Initiation</span></h2>
<a href="node62.htm#Node62"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node61.htm#Node61"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node64.htm#Node64"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node61.htm#Node61"> Nonblocking Communication</a>
<b>Next: </b><a href="node64.htm#Node64"> Communication Completion</a>
<b>Previous: </b><a href="node62.htm#Node62"> Communication Request Objects</a>
<p>
  
  
<P> 
We use the same naming conventions as for blocking communication: a  
prefix of <font face="sans-serif"> B</font>, <font face="sans-serif"> S</font>, or <font face="sans-serif"> R</font> is used for   
<b> buffered</b>, <b> synchronous</b> or <b> ready</b> mode.    
In addition a prefix of <font face="sans-serif"> I</font> (for <b> immediate</b>) indicates   
that the call is nonblocking.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ISEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Isend(const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Isend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count, dest, tag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ISEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <br></tt>  
  
<P> 
Start a standard mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IBSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Ibsend(const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Ibsend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count, dest, tag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IBSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <br></tt>  
  
<P> 
Start a buffered mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ISSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Issend(const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Issend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count, dest, tag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ISSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <br></tt>  
  
<P> 
Start a synchronous mode, nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IRSEND(buf, count, datatype, dest, tag, comm, request)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Irsend(const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Irsend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count, dest, tag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IRSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR <br></tt>  
  
<P> 
Start a ready mode nonblocking send.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IRECV (buf, count, datatype, source, tag, comm, request)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in receive buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each receive buffer element (handle)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
<P> 
 <tt> MPI_Irecv(buf, count, datatype, source, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count, source, tag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IRECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER  COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR <br></tt>  
  
<P> 
Start a nonblocking receive.  
<P> 
These calls allocate a communication  
request object and associate it with the request handle (the argument  
<font face="sans-serif"> request</font>).  
The request can be used later to  
query the status of the communication or wait for its completion.  
<P> 
A nonblocking send call indicates that the  
system may start copying data out of the send buffer.  
The sender should not   
modify  
any part of the send  
buffer after a nonblocking send operation is called, until the send completes.  
<P> 
A nonblocking receive call indicates that the system may start  
writing data into the receive buffer.  The receiver should not access  
any part of the  
receive buffer after a nonblocking receive operation is called,  
until the receive completes.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
To prevent problems with the argument copying and register optimization done  
  by Fortran compilers, please note the hints in   
Sections <a href="node420.htm#Node420">Problems With Fortran Bindings for <font face="sans-serif"> MPI</font> 
</a>--<a href="node441.htm#Node441">Comparison with C 
</a>.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node62.htm#Node62"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node61.htm#Node61"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node64.htm#Node64"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node61.htm#Node61"> Nonblocking Communication</a>
<b>Next: </b><a href="node64.htm#Node64"> Communication Completion</a>
<b>Previous: </b><a href="node62.htm#Node62"> Communication Request Objects</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

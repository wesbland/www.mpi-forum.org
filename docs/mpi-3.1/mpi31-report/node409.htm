<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Fortran Support Through the <tt>mpi_f08</tt> Module</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node409">356. Fortran Support Through the mpi_f08 Module</span></h2>
<a href="node408.htm#Node408"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node410.htm#Node410"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node410.htm#Node410"> Fortran Support Through the <tt>mpi</tt> Module</a>
<b>Previous: </b><a href="node408.htm#Node408"> Overview</a>
<p>
  
  
<P> 
An <font face="sans-serif"> MPI</font> implementation providing a Fortran interface must   
provide a module named <tt>mpi_f08</tt>   
that can be used in a Fortran program.  
Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a>  
describes restrictions if the compiler does not support all the needed features.  
Within all <font face="sans-serif"> MPI</font> function specifications,  
the first of the set of two Fortran routine interface specifications is provided by this module.  
This module must:   
<P> 
<ul> 
 
<li>Define all named <font face="sans-serif"> MPI</font> constants.  
 
<li>Declare <font face="sans-serif"> MPI</font> functions that return a value.  
 
<li>Provide explicit interfaces according to the Fortran routine interface specifications.  
This module therefore guarantees compile-time argument checking  
for all arguments which are not <tt> TYPE(*)</tt>,  
with the following exception:   
<ul> 
 
<li>[] Only one Fortran interface is defined  
for functions that are deprecated as of <font face="sans-serif"> MPI-3.0</font>.  
This interface must be provided as an explicit interface according to the rules  
defined for the <tt>mpi</tt> module, see   
Section <a href="node410.htm#Node410">Fortran Support Through the <tt>mpi</tt> Module 
</a>.  
 
<br> 
<em> Advice to users.</em>  
 <P> 
It is strongly recommended that developers substitute calls to deprecated routines  
when upgrading from <tt>mpif.h</tt> or the <tt>mpi</tt> module to the  
<tt>mpi_f08</tt> module.   
 (<em> End of advice to users.</em>) <br> 
</ul> 
<br> 
 
<li>Define the derived type <tt> MPI_Status</tt>, and define all <font face="sans-serif"> MPI</font> handles with uniquely named handle types  
(instead of <tt> INTEGER</tt> handles, as in the <tt>mpi</tt> module).  
This is reflected in the first Fortran   
binding in each <font face="sans-serif"> MPI</font> function definition throughout this document  
(except for the deprecated routines).  
 
<li>Overload the operators <tt>.EQ.</tt> and <tt>.NE.</tt> to allow the comparison   
of these <font face="sans-serif"> MPI</font> handles with <tt>.EQ.</tt>, <tt>.NE.</tt>, <tt>==</tt> and <tt>/=</tt>.  
 
<li>Use the <tt> ASYNCHRONOUS</tt> attribute to protect the buffers  
of nonblocking operations,  
and set the  <tt> LOGICAL</tt> compile-time constant  
<font face="sans-serif">  MPI_ASYNC_PROTECTS_NONBLOCKING</font> to <tt> .TRUE.</tt>  
if the underlying Fortran compiler supports the <tt> ASYNCHRONOUS</tt>   
attribute for <font face="sans-serif"> MPI</font> communication (as part of TS 29113).  
See Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a>  
for older compiler versions.  
 
<li>Set the <tt> LOGICAL</tt> compile-time constant   
<font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> to <tt> .TRUE.</tt> and  
declare choice buffers using the Fortran 2008 TS 29113 features assumed-type  
and assumed-rank, i.e., <tt>TYPE(*), DIMENSION(..)</tt>  
in all nonblocking, split collective and persistent communication routines,   
if the underlying Fortran compiler supports it.  
With this, non-contiguous sub-arrays can be used as buffers  
in nonblocking routines.  
 
<br> 
<em> Rationale.</em>  
<P> 
In all blocking routines, i.e., if the choice-buffer   
is not declared as <tt> ASYNCHRONOUS</tt>, the TS 29113 feature is not needed  
for the support of non-contiguous buffers because the compiler  
can pass the buffer by in-and-out-copy through a contiguous scratch  
array.  
 (<em> End of rationale.</em>) <br> 
 
<li>Set the <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> compile-time   
constant to <tt> .FALSE.</tt> and  
declare choice buffers with a compiler-dependent mechanism that  
overrides type checking if the underlying Fortran compiler does not  
support the Fortran 2008 TS 29113 assumed-type and assumed-rank notation.  
In this case, the use of non-contiguous sub-arrays as buffers  
in nonblocking calls may be invalid.  
See Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a> for details.  
</ul> 
<br> 
<ul> 
 
<li>Declare each argument with an <tt> INTENT</tt> of <tt> IN</tt>,   
<tt> OUT</tt>, or <tt> INOUT</tt> as defined in this standard.  
</ul> 
<br> 
 
<br> 
<em> Rationale.</em>  
<P> 
For these definitions in the <tt>mpi_f08</tt> bindings,   
  in most cases, <tt> INTENT(IN)</tt> is used if the C interface  
  uses call-by-value. For all buffer arguments and for   
  <tt> OUT</tt> and <tt> INOUT</tt> dummy arguments  
  that allow one of the non-ordinary Fortran constants   
  (see <font face="sans-serif">  MPI_BOTTOM</font>, etc. in Section <a href="node28.htm#Node28">Named Constants 
</a>)  
  as input, an <tt> INTENT</tt> is not specified.   
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
If a dummy argument is declared with <tt> INTENT(OUT)</tt>,   
then the Fortran standard stipulates that the actual argument  
becomes undefined upon invocation of the <font face="sans-serif"> MPI</font> routine,  
i.e., it may be overwritten by some other values, e.g. zeros;  
according to [<a href="node522.htm#-Bib40">40</a>], 12.5.2.4 Ordinary dummy variables,  
Paragraph 17:  
``If a dummy argument has INTENT(OUT), the actual argument becomes undefined   
at the time the association is established, except [<i>...</i>]''.  
For example, if the dummy argument is an   
assumed-size array and the actual argument is a strided array,  
the call may be implemented with copy-in and copy-out  
of the argument. In the case of <tt> INTENT(OUT)</tt> the copy-in may  
be suppressed by the optimization and the routine starts execution using  
an array of undefined values. If the routine stores fewer   
elements into the dummy argument than is provided in the actual  
argument, then the remaining locations are overwritten with these  
undefined values.  
See also both advices to implementors in  
Section <a href="node410.htm#Node410">Fortran Support Through the <tt>mpi</tt> Module 
</a>.  
 (<em> End of advice to users.</em>) <br> 
<ul> 
 
<li>Declare all <font face="sans-serif"> ierror</font> output arguments as <tt> OPTIONAL</tt>,  
except for user-defined callback functions   
(e.g.,   
<tt> COMM_COPY_ATTR_FUNCTION</tt>) and predefined callbacks (e.g., <font face="sans-serif"> MPI_COMM_NULL_COPY_FN</font>).  
</ul> 
<br> 
 
<br> 
<em> Rationale.</em>  
<P> 
For user-defined callback functions   
(e.g., <tt> COMM_COPY_ATTR_FUNCTION</tt>) and their  
predefined callbacks (e.g., <font face="sans-serif"> MPI_COMM_NULL_COPY_FN</font>),   
the <font face="sans-serif"> ierror</font> argument is not optional.   
The <font face="sans-serif"> MPI</font> library must always call these routines with an actual <font face="sans-serif"> ierror</font> argument.   
Therefore, these user-defined functions need not check whether the <font face="sans-serif"> MPI</font>  
library calls these routines with or without an actual <font face="sans-serif"> ierror</font> output argument.  
 (<em> End of rationale.</em>) <br> 
The <font face="sans-serif"> MPI</font> Fortran bindings in the <tt>mpi_f08</tt> module are designed based on  
the Fortran 2008 standard [<a href="node522.htm#-Bib40">40</a>] together with the  
Technical Specification ``TS 29113 Further Interoperability with C'' [<a href="node522.htm#-Bib41">41</a>]  
of the ISO/IEC JTC1/SC22/WG5 (Fortran) working group.  
 <P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The features in TS 29113 on further interoperability with C were decided on by   
ISO/IEC JTC1/SC22/WG5 and designed by PL22.3 (formerly J3) to support a higher level of integration   
between Fortran-specific features and C than was provided in the Fortran 2008 standard;  
part of this design is based on requirements from the <font face="sans-serif"> MPI</font> Forum to support <font face="sans-serif"> MPI-3.0</font>.  
According to [<a href="node522.htm#-Bib41">41</a>],  
``an ISO/IEC TS is reviewed after three years in order to   
decide whether it will be confirmed for a further three years,   
revised to become an International Standard, or withdrawn.   
If the ISO/IEC TS is confirmed, it is reviewed again after a   
further three years, at which time it must either be transformed   
into an International Standard or be withdrawn.''  
<P> 
The TS 29113 contains the following language features that are needed for the <font face="sans-serif"> MPI</font> bindings   
in the <tt>mpi_f08</tt> module: assumed-type and assumed-rank.  
It is important that any possible actual argument can be used  
for such dummy arguments, e.g., scalars, arrays, assumed-shape arrays, assumed-size arrays,  
allocatable arrays, and with any element type, e.g., <tt> REAL</tt>,    
<tt> CHARACTER*5</tt>, <tt> CHARACTER*(*)</tt>, sequence derived types, or <tt> BIND(C)</tt> derived types.  
Especially for backward compatibility reasons,   
it is important that any possible actual argument  
in an implicit interface implementation of a choice buffer dummy argument  
(e.g., with <tt> mpif.h</tt> without argument-checking)   
can be used in an implementation with assumed-type and assumed-rank  
argument in an explicit interface (e.g., with the <tt> mpi_f08</tt> module).   
 <P> 
A further feature useful for <font face="sans-serif"> MPI</font> is the extension of the   
semantics of the <tt> ASYNCHRONOUS</tt> attribute:   
In F2003 and F2008, this attribute could be used only to  
protect buffers of Fortran asynchronous I/O.  
With TS 29113, this attribute now also covers asynchronous communication   
occurring within library routines written in C.  
<P> 
The <font face="sans-serif"> MPI</font> Forum hereby wishes to acknowledge this   
important effort by the Fortran PL22.3 and WG5 committee.   
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node408.htm#Node408"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node410.htm#Node410"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node410.htm#Node410"> Fortran Support Through the <tt>mpi</tt> Module</a>
<b>Previous: </b><a href="node408.htm#Node408"> Overview</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

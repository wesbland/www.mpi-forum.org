<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>File Views</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node317">291. File Views</span></h1>
<a href="node315.htm#Node316"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node318.htm#Node318"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node318.htm#Node318"> Data Access</a>
<b>Previous: </b><a href="node315.htm#Node316"> Reserved File Hints</a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_SET_VIEW(fh, disp, etype, filetype, datarep, info)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN disp</TD><TD>displacement (integer)</TD></TR>  
<TR><TD> IN etype</TD><TD>elementary datatype (handle)</TD></TR>  
<TR><TD> IN filetype</TD><TD>filetype (handle)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info) <br></tt>  
 <tt> MPI_File_set_view(fh, disp, etype, filetype, datarep, info, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: disp <br>TYPE(MPI_Datatype), INTENT(IN) :: etype, filetype <br>CHARACTER(LEN=*), INTENT(IN) :: datarep <br>TYPE(MPI_Info), INTENT(IN) :: info <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_SET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, INFO, IERROR)<br> INTEGER FH, ETYPE, FILETYPE, INFO, IERROR <br>CHARACTER*(*) DATAREP <br>INTEGER(KIND=MPI_OFFSET_KIND) DISP <br></tt>  
  
<P> 
The <font face="sans-serif"> MPI_FILE_SET_VIEW</font> routine changes the process's view  
of the data in the file.  
The start of the view is set to <font face="sans-serif"> disp</font>;  
the type of data is set to <font face="sans-serif"> etype</font>;  
the distribution of data to processes is set to <font face="sans-serif"> filetype</font>;  
and the representation of data in the file is set to <font face="sans-serif"> datarep</font>.  
In addition,  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> resets the individual file pointers and the  
shared file pointer to zero.  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> is collective;  
the values for <font face="sans-serif"> datarep</font> and  
the extents of <font face="sans-serif"> etype</font> in the file data representation  
must be identical on all processes  
in the group;  
values for <font face="sans-serif"> disp</font>, <font face="sans-serif"> filetype</font>, and <font face="sans-serif"> info</font> may vary.  
The datatypes passed in <font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font> must  
be committed.  
<P> 
The <font face="sans-serif"> etype</font> always specifies the data layout in the file.  
If <font face="sans-serif"> etype</font> is a portable datatype (see Section <a href="node23.htm#Node23">Semantic Terms 
</a>),  
the extent of <font face="sans-serif"> etype</font> is computed by scaling any displacements  
in the datatype to match the file data representation.  
If <font face="sans-serif"> etype</font> is not a portable datatype,  
no scaling is done when computing the extent of <font face="sans-serif"> etype</font>.  
The user must be careful when using nonportable <font face="sans-serif"> etype</font>s  
in heterogeneous environments;  
see Section <a href="node332.htm#Node332">Datatypes for File Interoperability 
</a> for further details.  
<P> 
If <font face="sans-serif">  MPI_MODE_SEQUENTIAL</font> mode was specified when the file was opened,  
the special displacement <font face="sans-serif">  MPI_DISPLACEMENT_CURRENT</font> must be  
passed in <font face="sans-serif"> disp</font>.  
This sets the displacement to the current position  
of the shared file pointer.  
<font face="sans-serif">  MPI_DISPLACEMENT_CURRENT</font> is invalid unless the amode for the  
file has <font face="sans-serif">  MPI_MODE_SEQUENTIAL</font> set.    
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
For some sequential files,  
such as those corresponding to magnetic tapes or streaming network connections,  
the <em> displacement</em> may not be meaningful.  
<font face="sans-serif">  MPI_DISPLACEMENT_CURRENT</font> allows the view to be changed  
for these types of files.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
It is expected that a call to <font face="sans-serif"> MPI_FILE_SET_VIEW</font>  
will immediately follow  
<font face="sans-serif"> MPI_FILE_OPEN</font> in numerous instances.  
A high-quality implementation will ensure that this behavior is efficient.  
 (<em> End of advice to implementors.</em>) <br> 
The <font face="sans-serif"> disp</font> displacement argument specifies the position  
(absolute offset in bytes from the beginning of the file)  
where the view begins.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> disp</font> can be used to skip headers or when the file includes a  
sequence of data segments that are to be accessed in different patterns  
(see Figure <a href="node317.htm#Figure30">30 
</a>).  
Separate views,  
each using a different displacement and filetype,  
can be used to access each segment.  
<P> 
  <div style=\"text-align:center\"><P><img width=598 height=170 src="io-disp.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 30: </b><span id="Figure30">Displacements</span><P> 
  
    
 (<em> End of advice to users.</em>) <br> 
An <em> etype</em> (<em> elementary</em> datatype)  
is the unit of data access and positioning.  
It can be any <font face="sans-serif"> MPI</font> predefined or derived datatype.  
Derived etypes can be constructed  
by using any of the <font face="sans-serif"> MPI</font> datatype constructor routines,  
provided all resulting typemap displacements are  
non-negative and monotonically nondecreasing.  
Data access is performed in etype units,  
reading or writing whole data items of type etype.  
Offsets are expressed as a count of etypes;  
file pointers point to the beginning of etypes.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In order to ensure interoperability in a heterogeneous environment,  
additional restrictions must be observed when constructing the  
<font face="sans-serif"> etype</font>  
(see Section <a href="node331.htm#Node331">File Interoperability 
</a>).  
 (<em> End of advice to users.</em>) <br> 
A filetype is either a single etype or a derived <font face="sans-serif"> MPI</font> datatype  
constructed from multiple instances of the same etype.  
In addition,  
the extent of any hole in the filetype  
must be a multiple of the etype's extent.  
These displacements are not required to be distinct,  
but they cannot be negative,  
and they must be monotonically nondecreasing.  
<P> 
If the file is opened for writing,  
neither the etype nor the filetype is permitted  
to contain overlapping regions.  
This restriction is equivalent to the ``datatype used in a receive  
cannot specify overlapping regions'' restriction for communication.  
Note that filetypes from different processes may still  
overlap each other.  
<P> 
If a filetype has holes in it,  
then the data in the holes is inaccessible to the calling process.  
However, the <font face="sans-serif"> disp</font>, <font face="sans-serif"> etype</font>, and <font face="sans-serif"> filetype</font>  
arguments can be changed via future calls to <font face="sans-serif"> MPI_FILE_SET_VIEW</font>  
to access a different part of the file.  
<P> 
It is erroneous to use absolute addresses in the construction  
of the etype and filetype.  
<P> 
The <font face="sans-serif"> info</font> argument is used to provide information  
regarding file access patterns and file system specifics  
to direct optimization  
(see Section <a href="node315.htm#Node315">File Info 
</a>).  
The constant <font face="sans-serif">  MPI_INFO_NULL</font> refers to the null info  
and can be used when no info needs to be specified.  
<P> 
The <font face="sans-serif"> datarep</font> argument is a string that specifies  
the representation of data in the file.  
See the file interoperability section  
(Section <a href="node331.htm#Node331">File Interoperability 
</a>)  
for details and a discussion of valid values.  
<P> 
The user is responsible for ensuring that all nonblocking requests  
and split collective operations  
on <font face="sans-serif"> fh</font> have been completed before calling  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> --- otherwise, the call to  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> is erroneous.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_GET_VIEW(fh, disp, etype, filetype, datarep)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> OUT disp</TD><TD>displacement (integer)</TD></TR>  
<TR><TD> OUT etype</TD><TD>elementary datatype (handle)</TD></TR>  
<TR><TD> OUT filetype</TD><TD>filetype (handle)</TD></TR>  
<TR><TD> OUT datarep</TD><TD>data representation (string)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep) <br></tt>  
 <tt> MPI_File_get_view(fh, disp, etype, filetype, datarep, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp <br>TYPE(MPI_Datatype), INTENT(OUT) :: etype, filetype <br>CHARACTER(LEN=*), INTENT(OUT) :: datarep <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_GET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, IERROR)<br> INTEGER FH, ETYPE, FILETYPE, IERROR <br>CHARACTER*(*) DATAREP <br>INTEGER(KIND=MPI_OFFSET_KIND) DISP <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_FILE_GET_VIEW</font> returns the process's view  
of the data in the file.  
The current value of the displacement is returned in <font face="sans-serif"> disp</font>.  
The <font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font> are new datatypes  
with typemaps equal to the typemaps  
of the current etype and filetype, respectively.  
<P> 
The data representation is returned in <font face="sans-serif"> datarep</font>.  
The user is responsible for ensuring that <font face="sans-serif"> datarep</font> is  
large enough to hold the returned data representation string.  
The length of a data representation string is limited to the value of  
<font face="sans-serif">  MPI_MAX_DATAREP_STRING</font>.  
<P> 
In addition, if a portable datatype was used to set the current view,  
then the corresponding datatype returned by <font face="sans-serif"> MPI_FILE_GET_VIEW</font>  
is also a portable datatype.  
If <font face="sans-serif"> etype</font> or <font face="sans-serif"> filetype</font> are derived datatypes,  
the user is responsible for freeing them.  
The <font face="sans-serif"> etype</font> and <font face="sans-serif"> filetype</font> returned are both in a  
committed state.  
<P> 

<P>
<hr>
<a href="node315.htm#Node316"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node318.htm#Node318"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node318.htm#Node318"> Data Access</a>
<b>Previous: </b><a href="node315.htm#Node316"> Reserved File Hints</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Group Accessors</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node151">144. Group Accessors</span></h2>
<a href="node150.htm#Node150"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node150.htm#Node150"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node152.htm#Node152"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node150.htm#Node150"> Group Management</a>
<b>Next: </b><a href="node152.htm#Node152"> Group Constructors</a>
<b>Previous: </b><a href="node150.htm#Node150"> Group Management</a>
<p>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GROUP_SIZE(group, size)</TD></TR>  
<TR><TD> IN group</TD><TD>  group (handle)</TD></TR>  
<TR><TD> OUT size</TD><TD> number of processes in the group (integer) </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Group_size(MPI_Group group, int *size) <br></tt>  
<P> 
 <tt> MPI_Group_size(group, size, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GROUP_SIZE(GROUP, SIZE, IERROR)<br> INTEGER GROUP, SIZE, IERROR <br></tt>  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GROUP_RANK(group, rank)</TD></TR>  
<TR><TD> IN group</TD><TD>  group (handle)</TD></TR>  
<TR><TD> OUT rank</TD><TD>  rank of the calling process in  
group, or   
<font face="sans-serif">  MPI_UNDEFINED</font> if the process is not a  
member (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Group_rank(MPI_Group group, int *rank) <br></tt>  
<P> 
 <tt> MPI_Group_rank(group, rank, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(OUT) :: rank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GROUP_RANK(GROUP, RANK, IERROR)<br> INTEGER GROUP, RANK, IERROR <br></tt>  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GROUP_TRANSLATE_RANKS(group1, n, ranks1, group2, ranks2)</TD></TR>  
<TR><TD> IN group1</TD><TD>group1  (handle)</TD></TR>  
<TR><TD> IN n</TD><TD> number of ranks in <font face="sans-serif"> ranks1</font> and  
<font face="sans-serif"> ranks2</font> arrays (integer)</TD></TR>  
<TR><TD> IN ranks1</TD><TD>array of zero or more valid ranks in group1</TD></TR>  
<TR><TD> IN group2</TD><TD>group2 (handle)</TD></TR>  
<TR><TD> OUT ranks2</TD><TD>array of corresponding ranks in group2,  
<font face="sans-serif">  MPI_UNDEFINED</font>   
when no correspondence exists.</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]) <br></tt>  
<P> 
 <tt> MPI_Group_translate_ranks(group1, n, ranks1, group2, ranks2, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>INTEGER, INTENT(IN) :: n, ranks1(n) <br>INTEGER, INTENT(OUT) :: ranks2(n) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GROUP_TRANSLATE_RANKS(GROUP1, N, RANKS1, GROUP2, RANKS2, IERROR)<br> INTEGER GROUP1, N, RANKS1(*), GROUP2, RANKS2(*), IERROR <br></tt>  
  
<P> 
This function is important for determining the relative numbering of the  
same processes in two different groups.  For instance, if one knows the  
ranks of certain processes in the group of <font face="sans-serif">  MPI_COMM_WORLD</font>, one might want  
to know their ranks in a subset of that group.  
<P> 
<font face="sans-serif">  MPI_PROC_NULL</font> is a valid rank for input to  
<font face="sans-serif"> MPI_GROUP_TRANSLATE_RANKS</font>, which returns  
<font face="sans-serif">  MPI_PROC_NULL</font> as the translated rank.  
 <P> 
<TABLE><TR><TD COLSPAN=2>MPI_GROUP_COMPARE(group1, group2, result)</TD></TR>  
<TR><TD> IN group1</TD><TD> first group (handle)</TD></TR>  
<TR><TD> IN group2</TD><TD> second group (handle)</TD></TR>  
<TR><TD> OUT result</TD><TD> result (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Group_compare(MPI_Group group1,MPI_Group group2, int *result) <br></tt>  
<P> 
 <tt> MPI_Group_compare(group1, group2, result, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>INTEGER, INTENT(OUT) :: result <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GROUP_COMPARE(GROUP1, GROUP2, RESULT, IERROR)<br> INTEGER GROUP1, GROUP2, RESULT, IERROR <br></tt>  
  
<P> 
<font face="sans-serif">  MPI_IDENT</font> results if the group members and group order is  
exactly the same in both groups.  This happens for instance if  
<font face="sans-serif"> group1</font> and <font face="sans-serif"> group2</font> are the same handle.  
<font face="sans-serif">  MPI_SIMILAR</font> results if the group members are the same but the order is  
different. <font face="sans-serif">  MPI_UNEQUAL</font> results otherwise.  
<P> 

<P>
<hr>
<a href="node150.htm#Node150"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node150.htm#Node150"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node152.htm#Node152"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node150.htm#Node150"> Group Management</a>
<b>Next: </b><a href="node152.htm#Node152"> Group Constructors</a>
<b>Previous: </b><a href="node150.htm#Node150"> Group Management</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

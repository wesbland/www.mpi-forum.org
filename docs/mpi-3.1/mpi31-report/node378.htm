<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Control Variables</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node378">337. Control Variables</span></h2>
<a href="node377.htm#Node377"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node379"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node378.htm#Node379"> Control Variable Query Functions</a>
<b>Previous: </b><a href="node377.htm#Node377"> Datatype System</a>
<p>
  
  
<P> 
The routines described in this section of the <font face="sans-serif"> MPI</font> tool information interface  
specification focus on the ability to list, query, and possibly set  
control variables exposed by the <font face="sans-serif"> MPI</font> implementation. These variables  
can typically be used by the user to fine tune properties and  
configuration settings of the <font face="sans-serif"> MPI</font> implementation.  On many systems,  
such variables can be set using environment variables, although other  
configuration mechanisms may be available, such as configuration files  
or central configuration registries. A typical example that is  
available in several existing <font face="sans-serif"> MPI</font> implementations is the ability to  
specify an ``eager limit,'' i.e., an upper bound on the size of  
messages sent or received using an eager protocol.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node377.htm#Node377"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node379"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node378.htm#Node379"> Control Variable Query Functions</a>
<b>Previous: </b><a href="node377.htm#Node377"> Datatype System</a>
<p>
<hr><h3><span id="Node379">337.1. Control Variable Query Functions</span></h3>
<a href="node378.htm#Node378"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node380"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node380"> Example: Printing All Control Variables</a>
<b>Previous: </b><a href="node378.htm#Node378"> Control Variables</a>
<p>
An  
<font face="sans-serif"> MPI</font> implementation exports a set of <i>N</i> control variables through  
the <font face="sans-serif"> MPI</font> tool information interface. If <i>N</i> is zero, then the <font face="sans-serif"> MPI</font> implementation does not export  
any control variables, otherwise the provided control variables are  
indexed from <i>0</i> to <i>N-1</i>. This index number is used in subsequent  
calls to identify the individual variables.  
<P> 
An <font face="sans-serif"> MPI</font> implementation is allowed to increase the number of control  
variables during the execution of an <font face="sans-serif"> MPI</font> application  
when new variables become available through dynamic loading. However,  
<font face="sans-serif"> MPI</font> implementations are not allowed to change the index of a control  
variable or to delete a variable once it has been added to the set. When  
a variable becomes inactive, e.g., through dynamic unloading, accessing  
its value should return a corresponding error code.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
While the <font face="sans-serif"> MPI</font> tool information interface guarantees that indices or variable properties do not change  
during a particular run of an <font face="sans-serif"> MPI</font> program, it does not provide a similar  
guarantee between runs.   
 (<em> End of advice to users.</em>) <br> 
The following function can be used to query the number of control  
variables, <i>num_cvar</i>:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_NUM(num_cvar)</TD></TR>  
<TR><TD> OUT num_cvar</TD><TD>returns number of control variables (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_cvar_get_num(int *num_cvar) <br></tt>  
<P> 
The function <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> provides access to additional  
information for each variable.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_INFO(cvar_index, name, name_len, verbosity, datatype, enumtype, desc, desc_len,   
bind, scope)</TD></TR>  
<TR><TD> IN cvar_index</TD><TD>index of the control variable to be queried, value between <i>0</i> and <i>num_cvar-1</i> (integer)</TD></TR>  
 <TR><TD> OUT name</TD><TD>buffer to return the string containing the name of the control variable (string)</TD></TR> <TR><TD> INOUT name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>   
<TR><TD> OUT verbosity</TD><TD>verbosity level of this variable (integer)</TD></TR>  
<TR><TD> OUT datatype</TD><TD><font face="sans-serif"> MPI</font> datatype of the information stored in the control   
variable (handle)</TD></TR>  
<TR><TD> OUT enumtype</TD><TD>optional descriptor for enumeration information (handle)</TD></TR>  
 <TR><TD> OUT desc</TD><TD>buffer to return the string containing a description of the control variable (string)</TD></TR> <TR><TD> INOUT desc_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> desc</font> (integer)</TD></TR>   
<TR><TD>OUT bind</TD><TD>type of <font face="sans-serif"> MPI</font> object to which this variable must be bound (integer)</TD></TR>  
<TR><TD> OUT scope</TD><TD>scope of when changes to this variable are possible (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_T_cvar_get_info(int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope) <br></tt>  
<P> 
After a successful call to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> for a  
particular variable, subsequent calls to this routine that query  
information about the same variable must return the same  
information. An <font face="sans-serif"> MPI</font> implementation is not allowed to alter any of  
the returned values.  
<P> 
If any <font face="sans-serif">  OUT</font> parameter to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> is a <font face="sans-serif">  NULL</font> pointer, the implementation will ignore the parameter and not return a value for the parameter.  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the control variable as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
If completed successfully, the routine is required to return a name of  
at least length one.  The name must be unique with respect to all  
other names for control variables used by the <font face="sans-serif"> MPI</font>  
implementation.  
<P> 
The argument <font face="sans-serif"> verbosity</font> returns the verbosity level of the  
variable (see Section <a href="node373.htm#Node373">Verbosity Levels 
</a>).  
<P> 
The argument <font face="sans-serif"> datatype</font> returns the <font face="sans-serif"> MPI</font> datatype that is used  
to represent the control variable.    
<P> 
If the variable is of type  
<font face="sans-serif">  MPI_INT</font>, <font face="sans-serif"> MPI</font> can optionally specify an enumeration for the  
values represented by this variable and return it in  
<font face="sans-serif"> enumtype</font>. In this case, <font face="sans-serif"> MPI</font> returns an enumeration  
identifier, which can then be used to gather more information as described in  
Section <a href="node377.htm#Node377">Datatype System 
</a>. Otherwise, <font face="sans-serif"> enumtype</font> is set to   
<font face="sans-serif">  MPI_T_ENUM_NULL</font>. If the datatype is  
not <font face="sans-serif">  MPI_INT</font> or the argument <font face="sans-serif"> enumtype</font> is the   
null pointer, no enumeration type is returned.  
<P> 
 The arguments <font face="sans-serif"> desc</font> and <font face="sans-serif"> desc_len</font> are used to return a description of the control variable as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
Returning a description is optional. If an <font face="sans-serif"> MPI</font> implementation  
does not return a description, the first character for  
<font face="sans-serif"> desc</font> must be set to the null character and <font face="sans-serif"> desc_len</font>  
must be set to one at the return of this call.  
<P> 
The parameter <font face="sans-serif"> bind</font> returns the type of the <font face="sans-serif"> MPI</font> object to  
which the variable must be bound or the value  
<font face="sans-serif">  MPI_T_BIND_NO_OBJECT</font> (see Section <a href="node374.htm#Node374">Binding <font face="sans-serif"> MPI</font> Tool Information Interface Variables to <font face="sans-serif"> MPI</font> Objects 
</a>).  
<P> 
The scope of a variable determines whether changing a variable's value is  
either local to the process or must be done by the user across multiple processes. The latter  
is further split into variables that require changes in a group  
of processes and those that require collective changes among all  
connected processes. Both cases can require all processes either to be  
set to consistent (but potentially different) values or to equal values on   
every participating process. The description provided with the variable  
must contain an explanation about the requirements and/or restrictions  
for setting the particular variable.  
<P> 
On  
successful  
return from   
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>,   
the argument  
<font face="sans-serif"> scope</font> will be set to one of the constants listed in  
Table <a href="node378.htm#Table15">15 
</a>.  
<P> 
If the name of a control variable is equivalent across connected processes,   
the following <font face="sans-serif"> OUT</font>  parameters must be identical: <font face="sans-serif"> verbosity</font>,   
<font face="sans-serif"> datatype</font>, <font face="sans-serif"> enumtype</font>, <font face="sans-serif"> bind</font>, and <font face="sans-serif"> scope</font>.   
The returned description must be equivalent.  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Scope Constant</TD><TD ALIGN="LEFT"> Description </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif">  MPI_T_SCOPE_CONSTANT</font></TD><TD ALIGN="LEFT"> read-only, value is constant </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_READONLY</font></TD><TD ALIGN="LEFT"> read-only, cannot be written, but can change </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_LOCAL</font></TD><TD ALIGN="LEFT"> may be writeable, writing is a local operation </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_GROUP</font></TD><TD ALIGN="LEFT"> may be writeable, must be done to a group of processes, </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> all processes in a group must be set to  consistent values</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_GROUP_EQ</font></TD><TD ALIGN="LEFT"> may be writeable, must be done to a group of processes, </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> all processes in a group must be set to the same value</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_ALL</font></TD><TD ALIGN="LEFT"> may be writeable, must be done to all processes, </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> all connected processes must be set to  consistent values</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_T_SCOPE_ALL_EQ</font></TD><TD ALIGN="LEFT"> may be writeable, must be done to all processes, </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> all connected processes must be set to the same value</TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br> 
<b>Table 15: </b><span id="Table15">Scopes for control variables</span><P> 
  
   
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> scope</font> of a variable only indicates if a variable might be  
changeable; it is not a guarantee that it can be changed at any time.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_INDEX(name, cvar_index)</TD></TR>  
<TR><TD> IN name</TD><TD>name of the control variable (string)</TD></TR>  
<TR><TD> OUT cvar_index</TD><TD>index of the control variable (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_cvar_get_index(const char *name, int *cvar_index) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CVAR_GET_INDEX</font> is a function for retrieving   
the index of a control variable given a known variable name. The   
<font face="sans-serif"> name</font> parameter is provided by the caller, and <font face="sans-serif"> cvar_index</font>   
is returned by the <font face="sans-serif"> MPI</font> implementation. The <font face="sans-serif"> name</font> parameter is a string   
terminated with a null character.  
<P> 
This routine returns <font face="sans-serif">  MPI_SUCCESS</font> on success and returns   
<font face="sans-serif">  MPI_T_ERR_INVALID_NAME</font> if <font face="sans-serif"> name</font> does not match the name of   
any control variable provided by the implementation at the time of the call.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This routine is provided to enable fast retrieval of control variables by a tool,   
assuming it knows the name of the variable for which it is looking.   
The number of variables exposed by the implementation can change over time,   
so it is not possible for the tool to simply iterate over the list of variables   
once at initialization. Although using <font face="sans-serif"> MPI</font> implementation specific variable   
names is not portable across <font face="sans-serif"> MPI</font> implementations, tool developers may choose to   
take this route for lower overhead at runtime because the tool will not have to   
iterate over the entire set of variables to find a specific one.   
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node378.htm#Node378"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node380"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node380"> Example: Printing All Control Variables</a>
<b>Previous: </b><a href="node378.htm#Node378"> Control Variables</a>
<p>
<hr><h3><span id="Node380">337.2. Example: Printing All Control Variables</span></h3>
<a href="node378.htm#Node379"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node381"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node381"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node378.htm#Node379"> Control Variable Query Functions</a>
<p>
<br><b> Example</b>  
  
<P> 
The following example shows how the <font face="sans-serif"> MPI</font> tool information interface  
can be used to query and to print the names of all available control variables.  
<P> 
<br> 
<pre><tt>#include &lt;stdio.h&gt; 
#include &lt;stdlib.h&gt; 
#include &lt;mpi.h&gt; 
 
int main(int argc, char *argv[]) { 
  int i, err, num, namelen, bind, verbose, scope; 
  int threadsupport; 
  char name[100]; 
  MPI_Datatype datatype; 
         
  err=MPI_T_init_thread(MPI_THREAD_SINGLE,&amp;threadsupport); 
  if (err!=MPI_SUCCESS)  
    return err; 
                 
  err=MPI_T_cvar_get_num(&amp;num); 
  if (err!=MPI_SUCCESS)  
    return err; 
 
  for (i=0; i&lt;num; i++) { 
    namelen=100; 
    err=MPI_T_cvar_get_info(i, name, &amp;namelen, 
            &amp;verbose, &amp;datatype, NULL, 
            NULL, NULL, /*no description */ 
            &amp;bind, &amp;scope); 
    if (err!=MPI_SUCCESS || err!=MPI_T_ERR_INVALID_INDEX) return err; 
    printf("Var %i: %s\n", i, name); 
  } 
   
  err=MPI_T_finalize(); 
  if (err!=MPI_SUCCESS)  
    return 1; 
  else 
    return 0; 
} 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node378.htm#Node379"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node381"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node381"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node378.htm#Node379"> Control Variable Query Functions</a>
<p>
<hr><h3><span id="Node381">337.3. Handle Allocation and Deallocation</span></h3>
<a href="node378.htm#Node380"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node382"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node382"> Control Variable Access Functions</a>
<b>Previous: </b><a href="node378.htm#Node380"> Example: Printing All Control Variables</a>
<p>
Before reading or writing the value of a variable, a user must first  
allocate a handle of type <font face="sans-serif"> MPI_T_cvar_handle</font>  for the variable by binding it to an <font face="sans-serif"> MPI</font>  
object (see also Section <a href="node374.htm#Node374">Binding <font face="sans-serif"> MPI</font> Tool Information Interface Variables to <font face="sans-serif"> MPI</font> Objects 
</a>).   
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Handles used in the <font face="sans-serif"> MPI</font> tool information interface are distinct from handles used in the remaining parts of the <font face="sans-serif"> MPI</font> standard because they must be usable  
before <font face="sans-serif"> MPI_INIT</font> and after  
<font face="sans-serif"> MPI_FINALIZE</font>. Further, accessing  
handles, in particular for performance variables, can be time critical  
and having a separate handle space enables optimizations.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_HANDLE_ALLOC(cvar_index, obj_handle, handle, count)</TD></TR>  
<TR><TD> IN cvar_index</TD><TD>index of control variable for which handle is to be allocated (index)</TD></TR>  
<TR><TD> IN obj_handle</TD><TD>reference to a handle of the <font face="sans-serif"> MPI</font> object to which this variable is supposed to be bound (pointer)</TD></TR>  
<TR><TD> OUT handle</TD><TD>allocated handle (handle)</TD></TR>  
<TR><TD> OUT count</TD><TD>number of elements used to represent this variable (integer)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_T_cvar_handle_alloc(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count) <br></tt>  
<P> 
This routine binds the control variable specified by the argument  
<font face="sans-serif"> index</font> to an <font face="sans-serif"> MPI</font> object. The object is passed in the  
argument <font face="sans-serif"> obj_handle</font> as an address to a local variable  
that stores the object's handle.   
The argument <font face="sans-serif"> obj_handle</font> is ignored if the <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call for this control variable returned <font face="sans-serif">  MPI_T_BIND_NO_OBJECT</font> in the argument <font face="sans-serif"> bind</font>.  
The handle allocated to reference the variable is returned  
in the argument <font face="sans-serif"> handle</font>.  Upon successful return,  
<font face="sans-serif"> count</font> contains the number of elements (of the datatype  
returned by a previous <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call)  
used to represent this variable.   
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> count</font> can  
be different based on the <font face="sans-serif"> MPI</font> object to which the control variable was bound. For example,  
variables bound to communicators could have a count that matches  
the size of the communicator.  
<P> 
It is not portable to pass references to predefined <font face="sans-serif"> MPI</font> object handles,  
such as <font face="sans-serif">  MPI_COMM_WORLD</font> to this routine, since their  
implementation depends on the <font face="sans-serif"> MPI</font> library. Instead, such object handles should  
be stored in a local variable and the address of this local variable  
should be passed into <font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>.  
 (<em> End of advice to users.</em>) <br> 
The value of <font face="sans-serif"> cvar_index</font> should   
be in the range <i>0</i> to <i>num_cvar-1</i>, where <i>num_cvar</i> is the number of available control   
variables as determined from a prior call to <font face="sans-serif"> MPI_T_CVAR_GET_NUM</font>.    
The type of the <font face="sans-serif"> MPI</font> object it references must be consistent with the type   
returned in the <font face="sans-serif"> bind</font> argument in a prior call to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_HANDLE_FREE(handle)</TD></TR>  
<TR><TD> INOUT handle</TD><TD>handle to be freed (handle)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_T_cvar_handle_free(MPI_T_cvar_handle *handle) <br></tt>  
<P> 
When a handle is no longer needed, a user of the <font face="sans-serif"> MPI</font> tool information interface should call  
<font face="sans-serif"> MPI_T_CVAR_HANDLE_FREE</font> to free the handle and the  
associated resources in the <font face="sans-serif"> MPI</font> implementation.  On a successful  
return, <font face="sans-serif"> MPI</font> sets the handle to <font face="sans-serif">  MPI_T_CVAR_HANDLE_NULL</font>.  
<P> 

<P>
<hr>
<a href="node378.htm#Node380"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node382"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node382"> Control Variable Access Functions</a>
<b>Previous: </b><a href="node378.htm#Node380"> Example: Printing All Control Variables</a>
<p>
<hr><h3><span id="Node382">337.4. Control Variable Access Functions</span></h3>
<a href="node378.htm#Node381"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node383"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node383"> Example: Reading the Value of a Control Variable</a>
<b>Previous: </b><a href="node378.htm#Node381"> Handle Allocation and Deallocation</a>
<p>
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_READ(handle, buf)</TD></TR>  
<TR><TD> IN handle</TD><TD>handle to the control variable to be read (handle)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of storage location for variable value (choice)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_T_cvar_read(MPI_T_cvar_handle handle, void* buf) <br></tt>  
<P> 
This routine queries the value of a control  
variable identified by the argument <font face="sans-serif"> handle</font> and stores the  
result in the buffer identified by the parameter <font face="sans-serif"> buf</font>.    
The  
user must ensure that the buffer is of the appropriate  
size to hold the entire value of the control variable (based on the  
returned datatype and count from prior corresponding calls to  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> and <font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>, respectively).  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_WRITE(handle, buf)</TD></TR>  
<TR><TD> IN handle</TD><TD>handle to the control variable to be written (handle)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of storage location for variable value (choice)</TD></TR>  
</TABLE>  
<P> 
  
 <tt> int MPI_T_cvar_write(MPI_T_cvar_handle handle, const void* buf) <br></tt>  
<P> 
This routine sets the value of the control variable  
identified by the argument <font face="sans-serif"> handle</font> to the data stored in the  
buffer identified by the parameter <font face="sans-serif"> buf</font>.    
The user must ensure that the  
buffer is of the appropriate size to  
hold the entire value of the control variable (based on the returned  
datatype and count from prior corresponding calls to  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> and <font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>, respectively).  
<P> 
If the variable has a global scope (as returned by a prior corresponding  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call), any write call to  
this variable must be issued by the user in all connected (as defined   
in Section <a href="node256.htm#Node256">Releasing Connections 
</a>) <font face="sans-serif"> MPI</font> processes.   
If the variable has group scope, any write call to  
this variable must be issued by the user in all <font face="sans-serif"> MPI</font> processes in  
the group, which must be described by the <font face="sans-serif"> MPI</font> implementation   
in the description by the <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>.  
<P> 
In both cases, the user must ensure that the writes in all processes are  
consistent. If the scope is either <font face="sans-serif">  MPI_T_SCOPE_ALL_EQ</font>  
or <font face="sans-serif">  MPI_T_SCOPE_GROUP_EQ</font> this means that the variable in all  
processes must be set to the same value.  
<P> 
If it is not possible to change the variable at the time the call is  
made, the function returns either <font face="sans-serif">  MPI_T_ERR_CVAR_SET_NOT_NOW</font>, if  
there may be a later time at which the variable could be set, or  
<font face="sans-serif">  MPI_T_ERR_CVAR_SET_NEVER</font>, if the variable cannot be set for the  
remainder of the application's execution.  
<P> 

<P>
<hr>
<a href="node378.htm#Node381"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node383"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node378.htm#Node383"> Example: Reading the Value of a Control Variable</a>
<b>Previous: </b><a href="node378.htm#Node381"> Handle Allocation and Deallocation</a>
<p>
<hr><h3><span id="Node383">337.5. Example: Reading the Value of a Control Variable</span></h3>
<a href="node378.htm#Node382"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node384.htm#Node384"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node384.htm#Node384"> Performance Variables</a>
<b>Previous: </b><a href="node378.htm#Node382"> Control Variable Access Functions</a>
<p>
<br><b> Example</b>  
  
<P> 
The following example shows a routine that can be used to  
query the value with a control variable with a given index. The  
example assumes that the variable is intended to be bound to  
an <font face="sans-serif"> MPI</font> communicator.  
<P> 
<br> 
<pre><tt>int getValue_int_comm(int index, MPI_Comm comm, int *val) { 
  int err,count; 
  MPI_T_cvar_handle handle; 
  
  /* This example assumes that the variable index */ 
  /* can be bound to a communicator */ 
 
  err=MPI_T_cvar_handle_alloc(index,&amp;comm,&amp;handle,&amp;count); 
  if (err!=MPI_SUCCESS) return err; 
 
  /* The following assumes that the variable is */ 
  /* represented by a single integer */ 
 
  err=MPI_T_cvar_read(handle,val); 
  if (err!=MPI_SUCCESS) return err; 
 
  err=MPI_T_cvar_handle_free(&amp;handle); 
  return err; 
} 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node378.htm#Node382"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node378.htm#Node378"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node384.htm#Node384"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Next: </b><a href="node384.htm#Node384"> Performance Variables</a>
<b>Previous: </b><a href="node378.htm#Node382"> Control Variable Access Functions</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

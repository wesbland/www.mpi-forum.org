<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Gather</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node103">98. Gather</span></h1>
<a href="node102.htm#Node102"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node104.htm#Node104"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node104.htm#Node104"> Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></a>
<b>Previous: </b><a href="node102.htm#Node102"> Example using <font face="sans-serif"> MPI_BCAST</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GATHER(sendbuf, sendcount, sendtype, recvbuf,  
recvcount, recvtype, root, comm)</TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice,  
significant only at root)</TD></TR>  
<TR><TD> IN  recvcount</TD><TD> number of elements for any single receive (non-negative  
integer, significant only at root)</TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of recv buffer elements  
(significant only at root) (handle)</TD></TR>  
<TR><TD> IN  root</TD><TD> rank of receiving process (integer)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Gather(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
<P> 
 <tt> MPI_Gather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount, root <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR <br></tt>  
<P> 
  
<P> 
If <font face="sans-serif"> comm</font> is an intracommunicator,   
each process (root process included) sends the contents of its send  
buffer to the root process.  The root process receives the messages and  
stores them in rank order.  
The outcome is <em> as if</em> each of the <font face="sans-serif"> n</font> processes in the group  
(including the root process) had executed a call to  
<P><img width=235 height=10 src="img94.gif" alt="Image file"><P>
 and the  
root had executed <font face="sans-serif"> n</font> calls to  
<P><img width=345 height=10 src="img95.gif" alt="Image file"><P>
 where  
<font face="sans-serif"> extent(recvtype)</font> is the type extent obtained from a call to  
<font face="sans-serif"> MPI_Type_get_extent</font>.  
<P> 
An alternative description is that the <font face="sans-serif"> n</font> messages sent by the  
processes in the group are concatenated in rank order, and the  
resulting message is received by the root as if by a call to  
<font face="sans-serif"> MPI_RECV(recvbuf, recvcount<i>&#183;</i>n, recvtype, ...)</font>.  
<P> 
The receive buffer is ignored for all non-root processes.  
<P> 
General, derived datatypes are allowed for both <font face="sans-serif"> sendtype</font>  
and <font face="sans-serif"> recvtype</font>.  
The type signature of <font face="sans-serif"> sendcount, sendtype</font> on  
each process  
must be equal to the type signature of  
<font face="sans-serif"> recvcount, recvtype</font> at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each process and the root.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
All arguments to the function are significant on process <font face="sans-serif"> root</font>,  
while on other processes, only arguments <font face="sans-serif"> sendbuf, sendcount,  
sendtype, root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all processes.  
<P> 
The specification of counts and types  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
<P> 
Note that the <font face="sans-serif"> recvcount</font> argument at the root indicates  
the number of items it receives from <em> each</em> process, not the total number  
of items it receives.  
<P> 
The ``in place'' option  for intracommunicators is specified by passing  
<font face="sans-serif">  MPI_IN_PLACE</font> as   
the value of <font face="sans-serif"> sendbuf</font> at the root.  In such a case,  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an intercommunicator, then the call involves all   
processes in the intercommunicator, but with one group (group A) defining the  
root process.  All processes in the other group (group B) pass the same value  
in argument   
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
passes the value <font face="sans-serif">  MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other processes in group A pass the value <font face="sans-serif">  MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.   
Data is gathered from all processes in group B to the root.  
The send  
buffer arguments of the processes in group B must be consistent with  
the receive buffer argument of the root.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GATHERV(sendbuf, sendcount, sendtype, recvbuf,  
recvcounts, displs, recvtype, root, comm)</TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice,  
significant only at root)</TD></TR>  
<TR><TD> IN  recvcounts</TD><TD>non-negative  
integer array (of length group size)  
containing the number of elements that are received from each process  
(significant only at root)</TD></TR>  
<TR><TD> IN  displs</TD><TD> integer array (of length group size).  Entry  
<font face="sans-serif"> i</font> specifies the displacement relative to <font face="sans-serif"> recvbuf</font> at  
which to place the incoming data from process <font face="sans-serif"> i</font> (significant only  
at root)</TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of recv buffer elements  
(significant only at root) (handle)</TD></TR>  
<TR><TD> IN  root</TD><TD> rank of receiving process (integer)</TD></TR>  
<TR><TD> IN  comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Gatherv(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
<P> 
 <tt> MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*), root <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, ROOT, COMM, IERROR <br></tt>  
<P> 
  
<P> 
<font face="sans-serif"> MPI_GATHERV</font> extends the functionality of <font face="sans-serif"> MPI_GATHER</font>  
by allowing a varying count of data from each process, since  
<font face="sans-serif"> recvcounts</font>  
is now an array.  It also allows more flexibility as to where the data  
is placed on the root, by providing the new argument, <font face="sans-serif"> displs</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an intracommunicator,   
the outcome is <em> as if</em> each process, including the root process,  
sends a message to the root,  
<P><img width=232 height=10 src="img96.gif" alt="Image file"><P>
 and the root executes <font face="sans-serif"> n</font> receives,  
<P><img width=345 height=11 src="img97.gif" alt="Image file"><P>
The   
data received from process <font face="sans-serif"> j</font> is placed into <font face="sans-serif"> recvbuf</font> of the <font face="sans-serif"> root</font>  
process beginning at offset <font face="sans-serif"> displs[j]</font> elements (in terms of the  
<font face="sans-serif"> recvtype</font>).  
<P> 
The receive buffer is ignored for all non-root processes.  
<P> 
The type signature implied by <font face="sans-serif"> sendcount, sendtype</font> on process <font face="sans-serif"> i</font>  
must be equal to the type signature implied by <font face="sans-serif"> recvcounts[i], recvtype</font>  
at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each process and the root.  
Distinct type maps between sender and receiver are still allowed,  
as illustrated in Example <a href="node104.htm#Node104">Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font> 
</a>.  
<P> 
All arguments to the function are significant on process <font face="sans-serif"> root</font>,  
while on other processes, only arguments <font face="sans-serif"> sendbuf, sendcount,  
sendtype, root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all processes.  
<P> 
The specification of counts, types, and displacements  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
<P> 
The ``in place'' option  for intracommunicators is specified by passing  
<font face="sans-serif">  MPI_IN_PLACE</font> as   
the value of <font face="sans-serif"> sendbuf</font> at the root.  In such a case,  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an intercommunicator, then the call involves all   
processes in the intercommunicator, but with one group (group A) defining the  
root process.  All processes in the other group (group B) pass the same value  
in argument   
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
passes the value <font face="sans-serif">  MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other processes in group A pass the value <font face="sans-serif">  MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.   
Data is gathered from all processes in group B to the root.  
The send  
buffer arguments of the processes in group B must be consistent with  
the receive buffer argument of the root.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node102.htm#Node102"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node104.htm#Node104"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node104.htm#Node104"> Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></a>
<b>Previous: </b><a href="node102.htm#Node102"> Example using <font face="sans-serif"> MPI_BCAST</font></a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

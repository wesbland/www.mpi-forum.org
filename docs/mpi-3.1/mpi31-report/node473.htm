<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-CNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Process Topologies C Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node473">399. Process Topologies C Bindings</span></h2>
<a href="node472.htm#Node472"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node474.htm#Node474"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node474.htm#Node474"> MPI Environmental Management C Bindings</a>
<b>Previous: </b><a href="node472.htm#Node472"> Groups, Contexts, Communicators, and Caching C Bindings</a>
<p>
 <tt> int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]) <br></tt>  
 <tt> int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart) <br></tt>  
 <tt> int MPI_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]) <br></tt>  
 <tt> int MPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank) <br></tt>  
 <tt> int MPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank) <br></tt>  
 <tt> int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest) <br></tt>  
 <tt> int MPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Cartdim_get(MPI_Comm comm, int *ndims) <br></tt>  
 <tt> int MPI_Dims_create(int nnodes, int ndims, int dims[]) <br></tt>  
 <tt> int MPI_Dist_graph_create(MPI_Comm comm_old, int n, const int sources[], const int degrees[], const int destinations[], const int weights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph) <br></tt>  
 <tt> int MPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph) <br></tt>  
 <tt> int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]) <br></tt>  
 <tt> int MPI_Dist_graph_neighbors_count(MPI_Comm comm, int *indegree, int *outdegree, int *weighted) <br></tt>  
 <tt> int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph) <br></tt>  
 <tt> int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]) <br></tt>  
 <tt> int MPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank) <br></tt>  
 <tt> int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]) <br></tt>  
 <tt> int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors) <br></tt>  
 <tt> int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges) <br></tt>  
 <tt> int MPI_Ineighbor_allgather(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Ineighbor_allgatherv(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Ineighbor_alltoall(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Ineighbor_alltoallv(const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Ineighbor_alltoallw(const void* sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Neighbor_allgather(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Neighbor_allgatherv(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Neighbor_alltoall(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Neighbor_alltoallv(const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Neighbor_alltoallw(const void* sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) <br></tt>  
 <tt> int MPI_Topo_test(MPI_Comm comm, int *status) <br></tt>  
<P> 

<P>
<hr>
<a href="node472.htm#Node472"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node474.htm#Node474"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node474.htm#Node474"> MPI Environmental Management C Bindings</a>
<b>Previous: </b><a href="node472.htm#Node472"> Groups, Contexts, Communicators, and Caching C Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

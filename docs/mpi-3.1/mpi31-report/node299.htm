<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-ei/ei-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Associating Information with Status</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node299">274. Associating Information with Status</span></h1>
<a href="node298.htm#Node298"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node300.htm#Node300"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node300.htm#Node300"> <font face="sans-serif"> MPI</font> and Threads</a>
<b>Previous: </b><a href="node298.htm#Node298"> Examples</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> supports several different types of requests besides those for  
point-to-point operations.  
These range from   
<font face="sans-serif"> MPI</font> calls for I/O to generalized requests.  It is desirable to allow  
these calls to use the same request mechanism, which allows one to  
wait or test on different types of requests.  However,  
<font face="sans-serif"> MPI_ {TEST<i>|</i>WAIT }{ANY<i>|</i>SOME<i>|</i>ALL }</font> returns a status  
with information about the request.  With the generalization of  
requests, one needs to define what information will be returned in the  
status object.  
<P> 
Each <font face="sans-serif"> MPI</font>  
call fills in the appropriate fields in the status object.    
Any unused fields will  
have undefined values.  A call to  
<font face="sans-serif"> MPI_ {TEST<i>|</i>WAIT }{ANY<i>|</i>SOME<i>|</i>ALL }</font> can modify any of  
the fields in the status object.  Specifically, it can modify fields  
that are undefined.  The fields with meaningful values for a given  
request are defined in the sections with the new request.  
<P> 
Generalized requests raise additional considerations.  Here, the user  
provides the functions to deal with the request.  Unlike other <font face="sans-serif"> MPI</font>  
calls, the user needs to provide the information to be returned in  
the status.  The status argument is provided directly to the callback  
function where the status needs to be set.  Users can directly set the  
values in 3 of the 5 status values.  The count and cancel fields are  
opaque.  To overcome this,   
these calls   
are provided:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_ELEMENTS(status, datatype, count)</TD></TR>  
<TR><TD> INOUT status</TD><TD>status  
with which to associate count  
(Status)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype associated with count (handle)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements to associate with status (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) <br></tt>  
<P> 
 <tt> MPI_Status_set_elements(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: status <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: count <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_STATUS_SET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)<br> INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERROR <br></tt>  
<P> 
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_ELEMENTS_X(status, datatype, count)</TD></TR>  
<TR><TD> INOUT status</TD><TD>status  
with which to associate count  
(Status)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype associated with count (handle)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements to associate with status (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) <br></tt>  
<P> 
 <tt> MPI_Status_set_elements_x(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: status <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND = MPI_COUNT_KIND), INTENT(IN) :: count <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_STATUS_SET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)<br> INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE, IERROR<br>INTEGER (KIND=MPI_COUNT_KIND) COUNT <br></tt>  
<P> 
These functions modify the opaque part of <font face="sans-serif"> status</font> so that a call  
to <font face="sans-serif"> MPI_GET_ELEMENTS</font>   
or <font face="sans-serif"> MPI_GET_ELEMENTS_X</font>  
will return <font face="sans-serif"> count</font>.  
<font face="sans-serif"> MPI_GET_COUNT</font> will return a compatible value.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The number of elements is set instead of the count because the former  
can deal with   
a   
nonintegral number of datatypes.  
 (<em> End of rationale.</em>) <br> 
A subsequent call to <font face="sans-serif"> MPI_GET_COUNT(status, datatype,   
count)</font>,  
<font face="sans-serif"> MPI_GET_ELEMENTS(status, datatype,   
count)</font>, or<font face="sans-serif"> MPI_GET_ELEMENTS_X(status, datatype,  
count)</font>  
must use a  
<font face="sans-serif"> datatype</font> argument that has the same type signature as the  
<font face="sans-serif"> datatype</font> argument that was used in the call to  
<font face="sans-serif"> MPI_STATUS_SET_ELEMENTS</font> or <font face="sans-serif"> MPI_STATUS_SET_ELEMENTS_X</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The requirement of matching type signatures for these calls is similar to the restriction that holds   
when   
<font face="sans-serif"> count</font> is set by a  
receive operation: in that case, the calls to  
<font face="sans-serif"> MPI_GET_COUNT</font>, <font face="sans-serif"> MPI_GET_ELEMENTS</font>, and <font face="sans-serif"> MPI_GET_ELEMENTS_X</font> must use a  
<font face="sans-serif"> datatype</font> with the same signature as the datatype used in the  
receive call.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_CANCELLED(status, flag)</TD></TR>  
<TR><TD> INOUT status</TD><TD>status   
with which to associate cancel flag  
(Status)</TD></TR>  
<TR><TD> IN flag</TD><TD>if true indicates request was cancelled (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Status_set_cancelled(MPI_Status *status, int flag) <br></tt>  
<P> 
 <tt> MPI_Status_set_cancelled(status, flag, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: status <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_STATUS_SET_CANCELLED(STATUS, FLAG, IERROR)<br> INTEGER STATUS(MPI_STATUS_SIZE), IERROR<br>LOGICAL FLAG <br></tt>  
<P> 
  
<P> 
If <font face="sans-serif"> flag</font> is set to <font face="sans-serif">  true</font> then a subsequent call to   
<font face="sans-serif"> MPI_TEST_CANCELLED(status, flag)</font> will also return <font face="sans-serif"> flag = true</font>,  
otherwise it will return   
<font face="sans-serif"> false</font>.    
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Users are advised not to reuse the status fields for values other than  
those for which they were intended.  Doing so may lead to unexpected  
results when using the status object.  For example, calling  
<font face="sans-serif"> MPI_GET_ELEMENTS</font> may cause an error if the value is  
out of range or it may be impossible to detect such an error.  The  
<font face="sans-serif"> extra_state</font> argument provided with a generalized request can  
be used to return information that does not logically belong in  
status.  
Furthermore, modifying the values in a status set internally by <font face="sans-serif"> MPI</font>,  
e.g., <font face="sans-serif"> MPI_RECV</font>, may lead to unpredictable results and is  
strongly discouraged.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node298.htm#Node298"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node300.htm#Node300"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node300.htm#Node300"> <font face="sans-serif"> MPI</font> and Threads</a>
<b>Previous: </b><a href="node298.htm#Node298"> Examples</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-CNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>One-Sided Communications C Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node477">403. One-Sided Communications C Bindings</span></h2>
<a href="node476.htm#Node476"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node478.htm#Node478"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node478.htm#Node478"> External Interfaces C Bindings</a>
<b>Previous: </b><a href="node476.htm#Node476"> Process Creation and Management C Bindings</a>
<p>
 <tt> int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) <br></tt>  
 <tt> int MPI_Compare_and_swap(const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win) <br></tt>  
 <tt> int MPI_Fetch_and_op(const void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win) <br></tt>  
 <tt> int MPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) <br></tt>  
 <tt> int MPI_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) <br></tt>  
 <tt> int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) <br></tt>  
 <tt> int MPI_Raccumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
 <tt> int MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
 <tt> int MPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
 <tt> int MPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
 <tt> int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) <br></tt>  
 <tt> int MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) <br></tt>  
 <tt> int MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size) <br></tt>  
 <tt> int MPI_Win_complete(MPI_Win win) <br></tt>  
 <tt> int MPI_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win) <br></tt>  
 <tt> int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win) <br></tt>  
 <tt> int MPI_Win_detach(MPI_Win win, const void *base) <br></tt>  
 <tt> int MPI_Win_fence(int assert, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_flush(int rank, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_flush_all(MPI_Win win) <br></tt>  
 <tt> int MPI_Win_flush_local(int rank, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_flush_local_all(MPI_Win win) <br></tt>  
 <tt> int MPI_Win_free(MPI_Win *win) <br></tt>  
 <tt> int MPI_Win_get_group(MPI_Win win, MPI_Group *group) <br></tt>  
 <tt> int MPI_Win_get_info(MPI_Win win, MPI_Info *info_used) <br></tt>  
 <tt> int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_lock_all(int assert, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_post(MPI_Group group, int assert, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_set_info(MPI_Win win, MPI_Info info) <br></tt>  
 <tt> int MPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr) <br></tt>  
 <tt> int MPI_Win_start(MPI_Group group, int assert, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_sync(MPI_Win win) <br></tt>  
 <tt> int MPI_Win_test(MPI_Win win, int *flag) <br></tt>  
 <tt> int MPI_Win_unlock(int rank, MPI_Win win) <br></tt>  
 <tt> int MPI_Win_unlock_all(MPI_Win win) <br></tt>  
 <tt> int MPI_Win_wait(MPI_Win win) <br></tt>  
<P> 

<P>
<hr>
<a href="node476.htm#Node476"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node478.htm#Node478"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node478.htm#Node478"> External Interfaces C Bindings</a>
<b>Previous: </b><a href="node476.htm#Node476"> Process Creation and Management C Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

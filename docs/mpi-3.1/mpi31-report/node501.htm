<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Collective Communication Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node501">427. Collective Communication Fortran Bindings</span></h2>
<a href="node500.htm#Node500"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node502.htm#Node502"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node502.htm#Node502"> Groups, Contexts, Communicators, and Caching Fortran Bindings</a>
<b>Previous: </b><a href="node500.htm#Node500"> Datatypes Fortran Bindings</a>
<p>
 <tt> MPI_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_ALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_ALLREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, IERROR <br></tt>  
 <tt> MPI_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE, RECVCOUNTS(*), RDISPLS(*), RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPES(*), RECVCOUNTS(*), RDISPLS(*), RECVTYPES(*), COMM, IERROR <br></tt>  
 <tt> MPI_BARRIER(COMM, IERROR) <br> INTEGER COMM, IERROR <br></tt>  
 <tt> MPI_BCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, IERROR) <br> &lt;type&gt;  BUFFER(*) <br>INTEGER COUNT, DATATYPE, ROOT, COMM, IERROR <br></tt>  
 <tt> MPI_EXSCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) <br>&lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, IERROR  <br></tt>  
 <tt> MPI_GATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR <br></tt>  
 <tt> MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, ROOT, COMM, IERROR <br></tt>  
 <tt> MPI_IALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IALLREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE, RECVCOUNTS(*), RDISPLS(*), RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPES(*), RECVCOUNTS(*), RDISPLS(*), RECVTYPES(*), COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IBARRIER(COMM, REQUEST, IERROR) <br> INTEGER COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IBCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt;  BUFFER(*) <br>INTEGER COUNT, DATATYPE, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IEXSCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) <br>&lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR  <br></tt>  
 <tt> MPI_IGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IREDUCE_SCATTER(SENDBUF, RECVBUF, RECVCOUNTS, DATATYPE, OP, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER RECVCOUNTS(*), DATATYPE, OP, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_IREDUCE_SCATTER_BLOCK(SENDBUF, RECVBUF, RECVCOUNT, DATATYPE, OP, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER RECVCOUNT, DATATYPE, OP, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_ISCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_ISCATTER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_ISCATTERV(SENDBUF, SENDCOUNTS, DISPLS, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNTS(*), DISPLS(*), SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_OP_COMMUTATIVE(OP, COMMUTE, IERROR) <br> LOGICAL COMMUTE <br>INTEGER OP, IERROR <br></tt>  
 <tt> MPI_OP_CREATE( USER_FN, COMMUTE, OP, IERROR) <br> EXTERNAL USER_FN<br>LOGICAL COMMUTE <br>INTEGER OP, IERROR <br></tt>  
 <tt> MPI_OP_FREE(OP, IERROR) <br> INTEGER OP, IERROR <br></tt>  
 <tt> MPI_REDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, ROOT, COMM, IERROR <br></tt>  
 <tt> MPI_REDUCE_LOCAL(INBUF, INOUTBUF, COUNT, DATATYPE, OP, IERROR) <br> &lt;type&gt; INBUF(*), INOUTBUF(*) <br>INTEGER COUNT, DATATYPE, OP, IERROR <br></tt>  
 <tt> MPI_REDUCE_SCATTER(SENDBUF, RECVBUF, RECVCOUNTS, DATATYPE, OP, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER RECVCOUNTS(*), DATATYPE, OP, COMM, IERROR <br></tt>  
 <tt> MPI_REDUCE_SCATTER_BLOCK(SENDBUF, RECVBUF, RECVCOUNT, DATATYPE, OP, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER RECVCOUNT, DATATYPE, OP, COMM, IERROR <br></tt>  
 <tt> MPI_SCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, IERROR <br></tt>  
 <tt> MPI_SCATTER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR <br></tt>  
 <tt> MPI_SCATTERV(SENDBUF, SENDCOUNTS, DISPLS, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNTS(*), DISPLS(*), SENDTYPE, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR <br></tt>  
<P> 

<P>
<hr>
<a href="node500.htm#Node500"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node502.htm#Node502"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node502.htm#Node502"> Groups, Contexts, Communicators, and Caching Fortran Bindings</a>
<b>Previous: </b><a href="node500.htm#Node500"> Datatypes Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

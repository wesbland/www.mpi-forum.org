<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-CNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Groups, Contexts, Communicators, and Caching C Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node472">398. Groups, Contexts, Communicators, and Caching C Bindings</span></h2>
<a href="node471.htm#Node471"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node473.htm#Node473"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node473.htm#Node473"> Process Topologies C Bindings</a>
<b>Previous: </b><a href="node471.htm#Node471"> Collective Communication C Bindings</a>
<p>
 <tt> int MPI_COMM_DUP_FN(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_COMM_NULL_COPY_FN(MPI_Comm oldcomm, int comm_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_COMM_NULL_DELETE_FN(MPI_Comm comm, int comm_keyval, void *attribute_val, void *extra_state) <br></tt>  
 <tt> int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) <br></tt>  
 <tt> int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) <br></tt>  
 <tt> int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) <br></tt>  
 <tt> int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_free(MPI_Comm *comm) <br></tt>  
 <tt> int MPI_Comm_free_keyval(int *comm_keyval) <br></tt>  
 <tt> int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) <br></tt>  
 <tt> int MPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used) <br></tt>  
 <tt> int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) <br></tt>  
 <tt> int MPI_Comm_group(MPI_Comm comm, MPI_Group *group) <br></tt>  
 <tt> int MPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request) <br></tt>  
 <tt> int MPI_Comm_rank(MPI_Comm comm, int *rank) <br></tt>  
 <tt> int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group) <br></tt>  
 <tt> int MPI_Comm_remote_size(MPI_Comm comm, int *size) <br></tt>  
 <tt> int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) <br></tt>  
 <tt> int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info) <br></tt>  
 <tt> int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name) <br></tt>  
 <tt> int MPI_Comm_size(MPI_Comm comm, int *size) <br></tt>  
 <tt> int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm) <br></tt>  
 <tt> int MPI_Comm_test_inter(MPI_Comm comm, int *flag) <br></tt>  
 <tt> int MPI_Group_compare(MPI_Group group1,MPI_Group group2, int *result) <br></tt>  
 <tt> int MPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_free(MPI_Group *group) <br></tt>  
 <tt> int MPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Group_rank(MPI_Group group, int *rank) <br></tt>  
 <tt> int MPI_Group_size(MPI_Group group, int *size) <br></tt>  
 <tt> int MPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]) <br></tt>  
 <tt> int MPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) <br></tt>  
 <tt> int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) <br></tt>  
 <tt> int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) <br></tt>  
 <tt> int MPI_TYPE_DUP_FN(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_TYPE_NULL_COPY_FN(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_TYPE_NULL_DELETE_FN(MPI_Datatype datatype, int type_keyval, void *attribute_val, void *extra_state) <br></tt>  
 <tt> int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) <br></tt>  
 <tt> int MPI_Type_delete_attr(MPI_Datatype datatype, int type_keyval) <br></tt>  
 <tt> int MPI_Type_free_keyval(int *type_keyval) <br></tt>  
 <tt> int MPI_Type_get_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val, int *flag) <br></tt>  
 <tt> int MPI_Type_get_name(MPI_Datatype datatype, char *type_name, int *resultlen) <br></tt>  
 <tt> int MPI_Type_set_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val) <br></tt>  
 <tt> int MPI_Type_set_name(MPI_Datatype datatype, const char *type_name) <br></tt>  
 <tt> int MPI_WIN_DUP_FN(MPI_Win oldwin, int win_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_WIN_NULL_COPY_FN(MPI_Win oldwin, int win_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag) <br></tt>  
 <tt> int MPI_WIN_NULL_DELETE_FN(MPI_Win win, int win_keyval, void *attribute_val, void *extra_state) <br></tt>  
 <tt> int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state) <br></tt>  
 <tt> int MPI_Win_delete_attr(MPI_Win win, int win_keyval) <br></tt>  
 <tt> int MPI_Win_free_keyval(int *win_keyval) <br></tt>  
 <tt> int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) <br></tt>  
 <tt> int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen) <br></tt>  
 <tt> int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) <br></tt>  
 <tt> int MPI_Win_set_name(MPI_Win win, const char *win_name) <br></tt>  
<P> 

<P>
<hr>
<a href="node471.htm#Node471"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node473.htm#Node473"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node473.htm#Node473"> Process Topologies C Bindings</a>
<b>Previous: </b><a href="node471.htm#Node471"> Collective Communication C Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

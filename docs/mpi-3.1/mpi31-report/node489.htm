<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Process Topologies Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node489">415. Process Topologies Fortran 2008 Bindings</span></h2>
<a href="node488.htm#Node488"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node490.htm#Node490"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node490.htm#Node490"> MPI Environmental Management Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node488.htm#Node488"> Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</a>
<p>
 <tt> MPI_Cart_coords(comm, rank, maxdims, coords, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: rank, maxdims <br>INTEGER, INTENT(OUT) :: coords(maxdims) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_create(comm_old, ndims, dims, periods, reorder, comm_cart, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm_old <br>INTEGER, INTENT(IN) :: ndims, dims(ndims) <br>LOGICAL, INTENT(IN) :: periods(ndims), reorder <br>TYPE(MPI_Comm), INTENT(OUT) :: comm_cart <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_get(comm, maxdims, dims, periods, coords, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: maxdims <br>INTEGER, INTENT(OUT) :: dims(maxdims), coords(maxdims) <br>LOGICAL, INTENT(OUT) :: periods(maxdims) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_map(comm, ndims, dims, periods, newrank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: ndims, dims(ndims) <br>LOGICAL, INTENT(IN) :: periods(ndims) <br>INTEGER, INTENT(OUT) :: newrank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_rank(comm, coords, rank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: coords(*) <br>INTEGER, INTENT(OUT) :: rank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_shift(comm, direction, disp, rank_source, rank_dest, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: direction, disp <br>INTEGER, INTENT(OUT) :: rank_source, rank_dest <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cart_sub(comm, remain_dims, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>LOGICAL, INTENT(IN) :: remain_dims(*) <br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Cartdim_get(comm, ndims, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: ndims <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Dims_create(nnodes, ndims, dims, ierror) <br> INTEGER, INTENT(IN) :: nnodes, ndims <br>INTEGER, INTENT(INOUT) :: dims(ndims) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Dist_graph_create(comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm_old <br>INTEGER, INTENT(IN) :: n, sources(n), degrees(n), destinations(*) <br>INTEGER, INTENT(IN) :: weights(*) <br>TYPE(MPI_Info), INTENT(IN) :: info <br>LOGICAL, INTENT(IN) :: reorder <br>TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Dist_graph_create_adjacent(comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm_old <br>INTEGER, INTENT(IN) :: indegree, sources(indegree), outdegree, <br>    destinations(outdegree) <br>INTEGER, INTENT(IN) :: sourceweights(*), destweights(*) <br>TYPE(MPI_Info), INTENT(IN) :: info <br>LOGICAL, INTENT(IN) :: reorder <br>TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Dist_graph_neighbors(comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: maxindegree, maxoutdegree <br>INTEGER, INTENT(OUT) :: sources(maxindegree),<br>    destinations(maxoutdegree) <br>INTEGER :: sourceweights(*), destweights(*) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: indegree, outdegree <br>LOGICAL, INTENT(OUT) :: weighted <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm_old <br>INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*) <br>LOGICAL, INTENT(IN) :: reorder <br>TYPE(MPI_Comm), INTENT(OUT) :: comm_graph <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graph_get(comm, maxindex, maxedges, index, edges, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: maxindex, maxedges <br>INTEGER, INTENT(OUT) :: index(maxindex), edges(maxedges) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graph_map(comm, nnodes, index, edges, newrank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*) <br>INTEGER, INTENT(OUT) :: newrank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graph_neighbors(comm, rank, maxneighbors, neighbors, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: rank, maxneighbors <br>INTEGER, INTENT(OUT) :: neighbors(maxneighbors) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graph_neighbors_count(comm, rank, nneighbors, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: rank <br>INTEGER, INTENT(OUT) :: nneighbors <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Graphdims_get(comm, nnodes, nedges, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: nnodes, nedges <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Ineighbor_allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Ineighbor_allgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount <br>INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Ineighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Ineighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf <br>INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*),<br>    recvcounts(*), rdispls(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Ineighbor_alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf <br>INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS ::<br>    sdispls(*), rdispls(*) <br>TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*),<br>    recvtypes(*) <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Neighbor_allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Neighbor_allgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Neighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Neighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*),<br>    rdispls(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Neighbor_alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcounts(*), recvcounts(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*) <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Topo_test(comm, status, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
<P> 

<P>
<hr>
<a href="node488.htm#Node488"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node490.htm#Node490"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node490.htm#Node490"> MPI Environmental Management Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node488.htm#Node488"> Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

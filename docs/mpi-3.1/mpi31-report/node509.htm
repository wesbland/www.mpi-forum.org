<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>I/O Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node509">435. I/O Fortran Bindings</span></h2>
<a href="node508.htm#Node508"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node510.htm#Node510"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node510.htm#Node510"> Language Bindings Fortran Bindings</a>
<b>Previous: </b><a href="node508.htm#Node508"> External Interfaces Fortran Bindings</a>
<p>
 <tt> MPI_CONVERSION_FN_NULL(USERBUF, DATATYPE, COUNT, FILEBUF, POSITION, EXTRA_STATE, IERROR) <br> &lt;TYPE&gt; USERBUF(*), FILEBUF(*) <br>INTEGER COUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) POSITION <br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br></tt>  
 <tt> MPI_FILE_CLOSE(FH, IERROR)<br> INTEGER FH, IERROR <br></tt>  
 <tt> MPI_FILE_DELETE(FILENAME, INFO, IERROR)<br> CHARACTER*(*) FILENAME <br>INTEGER INFO, IERROR <br></tt>  
 <tt> MPI_FILE_GET_AMODE(FH, AMODE, IERROR)<br> INTEGER FH, AMODE, IERROR <br></tt>  
 <tt> MPI_FILE_GET_ATOMICITY(FH, FLAG, IERROR)<br> INTEGER FH, IERROR<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_FILE_GET_BYTE_OFFSET(FH, OFFSET, DISP, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET, DISP <br></tt>  
 <tt> MPI_FILE_GET_GROUP(FH, GROUP, IERROR)<br> INTEGER FH, GROUP, IERROR <br></tt>  
 <tt> MPI_FILE_GET_INFO(FH, INFO_USED, IERROR)<br> INTEGER FH, INFO_USED, IERROR <br></tt>  
 <tt> MPI_FILE_GET_POSITION(FH, OFFSET, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_GET_POSITION_SHARED(FH, OFFSET, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_GET_SIZE(FH, SIZE, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) SIZE <br></tt>  
 <tt> MPI_FILE_GET_TYPE_EXTENT(FH, DATATYPE, EXTENT, IERROR)<br> INTEGER FH, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTENT <br></tt>  
 <tt> MPI_FILE_GET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, IERROR)<br> INTEGER FH, ETYPE, FILETYPE, IERROR <br>CHARACTER*(*) DATAREP <br>INTEGER(KIND=MPI_OFFSET_KIND) DISP <br></tt>  
 <tt> MPI_FILE_IREAD(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_IREAD_ALL(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_IREAD_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_IREAD_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_IREAD_SHARED(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_IWRITE(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_IWRITE_ALL(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_IWRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt;  BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_IWRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_IWRITE_SHARED(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br></tt>  
 <tt> MPI_FILE_OPEN(COMM, FILENAME, AMODE, INFO, FH, IERROR)<br> CHARACTER*(*) FILENAME <br>INTEGER COMM, AMODE, INFO, FH, IERROR <br></tt>  
 <tt> MPI_FILE_PREALLOCATE(FH, SIZE, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) SIZE <br></tt>  
 <tt> MPI_FILE_READ(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_ALL(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_ALL_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br></tt>  
 <tt> MPI_FILE_READ_ALL_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_READ_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_READ_AT_ALL_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_READ_AT_ALL_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_ORDERED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_ORDERED_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br></tt>  
 <tt> MPI_FILE_READ_ORDERED_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_READ_SHARED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR  <br></tt>  
 <tt> MPI_FILE_SEEK(FH, OFFSET, WHENCE, IERROR)<br> INTEGER FH, WHENCE, IERROR<br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_SEEK_SHARED(FH, OFFSET, WHENCE, IERROR)<br> INTEGER FH, WHENCE, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_SET_ATOMICITY(FH, FLAG, IERROR)<br> INTEGER FH, IERROR<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_FILE_SET_INFO(FH, INFO, IERROR)<br> INTEGER FH, INFO, IERROR <br></tt>  
 <tt> MPI_FILE_SET_SIZE(FH, SIZE, IERROR)<br> INTEGER FH, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) SIZE <br></tt>  
 <tt> MPI_FILE_SET_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, INFO, IERROR)<br> INTEGER FH, ETYPE, FILETYPE, INFO, IERROR <br>CHARACTER*(*) DATAREP <br>INTEGER(KIND=MPI_OFFSET_KIND) DISP <br></tt>  
 <tt> MPI_FILE_SYNC(FH, IERROR)<br> INTEGER FH, IERROR <br></tt>  
 <tt> MPI_FILE_WRITE(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ALL(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ALL_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ALL_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_WRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>      
 <tt> MPI_FILE_WRITE_AT_ALL_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
 <tt> MPI_FILE_WRITE_AT_ALL_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ORDERED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ORDERED_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_ORDERED_END(FH, BUF, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_FILE_WRITE_SHARED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) <br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
 <tt> MPI_REGISTER_DATAREP(DATAREP, READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN, EXTRA_STATE, IERROR) <br> CHARACTER*(*) DATAREP <br>EXTERNAL READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN <br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br>INTEGER IERROR <br></tt>  
<P> 

<P>
<hr>
<a href="node508.htm#Node508"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node510.htm#Node510"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node510.htm#Node510"> Language Bindings Fortran Bindings</a>
<b>Previous: </b><a href="node508.htm#Node508"> External Interfaces Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Distributed Array Datatype Constructor</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node81">76. Distributed Array Datatype Constructor</span></h2>
<a href="node80.htm#Node80"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node82.htm#Node82"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node82.htm#Node82"> Address and Size Functions</a>
<b>Previous: </b><a href="node80.htm#Node80"> Subarray Datatype Constructor</a>
<p>
  
<P> 
The distributed array type constructor supports  
HPF-like [<a href="node522.htm#-Bib42">42</a>] data distributions.  
However, unlike in HPF, the storage order may be specified for C arrays  
as well as for Fortran arrays.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
One can create an HPF-like file view using this type constructor  
as follows.  
Complementary filetypes are created by having every process of a group  
call this constructor with identical arguments  
(with the exception of <font face="sans-serif"> rank</font> which should be set appropriately).  
These filetypes (along with identical <font face="sans-serif"> disp</font> and <font face="sans-serif"> etype</font>)  
are then used to define the view (via <font face="sans-serif"> MPI_FILE_SET_VIEW</font>),  
see <font face="sans-serif"> MPI</font> I/O, especially Section <a href="node306.htm#Node306">Definitions 
</a>  
and Section <a href="node317.htm#Node317">File Views 
</a>.  
Using this view,  
a collective data access operation (with identical offsets)  
will yield an HPF-like distribution pattern.  
 (<em> End of advice to users.</em>) <br> 
<P><img width=385 height=339 src="img76.gif" alt="Image file"><P>
 <tt> int MPI_Type_create_darray(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> MPI_Type_create_darray(size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: size, rank, ndims, array_of_gsizes(ndims),<br>    array_of_distribs(ndims), array_of_dargs(ndims),<br>    array_of_psizes(ndims), order <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_CREATE_DARRAY(SIZE, RANK, NDIMS, ARRAY_OF_GSIZES, ARRAY_OF_DISTRIBS, ARRAY_OF_DARGS, ARRAY_OF_PSIZES, ORDER, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER SIZE, RANK, NDIMS, ARRAY_OF_GSIZES(*), ARRAY_OF_DISTRIBS(*),<br>    ARRAY_OF_DARGS(*), ARRAY_OF_PSIZES(*), ORDER, OLDTYPE, NEWTYPE,<br>    IERROR <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font> can be used to generate  
the datatypes corresponding to the distribution  
of an <font face="sans-serif"> ndims</font>-dimensional array of <font face="sans-serif"> oldtype</font> elements  
onto  
an <font face="sans-serif"> ndims</font>-dimensional grid of logical processes.  
Unused dimensions of <font face="sans-serif"> array_of_psizes</font> should be set to <font face="sans-serif"> 1</font>.  
(See Example <a href="node81.htm#Node81">Distributed Array Datatype Constructor 
</a>.)  
For a call to <font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font> to be correct,  
the equation <i>prod<SUB>i=0</SUB><SUP>ndims-1</SUP> array_of_psizes[i] = size </i>  
must be satisfied.  
The ordering of processes in the process grid is assumed to be  
row-major, as in the case of virtual Cartesian process topologies.  
 
<br> 
<em> Advice to users.</em>  
<P> 
For both Fortran and C arrays, the ordering of processes in the  
process grid is assumed to be row-major. This is consistent with the  
ordering used in virtual Cartesian process topologies in   
<font face="sans-serif"> MPI</font>.  
To create such virtual process topologies, or to find the coordinates  
of a process in the process grid, etc., users may use the corresponding   
process topology functions,  
see Chapter <a href="node186.htm#Node186">Process Topologies 
</a>.  
 (<em> End of advice to users.</em>) <br> 
Each dimension of the array   
can be  
distributed in one of three ways:  
<ul> 
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font>     - Block distribution  
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> - Cyclic distribution  
 
<li><font face="sans-serif">  MPI_DISTRIBUTE_NONE</font> - Dimension not distributed.  
</ul> 
<br> 
The constant <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font> specifies  
a default distribution argument.  
The distribution argument for a dimension that is not distributed  
is ignored.  
For any dimension   
<font face="sans-serif"> i</font>  
in which the distribution  
is <font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font>,  
it is erroneous   
to specify  
<font face="sans-serif"> array_of_dargs[i]</font> <i>*</i> <font face="sans-serif"> array_of_psizes[i]</font>  
<i>&lt;</i> <font face="sans-serif"> array_of_gsizes[i]</font>.  
<P> 
For example, the HPF layout <tt>ARRAY(CYCLIC(15))</tt>  
corresponds to <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with a distribution argument of 15, and the HPF layout ARRAY(BLOCK)  
corresponds to  
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> with a distribution argument of  
<font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>.  
<P> 
The <font face="sans-serif"> order</font> argument is used as in <font face="sans-serif"> MPI_TYPE_CREATE_SUBARRAY</font> to  
specify the storage order.  
Therefore, arrays described by this type constructor may be  
stored in Fortran (column-major) or C (row-major) order.  
Valid values for <font face="sans-serif"> order</font> are  
<font face="sans-serif">  MPI_ORDER_FORTRAN</font> and <font face="sans-serif">  MPI_ORDER_C</font>.  
<P> 
This routine creates a new <font face="sans-serif"> MPI</font> datatype with a typemap defined in  
terms of a function called ``cyclic()'' (see below).  
<P> 
Without loss of generality, it suffices to define the typemap  
for the <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> case where  
<font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font> is not used.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> and <font face="sans-serif">  MPI_DISTRIBUTE_NONE</font>  
can be reduced to the <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> case  
for dimension   
<font face="sans-serif"> i</font>  
as follows.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> equal to <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>  
is equivalent to  
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with <font face="sans-serif"> array_of_dargs[i]</font> set to  
<p><i> 
(mpiargarray_of_gsizes[i] + mpiargarray_of_psizes[i] - 1) 
        / mpiargarray_of_psizes[i]. 
</i><p>  
If <font face="sans-serif"> array_of_dargs[i]</font> is not <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>,  
then <font face="sans-serif">  MPI_DISTRIBUTE_BLOCK</font> and <font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
are equivalent.  
<P> 
<font face="sans-serif">  MPI_DISTRIBUTE_NONE</font> is equivalent to   
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font>  
with <font face="sans-serif"> array_of_dargs[i]</font> set to <font face="sans-serif"> array_of_gsizes[i]</font>.  
<P> 
Finally,   
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> equal to <font face="sans-serif">  MPI_DISTRIBUTE_DFLT_DARG</font>  
is equivalent to  
<font face="sans-serif">  MPI_DISTRIBUTE_CYCLIC</font> with  
<font face="sans-serif"> array_of_dargs[i]</font> set to 1.  
<P> 
For <font face="sans-serif">  MPI_ORDER_FORTRAN</font>,  
an <font face="sans-serif"> ndims</font>-dimensional distributed array (<font face="sans-serif"> newtype</font>)  
is defined by the following code fragment:  
<P> 
<br> 
<pre><tt>    oldtypes[0] = oldtype; 
    for (i = 0; i &lt; ndims; i++) { 
        oldtypes[i+1] = cyclic(array_of_dargs[i], 
                               array_of_gsizes[i], 
                               r[i],  
                               array_of_psizes[i], 
                               oldtypes[i]); 
    } 
    newtype = oldtypes[ndims]; 
</tt></pre> 
For <font face="sans-serif">  MPI_ORDER_C</font>, the code is:  
<P> 
<br> 
<pre><tt>    oldtypes[0] = oldtype; 
    for (i = 0; i &lt; ndims; i++) { 
        oldtypes[i + 1] = cyclic(array_of_dargs[ndims - i - 1],  
                                 array_of_gsizes[ndims - i - 1], 
                                 r[ndims - i - 1],  
                                 array_of_psizes[ndims - i - 1], 
                                 oldtypes[i]); 
    } 
    newtype = oldtypes[ndims]; 
 
</tt></pre> 
where <i>r[i]</i> is the position of the process (with rank <font face="sans-serif"> rank</font>)  
in the process grid at dimension <i>i</i>.  
The values of <i>r[i]</i> are given by the following code fragment:  
<P> 
<br> 
<pre><tt>    t_rank = rank; 
    t_size = 1; 
    for (i = 0; i &lt; ndims; i++) 
        t_size *= array_of_psizes[i]; 
    for (i = 0; i &lt; ndims; i++) { 
        t_size = t_size / array_of_psizes[i]; 
        r[i] = t_rank / t_size; 
        t_rank = t_rank % t_size; 
    } 
</tt></pre> 
 Let the typemap of <font face="sans-serif"> oldtype</font> have the form:  
<i> 
{(type<SUB>0</SUB>,disp<SUB>0</SUB>),(type<SUB>1</SUB>,disp<SUB>1</SUB>),...,(type<SUB>n-1</SUB>,disp<SUB>n-1</SUB>)} 
</i>  
where <i>type<SUB>i</SUB></i> is a predefined <font face="sans-serif"> MPI</font> datatype, and let <i>ex</i> be the  
extent of <font face="sans-serif"> oldtype</font>.    
The following function uses the conceptual datatypes <font face="sans-serif"> lb_marker</font>  
and <font face="sans-serif"> ub_marker</font>, see Section <a href="node83.htm#Node83">Lower-Bound and Upper-Bound Markers 
</a> for details.  
<P> 
Given the above, the function cyclic() is defined as follows:  
<P><img width=398 height=479 src="img77.gif" alt="Image file"><P>
where <i>count</i> is defined by this code fragment:  
<br> 
<pre><tt>    nblocks = (gsize + (darg - 1)) / darg; 
    count = nblocks / psize; 
    left_over = nblocks - count * psize; 
    if (r &lt; left_over) 
        count = count + 1; 
</tt></pre> 
Here, <i>nblocks</i> is the number of blocks that must be   
distributed among the processors.  
Finally, <i>darg<SUB>last</SUB></i> is defined by this code fragment:  
<br> 
<pre><tt>    if ((num_in_last_cyclic = gsize % (psize * darg)) == 0) 
        darg_last = darg; 
    else { 
        darg_last = num_in_last_cyclic - darg * r; 
        if (darg_last &gt; darg) 
            darg_last = darg; 
        if (darg_last &lt;= 0) 
            darg_last = darg; 
        } 
</tt></pre> 
<br><b> Example</b>  
Consider generating the filetypes corresponding to the HPF distribution:  
  
<br> 
<pre><tt>      &lt;oldtype&gt; FILEARRAY(100, 200, 300) 
!HPF$ PROCESSORS PROCESSES(2, 3) 
!HPF$ DISTRIBUTE FILEARRAY(CYCLIC(10), *, BLOCK) ONTO PROCESSES 
</tt></pre> 
This can be achieved by the following Fortran code,  
assuming there will be six processes attached to the run:  
<br> 
<pre><tt>    ndims = 3 
    array_of_gsizes(1) = 100 
    array_of_distribs(1) = MPI_DISTRIBUTE_CYCLIC 
    array_of_dargs(1) = 10 
    array_of_gsizes(2) = 200 
    array_of_distribs(2) = MPI_DISTRIBUTE_NONE 
    array_of_dargs(2) = 0 
    array_of_gsizes(3) = 300 
    array_of_distribs(3) = MPI_DISTRIBUTE_BLOCK 
    array_of_dargs(3) = MPI_DISTRIBUTE_DFLT_DARG 
    array_of_psizes(1) = 2 
    array_of_psizes(2) = 1 
    array_of_psizes(3) = 3 
    call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierr) 
    call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr) 
    call MPI_TYPE_CREATE_DARRAY(size, rank, ndims, array_of_gsizes, &amp; 
         array_of_distribs, array_of_dargs, array_of_psizes,        &amp; 
         MPI_ORDER_FORTRAN, oldtype, newtype, ierr) 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node80.htm#Node80"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node82.htm#Node82"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node82.htm#Node82"> Address and Size Functions</a>
<b>Previous: </b><a href="node80.htm#Node80"> Subarray Datatype Constructor</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

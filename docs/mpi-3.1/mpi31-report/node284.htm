<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Assertions</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node284">259. Assertions</span></h2>
<a href="node283.htm#Node283"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node279.htm#Node279"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node285.htm#Node285"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node279.htm#Node279"> Synchronization Calls</a>
<b>Next: </b><a href="node285.htm#Node285"> Miscellaneous Clarifications</a>
<b>Previous: </b><a href="node283.htm#Node283"> Flush and Sync</a>
<p>
  
  
<P> 
The <font face="sans-serif"> assert</font> argument in the calls   
<font face="sans-serif"> MPI_WIN_POST</font>, <font face="sans-serif"> MPI_WIN_START</font>,  
<font face="sans-serif"> MPI_WIN_FENCE</font>,  
<font face="sans-serif"> MPI_WIN_LOCK</font>, and <font face="sans-serif"> MPI_WIN_LOCK_ALL</font> is  
used to provide assertions on the context of the call that may be used  
to optimize performance.  The <font face="sans-serif"> assert</font> argument does not change  
program semantics if it provides correct information on the program ---  
it is erroneous to provide incorrect information.  Users  
may always provide  
<font face="sans-serif"> assert = 0</font> to indicate a general case where no guarantees are made.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Many implementations may not take advantage of the information in  
<font face="sans-serif"> assert</font>; some of the information is relevant only for  
noncoherent shared memory machines.  Users  
should consult their implementation's manual   
to  
find which information is useful on each system. On the other hand,  
applications that provide correct  
assertions whenever applicable are portable and will  
take advantage of assertion specific optimizations whenever available.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Implementations can always ignore the <font face="sans-serif"> assert</font> argument.  
Implementors should  
document which <font face="sans-serif"> assert</font> values are significant on their implementation.  
 (<em> End of advice to implementors.</em>) <br> 
<font face="sans-serif"> assert</font> is the bit-vector OR of zero or more of the following  
integer constants:  
<font face="sans-serif">  MPI_MODE_NOCHECK</font>, <font face="sans-serif">  MPI_MODE_NOSTORE</font>,  
<font face="sans-serif">  MPI_MODE_NOPUT</font>,  
<font face="sans-serif">  MPI_MODE_NOPRECEDE</font>, and <font face="sans-serif">  MPI_MODE_NOSUCCEED</font>.  
The significant options are listed below for each call.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
C/C++ users can use bit vector or (<img width=1 height=11 src="img205.gif" alt="Image file">
) to combine these constants;  
Fortran 90 users  
can use the bit-vector <tt>IOR</tt> intrinsic.  
Alternatively, Fortran users can  
portably use integer addition to OR the constants (each constant should  
appear at most once in the addition!).  
 (<em> End of advice to users.</em>) <br> 
<dl> 
 
<dt> 
<b></b><font face="sans-serif"> MPI_WIN_START</font>:</b><dd> 
&nbsp;&nbsp;&nbsp;  
<dl> 
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOCHECK</font>  
--- the matching calls to <font face="sans-serif"> MPI_WIN_POST</font>  
have  
already completed on all target processes when the call to  
<font face="sans-serif"> MPI_WIN_START</font> is made.    
The nocheck option can be  
specified in a start call if and only if it is specified in each  
matching post call.  
This is similar to the optimization  
of ``ready-send'' that may save a handshake when the handshake is  
implicit in the code.  
(However, ready-send is matched by a regular receive, whereas  
both start and post must specify the nocheck option.)  
</dl> 
<br> 
 
<dt> 
<b></b><font face="sans-serif"> MPI_WIN_POST</font>:</b><dd> 
&nbsp;&nbsp;&nbsp;  
<dl> 
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOCHECK</font>    
--- the matching calls to <font face="sans-serif"> MPI_WIN_START</font>  
have not yet occurred  
on any origin processes when the call to  
<font face="sans-serif"> MPI_WIN_POST</font> is made.  
The nocheck option can be specified by a post call if and only if it  
is specified by each matching start call.  
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOSTORE</font>   
--- the local window was not updated by  
stores (or local get or receive calls) since  
last synchronization.  This may avoid  
the need for cache synchronization at the post call.  
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOPUT</font>  
--- the local window will not be updated by  
put or accumulate  
calls after the post call, until the ensuing (wait) synchronization.  
This may avoid the need for cache synchronization at the wait call.  
</dl> 
<br> 
 
<dt> 
<b></b><font face="sans-serif"> MPI_WIN_FENCE</font>:</b><dd> 
&nbsp;&nbsp;&nbsp;  
<dl> 
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOSTORE</font>  
--- the local window was not updated by  
stores (or local get or receive calls) since last synchronization.  
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOPUT</font>  
--- the local window will not be updated  
by put or accumulate calls after  
the fence call, until the ensuing (fence) synchronization.  
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOPRECEDE</font>  
--- the fence does not complete any  
sequence of locally issued <font face="sans-serif"> RMA</font> calls.  If this assertion is given by  
any process in the window group, then it must be given by all  
processes in the group.   
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOSUCCEED</font>  
--- the fence does not start any sequence  
of locally issued <font face="sans-serif"> RMA</font> calls.  If the assertion is given by any process  
in the window group, then it must be given by all processes in the group.  
</dl> 
<br> 
 
<dt> 
<b></b><font face="sans-serif"> MPI_WIN_LOCK</font>, <font face="sans-serif"> MPI_WIN_LOCK_ALL</font>:</b><dd> 
&nbsp;&nbsp;&nbsp;  
<dl> 
 
<dt> 
<b></b><dd> 
<font face="sans-serif">  MPI_MODE_NOCHECK</font>  
--- no other process holds, or will attempt  
to acquire, a  
conflicting lock, while the caller holds the window lock.   This is useful  
when  
mutual exclusion is achieved by other means, but the coherence operations  
that  
may be attached to the lock and unlock calls are still required.  
</dl> 
<br> 
</dl> 
<br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Note that the nostore and noprecede flags provide  
information on what happened <em> before</em>  
the call; the noput and nosucceed  
flags provide information on what will happen <em> after</em> the call.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node283.htm#Node283"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node279.htm#Node279"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node285.htm#Node285"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node279.htm#Node279"> Synchronization Calls</a>
<b>Next: </b><a href="node285.htm#Node285"> Miscellaneous Clarifications</a>
<b>Previous: </b><a href="node283.htm#Node283"> Flush and Sync</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

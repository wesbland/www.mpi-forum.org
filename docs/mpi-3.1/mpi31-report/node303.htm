<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-ei/ei-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Initialization</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node303">278. Initialization</span></h2>
<a href="node302.htm#Node302"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node300.htm#Node300"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node304.htm#Node304"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node300.htm#Node300"> <font face="sans-serif"> MPI</font> and Threads</a>
<b>Next: </b><a href="node304.htm#Node304"> I/O</a>
<b>Previous: </b><a href="node302.htm#Node302"> Clarifications</a>
<p>
  
<P> 
The following function may be used to initialize <font face="sans-serif"> MPI</font>, and to initialize  
the <font face="sans-serif"> MPI</font> thread environment, instead of <font face="sans-serif"> MPI_INIT</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INIT_THREAD(required, provided)</TD></TR>  
<TR><TD> IN required</TD><TD>desired level of thread support  (integer)</TD></TR>  
<TR><TD> OUT provided</TD><TD>provided level of thread support (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Init_thread(int *argc, char ***argv, int required, int *provided) <br></tt>  
<P> 
 <tt> MPI_Init_thread(required, provided, ierror) <br> INTEGER, INTENT(IN) :: required <br>INTEGER, INTENT(OUT) :: provided <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_INIT_THREAD(REQUIRED, PROVIDED, IERROR)<br> INTEGER REQUIRED, PROVIDED, IERROR <br></tt>  
<P> 
  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In C, the passing of <font face="sans-serif"> argc</font> and <font face="sans-serif"> argv</font> is  
optional, as with <font face="sans-serif"> MPI_INIT</font> as discussed in Section <a href="node225.htm#Node225">Startup 
</a>.  
In C,  null pointers may be passed in their place.  
 (<em> End of advice to users.</em>) <br> 
This call initializes <font face="sans-serif"> MPI</font> in the same way that a call to <font face="sans-serif"> MPI_INIT</font>  
would.  In addition, it  
initializes the thread environment.  The argument <font face="sans-serif"> required</font>  
is used to specify the desired level of thread support.    
The possible values are listed  in increasing order of thread support.  
<dl> 
 
<dt> 
<b></b><font face="sans-serif">  MPI_THREAD_SINGLE</font></b><dd> 
 Only one thread will execute.   
 
<dt> 
<b></b><font face="sans-serif">  MPI_THREAD_FUNNELED</font></b><dd> 
 The process may be multi-threaded, but  
the application must ensure that only the main thread makes <font face="sans-serif"> MPI</font> calls  
(for the definition of main thread, see <font face="sans-serif"> MPI_IS_THREAD_MAIN</font>   
on page <a href="node303.htm#Node303">Initialization 
</a>).  
 
<dt> 
<b></b><font face="sans-serif">  MPI_THREAD_SERIALIZED</font></b><dd> 
 The process may be  
multi-threaded, and multiple threads may make <font face="sans-serif"> MPI</font> calls, but only  
one at a time: <font face="sans-serif"> MPI</font> calls are not made concurrently from two distinct  
threads (all <font face="sans-serif"> MPI</font> calls are ``serialized'').  
 
<dt> 
<b></b><font face="sans-serif">  MPI_THREAD_MULTIPLE</font></b><dd> 
 Multiple threads may call <font face="sans-serif"> MPI</font>,   
with no restrictions.  
</dl> 
<br> 
These values are monotonic; i.e.,  
<font face="sans-serif">  MPI_THREAD_SINGLE</font>  <i>&lt;</i> <font face="sans-serif">  MPI_THREAD_FUNNELED</font>  
<i>&lt;</i> <font face="sans-serif">  MPI_THREAD_SERIALIZED</font> <i>&lt;</i> <font face="sans-serif">  MPI_THREAD_MULTIPLE</font>.   
<P> 
Different processes in <font face="sans-serif">  MPI_COMM_WORLD</font> may require different  
levels of thread support.  
<P> 
The call returns in <font face="sans-serif"> provided</font> information about the actual  
level of  thread support that will be provided by <font face="sans-serif"> MPI</font>.  It can be one of the  
four values listed above.     
<P> 
The level(s) of thread support that can be provided by  
<font face="sans-serif"> MPI_INIT_THREAD</font>  will  
depend on the implementation, and may depend on information provided  
by the user before the program started to execute (e.g., with  
arguments to <tt>mpiexec</tt>).    If possible, the call will return  
<font face="sans-serif"> provided = required</font>.  Failing this, the call will return the  
least supported level such that <font face="sans-serif"> provided <i>&gt;</i> required</font> (thus providing  
a stronger level of support than required by the user).  Finally, if the user  
requirement cannot be satisfied, then the call will return   
in <font face="sans-serif"> provided</font> the highest supported level.   
<P> 
A <b> thread compliant</b> <font face="sans-serif"> MPI</font> implementation will be able to return  
<font face="sans-serif"> provided</font>  
<font face="sans-serif">  = MPI_THREAD_MULTIPLE</font>.   
Such an implementation may always return  
<font face="sans-serif"> provided</font>  
<font face="sans-serif">  = MPI_THREAD_MULTIPLE</font>, irrespective of the value  
of <font face="sans-serif"> required</font>.  
<P> 
An <font face="sans-serif"> MPI</font> library that is not thread compliant must always return  
<font face="sans-serif"> provided=MPI_THREAD_SINGLE</font>, even if  
<font face="sans-serif"> MPI_INIT_THREAD</font> is called on a multithreaded process.  The  
library should also return correct values for the <font face="sans-serif"> MPI</font> calls that can  
be executed before initialization, even if multiple threads have been  
spawned.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Such code is erroneous, but if the <font face="sans-serif"> MPI</font> initialization is performed  
by a library, the error cannot be detected until  
<font face="sans-serif"> MPI_INIT_THREAD</font> is called. The requirements in the  
previous paragraph ensure that the error can be properly detected.  
 (<em> End of rationale.</em>) <br> 
A call to <font face="sans-serif"> MPI_INIT</font> has the same effect as a  
call to <font face="sans-serif"> MPI_INIT_THREAD</font> with a <font face="sans-serif"> required =  
MPI_THREAD_SINGLE</font>.   
<P> 
Vendors may provide (implementation  
dependent) means to specify the level(s) of thread support available when the <font face="sans-serif"> MPI</font>  
program is started, e.g., with arguments to <tt>mpiexec</tt>.  This  
will affect the outcome of calls to <font face="sans-serif"> MPI_INIT</font> and  
<font face="sans-serif"> MPI_INIT_THREAD</font>.  Suppose, for example, that an <font face="sans-serif"> MPI</font>  
program has been started so that only <font face="sans-serif">  MPI_THREAD_MULTIPLE</font> is  
available.  Then   <font face="sans-serif"> MPI_INIT_THREAD</font> will return  
<font face="sans-serif"> provided = MPI_THREAD_MULTIPLE</font>, irrespective of the value  
of <font face="sans-serif"> required</font>; a call to <font face="sans-serif"> MPI_INIT</font> will also  
initialize the <font face="sans-serif"> MPI</font> thread support level  to  
<font face="sans-serif">  MPI_THREAD_MULTIPLE</font>.  Suppose, instead, that an  
<font face="sans-serif"> MPI</font> program has been started so that all four levels of thread  
support are available.  Then, a call to <font face="sans-serif"> MPI_INIT_THREAD</font>  
will return <font face="sans-serif"> provided = required</font>; alternatively, a call to  
<font face="sans-serif"> MPI_INIT</font> will initialize the <font face="sans-serif"> MPI</font> thread support level to  
<font face="sans-serif">  MPI_THREAD_SINGLE</font>.      
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Various optimizations are possible when <font face="sans-serif"> MPI</font> code is executed  
single-threaded, or is executed on multiple threads, but not  
concurrently:  mutual exclusion code may be omitted. Furthermore, if only one  
thread executes, then the <font face="sans-serif"> MPI</font> library can use library functions that  
are not thread safe, without risking conflicts with user threads.  
Also, the model  
of one communication thread, multiple computation threads fits   
many applications well, e.g.,   
if the process code is a sequential  
Fortran/C program with <font face="sans-serif"> MPI</font> calls that has been parallelized by a  
compiler for execution on an SMP node, in a cluster of SMPs,  
then the process computation is  
multi-threaded, but <font face="sans-serif"> MPI</font> calls will likely execute on a single  
thread.  
<P> 
The design accommodates a static specification of the thread support  
level, for environments that require static binding of libraries, and  
for compatibility for current multi-threaded <font face="sans-serif"> MPI</font> codes.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If <font face="sans-serif"> provided</font> is not <font face="sans-serif">  MPI_THREAD_SINGLE</font> then the <font face="sans-serif"> MPI</font>   
library should not  
invoke C or Fortran library calls that are  
not thread safe, e.g., in an environment where <tt>malloc</tt> is not thread  
safe, then <tt>malloc</tt> should not be used by the <font face="sans-serif"> MPI</font> library.  
<P> 
Some implementors may want to use different <font face="sans-serif"> MPI</font> libraries for  
different levels of thread support.   They can do so using dynamic  
linking and selecting which library will be linked when  
<font face="sans-serif"> MPI_INIT_THREAD</font> is invoked.    
If this is not possible, then optimizations for lower levels  
of thread support will occur only when the level of thread support required  
is specified at link time.    
<P> 
Note that <font face="sans-serif"> required</font> need not be the same value on all   
processes of <font face="sans-serif"> MPI_COMM_WORLD</font>.  
 (<em> End of advice to implementors.</em>) <br> 
The following function can be used to query the current level of thread  
support.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_QUERY_THREAD(provided)</TD></TR>  
<TR><TD> OUT provided</TD><TD>provided level of thread support (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Query_thread(int *provided) <br></tt>  
<P> 
 <tt> MPI_Query_thread(provided, ierror) <br> INTEGER, INTENT(OUT) :: provided <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_QUERY_THREAD(PROVIDED, IERROR)<br>  INTEGER PROVIDED, IERROR <br></tt>  
<P> 
  
<P> 
The call returns in <font face="sans-serif"> provided</font> the current level of thread  
support, which will be the value returned in <font face="sans-serif"> provided</font> by  
<font face="sans-serif"> MPI_INIT_THREAD</font>, if <font face="sans-serif"> MPI</font>  
was initialized by a call to <font face="sans-serif"> MPI_INIT_THREAD()</font>.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IS_THREAD_MAIN(flag)</TD></TR>  
   
<TR><TD> OUT flag</TD><TD>true if calling thread is main thread, false  
otherwise (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Is_thread_main(int *flag) <br></tt>  
<P> 
 <tt> MPI_Is_thread_main(flag, ierror) <br> LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IS_THREAD_MAIN(FLAG, IERROR) <br> LOGICAL FLAG <br>INTEGER IERROR <br></tt>  
<P> 
  
<P> 
This function can be called by a thread to determine if it is the  
main thread (the thread that called <font face="sans-serif"> MPI_INIT</font> or   
<font face="sans-serif"> MPI_INIT_THREAD</font>).    
<P> 
All routines listed in this section  
must be  
supported by all <font face="sans-serif"> MPI</font> implementations.   
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI</font> libraries are required to provide these calls even if they do  
not support threads, so that portable code that contains invocations  
to these functions can link correctly.  <font face="sans-serif"> MPI_INIT</font>   
continues to be   
supported so as to provide compatibility with current <font face="sans-serif"> MPI</font> codes.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
It is possible to spawn threads before <font face="sans-serif"> MPI</font> is initialized, but no  
<font face="sans-serif"> MPI</font> call other than   
<font face="sans-serif"> MPI_GET_VERSION</font>,  
<font face="sans-serif"> MPI_INITIALIZED</font>, or <font face="sans-serif"> MPI_FINALIZED</font>  
should be executed by these  
threads, until <font face="sans-serif"> MPI_INIT_THREAD</font> is invoked by one  
thread (which, thereby, becomes the  main thread).  In particular, it is  
possible to enter the <font face="sans-serif"> MPI</font> execution with a multi-threaded process.  
<P> 
The level of thread support provided is a global property of the <font face="sans-serif"> MPI</font>  
process that can be specified only once, when <font face="sans-serif"> MPI</font> is initialized on  
that process (or before).   Portable third party libraries have to be written so as to  
accommodate any provided level of thread support.     
Otherwise, their usage will be restricted to specific level(s) of thread support.  
If such a library can run only with specific level(s) of thread support, e.g.,  
only with <font face="sans-serif">  MPI_THREAD_MULTIPLE</font>, then  
<font face="sans-serif"> MPI_QUERY_THREAD</font> can be used to check whether the  
user initialized <font face="sans-serif"> MPI</font> to the correct level of thread support and,  
if not, raise an exception.   
 (<em> End of advice to users.</em>) <br> 
  
<P> 
  
  

<P>
<hr>
<a href="node302.htm#Node302"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node300.htm#Node300"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node304.htm#Node304"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node300.htm#Node300"> <font face="sans-serif"> MPI</font> and Threads</a>
<b>Next: </b><a href="node304.htm#Node304"> I/O</a>
<b>Previous: </b><a href="node302.htm#Node302"> Clarifications</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

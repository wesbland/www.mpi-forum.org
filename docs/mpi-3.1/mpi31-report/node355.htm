<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Subarray Filetype Constructor</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node355">319. Subarray Filetype Constructor</span></h2>
<a href="node354.htm#Node354"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node353.htm#Node353"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node356.htm#Node356"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node353.htm#Node353"> Examples</a>
<b>Next: </b><a href="node356.htm#Node356"> Tool Support</a>
<b>Previous: </b><a href="node354.htm#Node354"> Double Buffering with Split Collective I/O</a>
<p>
  
<P> 
  <div style=\"text-align:center\"><P><img width=222 height=257 src="io-array-file.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 31: </b><span id="Figure31">Example array file layout</span><P> 
  
    
  <div style=\"text-align:center\"><P><img width=216 height=187 src="io-array-p1.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 32: </b><span id="Figure32">Example local array filetype for process 1</span><P> 
  
    
Assume we are writing out a 100x100 2D array of double  
precision floating point numbers that is  
distributed among 4 processes such that each process has a block of  
25 columns (e.g., process 0 has columns 0--24, process 1 has columns  
25--49, etc.; see Figure <a href="node355.htm#Figure31">31 
</a>).  
To create the filetypes for each process one could  
use the following C program  
(see Section <a href="node80.htm#Node80">Subarray Datatype Constructor 
</a>):  
<P> 
<br> 
<pre><tt>   double subarray[100][25]; 
   MPI_Datatype filetype; 
   int sizes[2], subsizes[2], starts[2]; 
   int rank; 
 
   MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank); 
   sizes[0]=100; sizes[1]=100; 
   subsizes[0]=100; subsizes[1]=25; 
   starts[0]=0; starts[1]=rank*subsizes[1]; 
 
   MPI_Type_create_subarray(2, sizes, subsizes, starts, MPI_ORDER_C, 
                            MPI_DOUBLE, &amp;filetype); 
</tt></pre> 
Or, equivalently in Fortran:  
<P> 
<br> 
<pre><tt>       double precision subarray(100,25) 
       integer filetype, rank, ierror 
       integer sizes(2), subsizes(2), starts(2) 
 
       call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierror) 
       sizes(1)=100 
       sizes(2)=100 
       subsizes(1)=100 
       subsizes(2)=25 
       starts(1)=0 
       starts(2)=rank*subsizes(2) 
 
       call MPI_TYPE_CREATE_SUBARRAY(2, sizes, subsizes, starts, &amp; 
                  MPI_ORDER_FORTRAN, MPI_DOUBLE_PRECISION,       &amp; 
                  filetype, ierror) 
</tt></pre> 
The generated filetype will then describe the portion of the file  
contained within the process's subarray with holes for the space taken  
by the other processes.  Figure <a href="node355.htm#Figure32">32 
</a> shows the  
filetype created for process 1.  
<P> 
  

<P>
<hr>
<a href="node354.htm#Node354"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node353.htm#Node353"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node356.htm#Node356"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node353.htm#Node353"> Examples</a>
<b>Next: </b><a href="node356.htm#Node356"> Tool Support</a>
<b>Previous: </b><a href="node354.htm#Node354"> Double Buffering with Split Collective I/O</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

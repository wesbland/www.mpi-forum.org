<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Startup</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node225">208. Startup</span></h1>
<a href="node224.htm#Node224"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node226.htm#Node226"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node226.htm#Node226"> Allowing User Functions at Process Termination</a>
<b>Previous: </b><a href="node224.htm#Node224"> Timers and Synchronization</a>
<p>
  
  
<P> 
    
One goal of <font face="sans-serif"> MPI</font> is to achieve <em> source code portability</em>.  By this we mean  
that a program written using <font face="sans-serif"> MPI</font> and complying with the relevant language  
standards is portable as written, and must not require any source code changes  
when moved from one system to another.  This explicitly does <em> not</em> say  
anything about how an <font face="sans-serif"> MPI</font> program is started or launched from the command  
line, nor what the user must do to set up the environment in which an <font face="sans-serif"> MPI</font>  
program will run.  However, an implementation may require some setup to be  
performed before other <font face="sans-serif"> MPI</font> routines may be called.  To provide for this, <font face="sans-serif"> MPI</font>  
includes an initialization routine <font face="sans-serif"> MPI_INIT</font>.  
<P> 
<P><img width=53 height=10 src="img183.gif" alt="Image file"><P>
 <tt> int MPI_Init(int *argc, char ***argv) <br></tt>  
<P> 
 <tt> MPI_Init(ierror) <br> INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_INIT(IERROR)<br> INTEGER IERROR <br></tt>  
  
  
<P> 
All <font face="sans-serif"> MPI</font> programs must contain exactly one call to an <font face="sans-serif"> MPI</font> initialization routine:  
<font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font>. Subsequent calls to any  
initialization routines are erroneous. The only <font face="sans-serif"> MPI</font> functions that may be invoked  
before the <font face="sans-serif"> MPI</font> initialization routines are called are <font face="sans-serif"> MPI_GET_VERSION</font>, <font face="sans-serif"> MPI_GET_LIBRARY_VERSION</font>,  
<font face="sans-serif"> MPI_INITIALIZED</font>, <font face="sans-serif"> MPI_FINALIZED</font>, and any function   
with the prefix <font face="sans-serif"> MPI_T_</font> (within the constraints for functions with this prefix listed in Section <a href="node376.htm#Node376">Initialization and Finalization 
</a>). The version for ISO C  
accepts the <font face="sans-serif"> argc</font> and <font face="sans-serif"> argv</font> that are provided by the arguments to  
<tt>main</tt> or <font face="sans-serif"> NULL</font>:  
<br> 
<pre><tt>int main(int argc, char *argv[]) 
{ 
    MPI_Init(&amp;argc, &amp;argv); 
 
    /* parse arguments */ 
    /* main program    */ 
 
    MPI_Finalize();     /* see below */ 
    return 0;  
} 
</tt></pre> 
The Fortran version takes only <font face="sans-serif">  IERROR</font>.  
<P> 
Conforming implementations of <font face="sans-serif"> MPI</font> are required to allow  
applications to pass <font face="sans-serif"> NULL</font> for both the <font face="sans-serif"> argc</font> and  
<font face="sans-serif"> argv</font> arguments of <font face="sans-serif"> main</font> in   
C.  
<P> 
After <font face="sans-serif"> MPI</font> is initialized, the application can access information  
about the execution environment by querying the predefined info object  
<font face="sans-serif">  MPI_INFO_ENV</font>.  
The following keys are predefined for this object, corresponding to the  
arguments of <font face="sans-serif"> MPI_COMM_SPAWN</font> or of <font face="sans-serif"> mpiexec</font>:  
<dl> 
 
<dt> 
<b></b><font face="sans-serif"> command</font></b><dd> 
 Name of program executed.  
 
<dt> 
<b></b><font face="sans-serif"> argv</font></b><dd> 
 Space separated arguments to command.  
 
<dt> 
<b></b><font face="sans-serif"> maxprocs</font></b><dd> 
 Maximum number of <font face="sans-serif"> MPI</font> processes  
  to start.  
 
<dt> 
<b></b><font face="sans-serif"> soft</font></b><dd> 
 Allowed values for number of processors.  
<P> 
 
<dt> 
<b></b><font face="sans-serif"> host</font></b><dd> 
 Hostname.  
 
<dt> 
<b></b><font face="sans-serif"> arch</font></b><dd> 
 Architecture name.  
 
<dt> 
<b></b><font face="sans-serif"> wdir</font></b><dd> 
 Working directory of the  
<font face="sans-serif"> MPI</font> process.  
 
<dt> 
<b></b><font face="sans-serif"> file</font></b><dd> 
 Value is the name of a file in which additional information   
is specified.   
 
<dt> 
<b></b><font face="sans-serif"> thread_level</font></b><dd> 
 Requested level of thread support, if  
  requested before the program started execution.   
</dl> 
<br> 
Note that all values are strings. Thus, the maximum number of  
processes is represented by a string such as <font face="sans-serif">  ``1024''</font> and  
the requested level is represented by a string such  
as <font face="sans-serif">  ``MPI_THREAD_SINGLE''</font>.  
<P> 
The info object <font face="sans-serif">  MPI_INFO_ENV</font> need not contain a (key,value)  
pair for each of these predefined keys; the set of (key,value) pairs  
provided is implementation-dependent.  
Implementations may provide additional, implementation specific,  
(key,value) pairs.  
<P> 
In case where the <font face="sans-serif"> MPI</font> processes were started with  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> or, equivalently, with  a  
startup mechanism that supports multiple process specifications, then  
the values stored in the info object <font face="sans-serif">  MPI_INFO_ENV</font> at a  
process are those values that affect the local <font face="sans-serif"> MPI</font> process.   
<P> 
<br><b> Example</b>  
  
  
If <font face="sans-serif"> MPI</font> is started with a call to  
<br> 
<pre><tt>    mpiexec -n 5 -arch sun ocean : -n 10 -arch rs6000 atmos 
</tt></pre> 
Then the first 5 processes will have have in their  
<font face="sans-serif">  MPI_INFO_ENV</font> object the pairs <font face="sans-serif">  (command, ocean)</font>,  
<font face="sans-serif">  (maxprocs, 5)</font>,  
and <font face="sans-serif">  (arch, sun)</font>. The next 10 processes will have  in  
<font face="sans-serif">  MPI_INFO_ENV</font> <font face="sans-serif">  (command, atmos)</font>,  
<font face="sans-serif">  (maxprocs, 10)</font>,  
and <font face="sans-serif">  (arch, rs6000)</font>  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The values passed in <font face="sans-serif">  MPI_INFO_ENV</font> are the values of the  
arguments passed to the mechanism that started the <font face="sans-serif"> MPI</font> execution ---  
not the actual value provided. Thus, the value associated with  
<font face="sans-serif">  maxprocs</font> is the number of <font face="sans-serif"> MPI</font> processes requested; it can  
be larger than the actual number of processes obtained, if the  
<font face="sans-serif">  soft</font> option was used.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations will provide a (key,value) pair for each  
parameter that can be passed to the command that starts an <font face="sans-serif"> MPI</font>  
program.  
 (<em> End of advice to implementors.</em>) <br> 
<P><img width=78 height=10 src="img184.gif" alt="Image file"><P>
 <tt> int MPI_Finalize(void) <br></tt>  
<P> 
 <tt> MPI_Finalize(ierror) <br> INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FINALIZE(IERROR)<br> INTEGER IERROR <br></tt>  
  
<P> 
This routine cleans up all <font face="sans-serif"> MPI</font> state.  
If an <font face="sans-serif"> MPI</font> program terminates normally (i.e., not due to a call to  
<font face="sans-serif"> MPI_ABORT</font> or an unrecoverable error) then each process must  
call <font face="sans-serif"> MPI_FINALIZE</font> before it exits.   
<P> 
Before  an <font face="sans-serif"> MPI</font> process invokes <font face="sans-serif"> MPI_FINALIZE</font>, the process must  
perform all <font face="sans-serif"> MPI</font> calls needed to complete its   
involvement in <font face="sans-serif"> MPI</font> communications: It must locally complete all  
<font face="sans-serif"> MPI</font> operations that it initiated and must execute matching calls needed to complete <font face="sans-serif"> MPI</font>  
communications initiated by other processes.  
For example, if the process executed a nonblocking send, it must  
eventually call <font face="sans-serif"> MPI_WAIT</font>, <font face="sans-serif"> MPI_TEST</font>,  
<font face="sans-serif"> MPI_REQUEST_FREE</font>, or any derived function; if the process  
is the target of a send, then it must post   
the matching receive; if it is part of a group executing a collective  
operation, then it must have completed its participation in the  
operation.  
<P> 
The call to <font face="sans-serif"> MPI_FINALIZE</font> does not free objects created by  
<font face="sans-serif"> MPI</font> calls; these objects are freed using  
<font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_FREE</font> calls.   
<P> 
<font face="sans-serif"> MPI_FINALIZE</font> is collective over all connected processes.  
If no processes were spawned, accepted or connected then this means  
over <font face="sans-serif">  MPI_COMM_WORLD</font>; otherwise it is collective over the  
union of all processes that have been and continue to be connected,  
as explained in Section <a href="node256.htm#Node256">Releasing Connections 
</a>.  
<P> 
The following examples illustrates these rules  
<P> 
<br><b> Example</b>  
  
The following code is correct  
<P> 
<br> 
<pre><tt>        Process 0                Process 1 
        ---------                --------- 
        MPI_Init();              MPI_Init(); 
        MPI_Send(dest=1);        MPI_Recv(src=0); 
        MPI_Finalize();          MPI_Finalize(); 
</tt></pre> 
  
<P> 
<br><b> Example</b>  
  
Without a matching receive, the program is erroneous  
<br> 
<pre><tt>        Process 0                Process 1 
        -----------              ----------- 
        MPI_Init();              MPI_Init(); 
        MPI_Send (dest=1); 
        MPI_Finalize();          MPI_Finalize(); 
</tt></pre> 
  
<P> 
<br><b> Example</b>  
  
  
  This program is correct:  Process 0 calls  
    <font face="sans-serif"> MPI_Finalize</font> after it has executed    
    the <font face="sans-serif"> MPI</font> calls that complete the  
    send operation. Likewise, process 1 executes the <font face="sans-serif"> MPI</font> call  
    that completes the matching receive operation before it calls <font face="sans-serif"> MPI_Finalize</font>.  
<br> 
<pre><tt>  Process 0                     Proces 1 
  --------                      -------- 
  MPI_Init();                   MPI_Init();  
  MPI_Isend(dest=1);            MPI_Recv(src=0); 
  MPI_Request_free();           MPI_Finalize(); 
  MPI_Finalize();               exit(); 
exit(); 
</tt></pre> 
  
<P> 
<br><b> Example</b>  
  
  
  This program is correct.  The attached buffer is a resource  
    allocated by the user, not by <font face="sans-serif"> MPI</font>; it is available to the user  
    after <font face="sans-serif"> MPI</font> is finalized.  
<br> 
<pre><tt>   Process 0                     Process 1 
   ---------                     --------- 
   MPI_Init();                  MPI_Init(); 
   buffer = malloc(1000000);    MPI_Recv(src=0); 
   MPI_Buffer_attach();         MPI_Finalize(); 
   MPI_Send(dest=1));           exit(); 
   MPI_Finalize(); 
   free(buffer); 
   exit(); 
</tt></pre> 
  
<P> 
<br><b> Example</b>  
  
  
  
  
  
  This program is correct. The cancel operation must succeed,  
    since the send cannot complete normally. The wait operation, after  
    the call to <font face="sans-serif"> MPI_Cancel</font>, is  
    local --- no matching <font face="sans-serif"> MPI</font> call is required on process 1.  
<P> 
<br> 
<pre><tt>   Process 0                    Process 1 
   ---------                    --------- 
   MPI_Issend(dest=1);          MPI_Finalize(); 
   MPI_Cancel(); 
   MPI_Wait(); 
   MPI_Finalize(); 
</tt></pre> 
  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Even though a process has  
  executed all <font face="sans-serif"> MPI</font> calls needed to complete the communications  
it is involved with, such  
  communication may not yet be completed from the viewpoint of the underlying  
  <font face="sans-serif"> MPI</font> system.  For example, a blocking send may have returned, even though the data  
  is still buffered at the sender in an <font face="sans-serif"> MPI</font>  
    buffer; an <font face="sans-serif"> MPI</font> process may receive a cancel request for a  
  message it has completed receiving.  The <font face="sans-serif"> MPI</font> implementation must ensure that a   
  process has completed any involvement in <font face="sans-serif"> MPI</font> communication before  
  <font face="sans-serif"> MPI_FINALIZE</font> returns.  Thus, if a process exits after the call to  
  <font face="sans-serif"> MPI_FINALIZE</font>, this will not cause an ongoing communication to  
  fail.   
The <font face="sans-serif"> MPI</font> implementation should also complete freeing all  
  objects marked for deletion by <font face="sans-serif"> MPI</font> calls that freed them.  
 (<em> End of advice to implementors.</em>) <br> 
Once <font face="sans-serif"> MPI_FINALIZE</font> returns, no <font face="sans-serif"> MPI</font> routine (not even <font face="sans-serif"> MPI_INIT</font>) may  
be called, except for   
<font face="sans-serif"> MPI_GET_VERSION</font>, <font face="sans-serif"> MPI_GET_LIBRARY_VERSION</font>,  
<font face="sans-serif"> MPI_INITIALIZED</font>,  
<font face="sans-serif"> MPI_FINALIZED</font>, and any function   
with the prefix <font face="sans-serif"> MPI_T_</font> (within the constraints for functions with this prefix listed in Section <a href="node376.htm#Node376">Initialization and Finalization 
</a>).    
<P> 
Although it is not required that all processes return from  
<font face="sans-serif"> MPI_FINALIZE</font>, it is required that at least process 0 in  
<font face="sans-serif">  MPI_COMM_WORLD</font> return, so  
that users can know that the <font face="sans-serif"> MPI</font> portion of the computation is over.  In  
addition, in a POSIX environment, users may desire to supply an exit code for  
each process that returns from <font face="sans-serif"> MPI_FINALIZE</font>.  
<P> 
<br><b> Example</b>  
  
The following illustrates the use of requiring that at least one  
process return and that it be known that process 0 is one of the processes  
that return.  One wants code like the following to work no matter how many  
processes return.  
<P> 
<br> 
<pre><tt>    ... 
    MPI_Comm_rank(MPI_COMM_WORLD, &amp;myrank); 
    ... 
    MPI_Finalize(); 
    if (myrank == 0) { 
        resultfile = fopen("outfile","w"); 
        dump_results(resultfile); 
        fclose(resultfile); 
    } 
    exit(0); 
</tt></pre> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INITIALIZED(flag)</TD></TR>  
<TR><TD> OUT flag</TD><TD>F</TD></TR>lag is true if <font face="sans-serif"> MPI_INIT</font> has been called and false  
otherwise.  
</TABLE>  
<P> 
 <tt> int MPI_Initialized(int *flag) <br></tt>  
<P> 
 <tt> MPI_Initialized(flag, ierror) <br> LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_INITIALIZED(FLAG, IERROR)<br> LOGICAL FLAG <br>INTEGER IERROR <br></tt>  
  
<P> 
This routine may be used to determine whether <font face="sans-serif"> MPI_INIT</font> has been  
called.  
<font face="sans-serif"> MPI_INITIALIZED</font> returns <font face="sans-serif"> true</font> if the calling process has  
called <font face="sans-serif"> MPI_INIT</font>.  Whether <font face="sans-serif"> MPI_FINALIZE</font> has been  
called does not affect the behavior of <font face="sans-serif"> MPI_INITIALIZED</font>.  
It is one of the few routines that may be called before  
<font face="sans-serif"> MPI_INIT</font> is called.  
This function must always be thread-safe, as defined in  
Section <a href="node300.htm#Node300"><font face="sans-serif"> MPI</font> and Threads 
</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ABORT(comm, errorcode)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator of tasks to abort</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code to return to invoking environment</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Abort(MPI_Comm comm, int errorcode) <br></tt>  
<P> 
 <tt> MPI_Abort(comm, errorcode, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: errorcode <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ABORT(COMM, ERRORCODE, IERROR)<br> INTEGER COMM, ERRORCODE, IERROR <br></tt>  
  
<P> 
This routine makes a ``best attempt'' to abort all tasks in the group  
of <font face="sans-serif"> comm</font>.  
This function does not require that the invoking environment take any action  
with the error code.  However, a Unix or POSIX environment should handle this  
as a <tt>return errorcode</tt> from the main program.  
<P> 
It may not be possible for an <font face="sans-serif"> MPI</font> implementation to abort only the  
processes represented by <font face="sans-serif"> comm</font> if this is a subset of the processes.  
In this case, the <font face="sans-serif"> MPI</font> implementation should attempt to abort all the connected  
processes but should not abort any unconnected processes.  
If no processes were spawned, accepted, or connected then this has the effect  
of aborting all the processes associated with <font face="sans-serif">  MPI_COMM_WORLD</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The communicator argument is provided to allow for future extensions of <font face="sans-serif"> MPI</font> to  
environments with, for example, dynamic process management.  In particular, it  
allows but does not require an <font face="sans-serif"> MPI</font> implementation to abort a subset of  
<font face="sans-serif">  MPI_COMM_WORLD</font>.   
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Whether the <font face="sans-serif"> errorcode</font> is returned from the executable or from the  
<font face="sans-serif"> MPI</font> process startup mechanism (e.g., <tt>mpiexec</tt>), is an aspect of quality  
of the <font face="sans-serif"> MPI</font> library but not mandatory.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Where possible, a high-quality implementation will try to return the  
<font face="sans-serif"> errorcode</font> from the <font face="sans-serif"> MPI</font> process startup mechanism  
(e.g. <tt>mpiexec</tt> or singleton init).  
 (<em> End of advice to implementors.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node224.htm#Node224"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node226.htm#Node226"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node226.htm#Node226"> Allowing User Functions at Process Termination</a>
<b>Previous: </b><a href="node224.htm#Node224"> Timers and Synchronization</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

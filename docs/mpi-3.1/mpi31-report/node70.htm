<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Matching Probe</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node70">65. Matching Probe</span></h2>
<a href="node69.htm#Node69"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node71.htm#Node71"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node71.htm#Node71"> Matched Receives</a>
<b>Previous: </b><a href="node69.htm#Node69"> Probe</a>
<p>
  
  
  
<P> 
The function <font face="sans-serif"> MPI_PROBE</font> checks for incoming messages without  
receiving them. Since the list of incoming messages is global among the  
threads of each <font face="sans-serif"> MPI</font> process, it can be hard to use this functionality  
in threaded environments [<a href="node522.htm#-Bib29">29</a>,<a href="node522.htm#-Bib26">26</a>].  
<P> 
Like <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>, the  
<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> operations allow incoming  
messages to be queried without actually receiving them, except that  
<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> provide a mechanism to receive the specific  
message that was matched regardless of other intervening probe or  
receive operations. This gives the application an opportunity to decide  
how to receive the message, based on the information returned by  
the probe. In particular, the user may allocate memory for the receive  
buffer, according to the length of the probed message.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IMPROBE(source, tag, comm, flag, message, status)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT flag</TD><TD>flag (logical)</TD></TR>  
<TR><TD> OUT message</TD><TD>returned message (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Improbe(source, tag, comm, flag, message, status, ierror) <br> INTEGER, INTENT(IN) :: source, tag <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>LOGICAL, INTENT(OUT) :: flag <br>TYPE(MPI_Message), INTENT(OUT) :: message <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IMPROBE(SOURCE, TAG, COMM, FLAG, MESSAGE, STATUS, IERROR)<br> INTEGER SOURCE, TAG, COMM, MESSAGE, STATUS(MPI_STATUS_SIZE), IERROR <br>LOGICAL FLAG <br></tt>  
<P> 
<font face="sans-serif"> MPI_IMPROBE(source, tag, comm, flag, message, status)</font> returns  
<font face="sans-serif"> flag = true</font> if there is a message that can be received and that  
matches the pattern specified by the arguments <font face="sans-serif"> source</font>,  
<font face="sans-serif"> tag</font>, and <font face="sans-serif"> comm</font>. The call matches the same message that  
would have been received by a call to <font face="sans-serif"> MPI_RECV(<i>...</i>, source, tag,  
  comm, status)</font> executed at the same point in the program and returns  
in <font face="sans-serif"> status</font> the same value that would have been returned by  
<font face="sans-serif"> MPI_RECV</font>. In addition, it returns in <font face="sans-serif"> message</font> a handle  
to the matched message.  Otherwise, the call returns <font face="sans-serif"> flag = false</font>,  
and leaves <font face="sans-serif"> status</font> and <font face="sans-serif"> message</font> undefined.   
<P> 
A matched receive (<font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>) executed with the message handle will receive the  
message that was matched by the probe. Unlike <font face="sans-serif"> MPI_IPROBE</font>, no  
other probe or receive operation may match the message returned by  
<font face="sans-serif"> MPI_IMPROBE</font>. Each message returned by <font face="sans-serif"> MPI_IMPROBE</font> must  
be received with either <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>.  
<P> 
The source argument of <font face="sans-serif"> MPI_IMPROBE</font> can be  
<font face="sans-serif">  MPI_ANY_SOURCE</font>, and the tag argument can be <font face="sans-serif">  MPI_ANY_TAG</font>,  
so that one can probe for messages from an arbitrary source and/or  
with an arbitrary tag. However, a specific communication context must  
be provided with the <font face="sans-serif"> comm</font> argument.  
<P> 
A synchronous send operation that is matched with <font face="sans-serif"> MPI_IMPROBE</font>  
or <font face="sans-serif"> MPI_MPROBE</font> will complete successfully only if both a matching  
receive is posted with <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>,  
and the receive operation has started to receive the message sent by the  
synchronous send.  
<P> 
There is a special predefined message: <font face="sans-serif">  MPI_MESSAGE_NO_PROC</font>,   
which is a message which has <font face="sans-serif">  MPI_PROC_NULL</font> as its source process.   
The predefined constant <font face="sans-serif">  MPI_MESSAGE_NULL</font> is the value used for invalid message handles.  
<P> 
A matching probe with <font face="sans-serif">  MPI_PROC_NULL</font> as source returns <font face="sans-serif"> flag =  
true</font>,  
<font face="sans-serif">  message = MPI_MESSAGE_NO_PROC</font>, and the status object  
returns <font face="sans-serif"> source = MPI_PROC_NULL</font>, <font face="sans-serif"> tag = MPI_ANY_TAG</font>,  
and <font face="sans-serif"> count = 0</font>; see Section <a href="node75.htm#Node75">Null Processes 
</a>.  
It is not necessary to call <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>   
with <font face="sans-serif"> MPI_MESSAGE_NO_PROC</font>, but it is not erroneous to do so.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI_MESSAGE_NO_PROC</font> was chosen instead of   
<font face="sans-serif"> MPI_MESSAGE_PROC_NULL</font> to avoid possible confusion as another   
null handle constant.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_MPROBE(source, tag, comm, message, status)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT message</TD><TD>returned message (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Mprobe(source, tag, comm, message, status, ierror) <br> INTEGER, INTENT(IN) :: source, tag <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Message), INTENT(OUT) :: message <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_MPROBE(SOURCE, TAG, COMM, MESSAGE, STATUS, IERROR)<br> INTEGER SOURCE, TAG, COMM, MESSAGE, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
<P> 
<font face="sans-serif"> MPI_MPROBE</font> behaves like <font face="sans-serif"> MPI_IMPROBE</font> except that it is a  
blocking call that returns only after a matching message has been  
found.  
<P> 
The implementation of <font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> needs  
to guarantee progress in the same way as in the case of  
<font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>.  
<P> 

<P>
<hr>
<a href="node69.htm#Node69"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node71.htm#Node71"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node71.htm#Node71"> Matched Receives</a>
<b>Previous: </b><a href="node69.htm#Node69"> Probe</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Data Access with Explicit Offsets</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node324">294. Data Access with Explicit Offsets</span></h2>
<a href="node319.htm#Node323"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node318.htm#Node318"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node325.htm#Node325"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node318.htm#Node318"> Data Access</a>
<b>Next: </b><a href="node325.htm#Node325"> Data Access with Individual File Pointers</a>
<b>Previous: </b><a href="node319.htm#Node323"> Data Access Conventions</a>
<p>
  
  
  
<P> 
If <font face="sans-serif">  MPI_MODE_SEQUENTIAL</font> mode was specified when the file was opened,  
it is erroneous to call the routines in this section.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT(fh, offset, buf, count, datatype, status)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
 <tt> MPI_File_read_at(fh, offset, buf, count, datatype, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..) :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_READ_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_FILE_READ_AT</font> reads a file  
beginning at the position specified by <font face="sans-serif"> offset</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT_ALL(fh, offset, buf, count, datatype, status)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
 <tt> MPI_File_read_at_all(fh, offset, buf, count, datatype, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..) :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_READ_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_FILE_READ_AT_ALL</font> is a collective version  
of the blocking <font face="sans-serif"> MPI_FILE_READ_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT(fh, offset, buf, count, datatype, status)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
 <tt> MPI_File_write_at(fh, offset, buf, count, datatype, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), INTENT(IN) :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_WRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_FILE_WRITE_AT</font> writes a file  
beginning at the position specified by <font face="sans-serif"> offset</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT_ALL(fh, offset, buf, count, datatype, status)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
 <tt> MPI_File_write_at_all(fh, offset, buf, count, datatype, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), INTENT(IN) :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_WRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE), IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>      
  
  
<P> 
<font face="sans-serif"> MPI_FILE_WRITE_AT_ALL</font> is a collective version  
of the blocking <font face="sans-serif"> MPI_FILE_WRITE_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IREAD_AT(fh, offset, buf, count, datatype, request)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
 <tt> MPI_File_iread_at(fh, offset, buf, count, datatype, request, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_IREAD_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_FILE_IREAD_AT</font> is a nonblocking version  
of the <font face="sans-serif"> MPI_FILE_READ_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IREAD_AT_ALL(fh, offset, buf, count, datatype, request)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
 <tt> MPI_File_iread_at_all(fh, offset, buf, count, datatype, request, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>             
 <tt> MPI_FILE_IREAD_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IREAD_AT_ALL</font> is a nonblocking version of  
<font face="sans-serif"> MPI_FILE_READ_AT_ALL</font>. See  
Section <a href="node343.htm#Node343">Nonblocking Collective File Operations 
</a>  
for semantics of nonblocking  
collective file operations.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IWRITE_AT(fh, offset, buf, count, datatype, request)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
 <tt> MPI_File_iwrite_at(fh, offset, buf, count, datatype, request, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_IWRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt;  BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_FILE_IWRITE_AT</font> is a nonblocking version  
of the <font face="sans-serif"> MPI_FILE_WRITE_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IWRITE_AT_ALL(fh, offset, buf, count, datatype, request)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
 <tt> MPI_File_iwrite_at_all(fh, offset, buf, count, datatype, request, ierror) <br> TYPE(MPI_File), INTENT(IN) :: fh <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_FILE_IWRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR <br>INTEGER(KIND=MPI_OFFSET_KIND) OFFSET <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IWRITE_AT_ALL</font> is a nonblocking version of  
<font face="sans-serif"> MPI_FILE_WRITE_AT_ALL</font>.  
<P> 

<P>
<hr>
<a href="node319.htm#Node323"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node318.htm#Node318"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node325.htm#Node325"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node318.htm#Node318"> Data Access</a>
<b>Next: </b><a href="node325.htm#Node325"> Data Access with Individual File Pointers</a>
<b>Previous: </b><a href="node319.htm#Node323"> Data Access Conventions</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

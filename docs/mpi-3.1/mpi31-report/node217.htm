<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Error Handling</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node217">200. Error Handling</span></h1>
<a href="node216.htm#Node216"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node218.htm#Node218"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node218.htm#Node218"> Error Handlers for Communicators</a>
<b>Previous: </b><a href="node216.htm#Node216"> Memory Allocation</a>
<p>
  
  
<P> 
An <font face="sans-serif"> MPI</font> implementation cannot or may choose not to handle some errors  
that occur during <font face="sans-serif"> MPI</font> calls.  These can include errors that generate  
exceptions or traps, such as floating point errors or access  
violations.  
The set of errors that are handled by <font face="sans-serif"> MPI</font> is implementation-dependent.  
Each such error generates an <b> </b><font face="sans-serif"> MPI</font> exception</b>.  
<P> 
The above text takes precedence over any text on error handling within this  
document.  Specifically, text that states that errors <em> will</em> be handled  
should be read as <em> may</em> be handled.  
<P> 
A user can associate error handlers to three types of objects:  
communicators, windows, and files.  The  
specified error handling routine will be used for any <font face="sans-serif"> MPI</font> exception  
that occurs during a call to <font face="sans-serif"> MPI</font> for the respective object.  
<font face="sans-serif"> MPI</font> calls that are not related to any objects are considered to  
be attached to the communicator <font face="sans-serif">  MPI_COMM_WORLD</font>.  
The attachment of error handlers to objects is purely local:  
different processes may attach different error handlers  
to corresponding objects.  
<P> 
Several predefined error handlers are available in <font face="sans-serif"> MPI</font>:  
<dl> 
 
<dt> 
<b></b><font face="sans-serif">  MPI_ERRORS_ARE_FATAL</font></b><dd> 
 The handler, when called, causes the  
program to abort on all executing processes.  This has the same effect as if  
<font face="sans-serif"> MPI_ABORT</font> was called by the process that invoked the handler.  
 
<dt> 
<b></b><font face="sans-serif">  MPI_ERRORS_RETURN</font></b><dd> 
 The handler has no effect   
other than  
returning the error code to the user.  
</dl> 
<br> 
Implementations may provide additional predefined error handlers and  
programmers can code their own error handlers.  
<P> 
The error handler  
<font face="sans-serif">  MPI_ERRORS_ARE_FATAL</font> is associated by default  
with <font face="sans-serif">  MPI_COMM-</font> <font face="sans-serif">  _WORLD</font>after initialization.  Thus, if the user chooses not to control error handling,  
every error that <font face="sans-serif"> MPI</font> handles is treated as fatal.  
Since (almost) all <font face="sans-serif"> MPI</font> calls return an error code, a user may choose to handle  
errors in its main code, by testing the return code of <font face="sans-serif"> MPI</font> calls and  
executing a  
suitable recovery code when the call was not successful.  In this case, the  
error handler <font face="sans-serif">  MPI_ERRORS_RETURN</font> will be used.   Usually it is more  
convenient and more efficient not to test for errors after each <font face="sans-serif"> MPI</font> call, and  
have such error handled by a non-trivial <font face="sans-serif"> MPI</font> error handler.  
<P> 
After an error is detected, the state of <font face="sans-serif"> MPI</font> is undefined.  That is, using  
a user-defined error handler, or <font face="sans-serif">  MPI_ERRORS_RETURN</font>, does <em> not</em>  
necessarily  
allow the user to continue to use <font face="sans-serif"> MPI</font> after an error is detected.  The purpose  
of these error handlers is to allow a user to issue user-defined error messages  
and to take actions unrelated to <font face="sans-serif"> MPI</font> (such as flushing I/O buffers) before a  
program exits.  
An <font face="sans-serif"> MPI</font> implementation is free to allow <font face="sans-serif"> MPI</font> to continue after  
an error but is not required to do so.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will, to the greatest possible extent,  
circumscribe the impact of an error, so that normal processing can  
continue after an error handler was invoked.  The implementation  
documentation will  
provide information on the possible effect of each class of errors.  
 (<em> End of advice to implementors.</em>) <br> 
An <font face="sans-serif"> MPI</font> error handler is an opaque object, which is accessed by a handle.  
<font face="sans-serif"> MPI</font> calls are provided to create new error handlers, to associate error  
handlers with objects, and to test which error handler is associated with  
an object.  
C has  
distinct typedefs for user defined error handling callback  
functions that   
accept  
communicator, file, and window arguments.  
In Fortran there are three user routines.  
<P> 
An error handler object is created by a call to  
<font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_CREATE_ERRHANDLER</font>, where  
<font face="sans-serif">  </font><font face="sans-serif"> XXX</font></font> is, respectively, <font face="sans-serif">  COMM</font>,  
<font face="sans-serif">  WIN</font>, or <font face="sans-serif">  FILE</font>.  
<P> 
An error handler  is attached to a communicator, window, or file  
by a call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_SET_ERRHANDLER</font>.  The error handler  
must be either a predefined error handler, or an error handler that  
was created by a call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_CREATE_ERRHANDLER</font>, with  
matching <font face="sans-serif">  </font><font face="sans-serif"> XXX</font></font>.  
The predefined error handlers <font face="sans-serif">  MPI_ERRORS_RETURN</font> and  
<font face="sans-serif">  MPI_ERRORS_ARE_FATAL</font> can be attached to  
communicators, windows, and files.    
<P> 
The error handler currently associated with a communicator, window, or  
file can be retrieved by a call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_GET_ERRHANDLER</font>.  
<P> 
The <font face="sans-serif"> MPI</font> function <font face="sans-serif"> MPI_ERRHANDLER_FREE</font> can be used to free an  
error handler that was created by a call to  
<font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_CREATE_ERRHANDLER</font>.  
 <P> 
<font face="sans-serif"> MPI_ {COMM,WIN,FILE }_GET_ERRHANDLER</font> behave as if a  
new error handler object is created.  
That is, once the error handler is no longer needed,  
<font face="sans-serif"> MPI_ERRHANDLER_FREE</font> should be called with the error handler returned  
from  
<font face="sans-serif"> MPI_ {COMM,WIN,FILE }_GET_ERRHANDLER</font>  
to mark the error handler for deallocation.  
This provides behavior similar to that of <font face="sans-serif"> MPI_COMM_GROUP</font> and  
<font face="sans-serif"> MPI_GROUP_FREE</font>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations should raise an error when an error handler  
that  
was created by a call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_CREATE_ERRHANDLER</font> is  
attached to an object of the wrong type with a call to  
<font face="sans-serif"> MPI_YYY_SET_ERRHANDLER</font>.  To do so, it is necessary to  
maintain, with each error handler, information on the typedef of the  
associated user function.  
 (<em> End of advice to implementors.</em>) <br> 
The syntax for these calls is given below.  
<P> 
<P> 
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node216.htm#Node216"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node218.htm#Node218"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node218.htm#Node218"> Error Handlers for Communicators</a>
<b>Previous: </b><a href="node216.htm#Node216"> Memory Allocation</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

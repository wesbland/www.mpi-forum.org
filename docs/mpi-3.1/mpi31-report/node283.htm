<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Flush and Sync</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node283">258. Flush and Sync</span></h2>
<a href="node282.htm#Node282"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node279.htm#Node279"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node284.htm#Node284"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node279.htm#Node279"> Synchronization Calls</a>
<b>Next: </b><a href="node284.htm#Node284"> Assertions</a>
<b>Previous: </b><a href="node282.htm#Node282"> Lock</a>
<p>
  
<P> 
All flush and sync functions can be called only within passive target  
epochs.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_FLUSH(rank, win)</TD></TR>  
<TR><TD> IN rank</TD><TD>rank of target window (non-negative integer)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_flush(int rank, MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Win_flush(rank, win, ierror) <br> INTEGER, INTENT(IN) :: rank <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_FLUSH(RANK, WIN, IERROR)<br> INTEGER RANK, WIN, IERROR <br></tt>  
<P> 
<P> 
<font face="sans-serif"> MPI_WIN_FLUSH</font> completes all outstanding <font face="sans-serif"> RMA</font> operations initiated by  
the calling process to the target rank on the specified window. The operations are completed both at  
the origin and at the target.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_FLUSH_ALL(win)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_flush_all(MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Win_flush_all(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_FLUSH_ALL(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
<P> 
<P> 
All <font face="sans-serif"> RMA</font> operations issued by the calling process to any target on the specified window  
prior to this call and in the specified window will have  
completed both at the origin and at the target when this call  
returns.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_FLUSH_LOCAL(rank, win)</TD></TR>  
<TR><TD> IN rank</TD><TD>rank of target window (non-negative integer)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_flush_local(int rank, MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Win_flush_local(rank, win, ierror) <br> INTEGER, INTENT(IN) :: rank <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_FLUSH_LOCAL(RANK, WIN, IERROR)<br> INTEGER RANK, WIN, IERROR <br></tt>  
<P> 
<P> 
Locally completes at the origin all outstanding <font face="sans-serif"> RMA</font> operations   
initiated by the calling process to the target process specified by rank  
on the specified window. For example, after this routine completes, the user may   
reuse any buffers provided to put, get, or accumulate operations.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_FLUSH_LOCAL_ALL(win)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_flush_local_all(MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Win_flush_local_all(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_FLUSH_LOCAL_ALL(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
<P> 
<P> 
All <font face="sans-serif"> RMA</font> operations issued to any target prior to this call   
in this window will have completed at the origin when  
<font face="sans-serif"> MPI_WIN_FLUSH_LOCAL_ALL</font> returns.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_SYNC(win)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Win_sync(MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Win_sync(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_SYNC(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
<P> 
<P> 
The call <font face="sans-serif"> MPI_WIN_SYNC</font> synchronizes the private and public window  
copies of <font face="sans-serif"> win</font>.   
For the purposes of synchronizing the private and public window,  
<font face="sans-serif"> MPI_WIN_SYNC</font> has the effect of ending and reopening an  
access and exposure epoch on the window (note that it does not  
actually end an epoch or complete any pending <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> operations).  
<P> 

<P>
<hr>
<a href="node282.htm#Node282"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node279.htm#Node279"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node284.htm#Node284"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node279.htm#Node279"> Synchronization Calls</a>
<b>Next: </b><a href="node284.htm#Node284"> Assertions</a>
<b>Previous: </b><a href="node282.htm#Node282"> Lock</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

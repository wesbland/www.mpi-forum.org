<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Inter-communicator Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node168">161. Inter-communicator Operations</span></h2>
<a href="node167.htm#Node167"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node166.htm#Node166"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node169.htm#Node169"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node166.htm#Node166"> Inter-Communication</a>
<b>Next: </b><a href="node169.htm#Node169"> Inter-Communication Examples</a>
<b>Previous: </b><a href="node167.htm#Node167"> Inter-communicator Accessors</a>
<p>
  
<P> 
This section introduces four blocking inter-communicator operations.  
<font face="sans-serif"> MPI_INTERCOMM_CREATE</font> is used to bindtwo intra-communicators into an inter-communicator; the function  
<font face="sans-serif"> MPI_INTERCOMM_MERGE</font> creates an intra-communicator by  
merging the local and remote groups of an inter-communicator.  The  
functions <br><font face="sans-serif"> MPI_COMM_DUP</font> and  
<br><font face="sans-serif"> MPI_COMM_FREE</font>, introduced previously,  
duplicate and free an inter-communicator, respectively.  
<P> 
Overlap of local and remote groups that are bound into an  
inter-communicator is prohibited.  If there is overlap, then the  
program is erroneous and is likely to deadlock.  (If a process is  
multithreaded, and <font face="sans-serif"> MPI</font> calls block only a thread, rather than a  
process, then ``dual membership'' can be supported.  It is then the  
user's responsibility to make sure that calls on behalf of the two  
``roles'' of a process are executed by two independent threads.)  
<P> 
The function <font face="sans-serif"> MPI_INTERCOMM_CREATE</font> can be used to create an  
inter-communicator from two existing intra-communicators, in the following  
situation: At least one selected member from each group (the ``group  
leader'') has the ability to communicate with the selected member from  
the other group; that is, a ``peer'' communicator exists to which both  
leaders belong, and each leader knows the rank of the other leader in  
this peer communicator.  
Furthermore, members of each group know the rank of their leader.  
<P> 
Construction of an inter-communicator from two intra-communicators requires  
separate collective operations in the local group and in the remote group, as  
well as a point-to-point communication between a process in the local group  
and a process in the remote group.  
<P> 
In standard <font face="sans-serif"> MPI</font> implementations (with static process allocation  
at initialization), the <font face="sans-serif">  MPI_COMM_WORLD</font>  
communicator (or preferably a dedicated duplicate thereof)  
can be this peer communicator.    
For applications that have used spawn or join, it may be necessary  
to first create an intracommunicator to be used as peer.  
<P> 
The application topology functions described in Chapter <a href="node186.htm#Node186">Process Topologies 
</a> do  
not apply to inter-communicators.  Users that require this capability should  
utilize <font face="sans-serif"> MPI_INTERCOMM_MERGE</font> to build an intra-communicator, then  
apply the graph or cartesian topology capabilities to that intra-communicator,  
creating an appropriate topology-oriented intra-communicator.  Alternatively,  
it may be reasonable to devise one's own application topology mechanisms for  
this case, without loss of generality.  
<P> 
<P><img width=385 height=200 src="img158.gif" alt="Image file"><P>
 <tt> int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) <br></tt>  
<P> 
 <tt> MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: local_comm, peer_comm <br>INTEGER, INTENT(IN) :: local_leader, remote_leader, tag <br>TYPE(MPI_Comm), INTENT(OUT) :: newintercomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_INTERCOMM_CREATE(LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR)<br> INTEGER LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR <br></tt>  
  
<P> 
 This call creates an inter-communicator.  It is collective  
over the union of the local and remote groups.  Processes should  
provide identical <font face="sans-serif"> local_comm</font> and <font face="sans-serif"> local_leader</font>  
arguments within each group.  
Wildcards are not permitted for  
<font face="sans-serif"> remote_leader, local_leader</font>, and <font face="sans-serif"> tag</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INTERCOMM_MERGE(intercomm, high, newintracomm)</TD></TR>  
<TR><TD> IN intercomm</TD><TD>Inter-Communicator (handle) </TD></TR>  
<TR><TD> IN high</TD><TD>(logical)</TD></TR>  
<TR><TD> OUT newintracomm</TD><TD>  new intra-communicator (handle) </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) <br></tt>  
<P> 
 <tt> MPI_Intercomm_merge(intercomm, high, newintracomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: intercomm <br>LOGICAL, INTENT(IN) :: high <br>TYPE(MPI_Comm), INTENT(OUT) :: newintracomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_INTERCOMM_MERGE(INTERCOMM, HIGH, NEWINTRACOMM, IERROR)<br> INTEGER INTERCOMM, NEWINTRACOMM, IERROR <br>LOGICAL HIGH <br></tt>  
  
<P> 
 This  
function creates an intra-communicator from the union of  
the two groups that are associated with <font face="sans-serif"> intercomm</font>.  
All processes should provide the same  
<font face="sans-serif"> high</font> value within each of the two groups.  If processes in one group  
provided the value <font face="sans-serif"> high = false</font> and processes in the other group  
provided the value <font face="sans-serif"> high = true</font> then the union orders the ``low'' group  
before the ``high'' group.  If all processes provided the same <font face="sans-serif"> high</font>  
argument then the order of the union is arbitrary.  
This call is blocking and collective within the union of  
the two groups.  
<P> 
The error handler on the new intercommunicator in each process is inherited  
from the communicator that contributes the local group.  Note that this can  
result in different processes in the same communicator having different error  
handlers.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
 The implementation of  
<font face="sans-serif"> MPI_INTERCOMM_MERGE</font>,  
<font face="sans-serif"> MPI_COMM_FREE</font>, and <font face="sans-serif"> MPI_COMM_DUP</font> are  
similar to the implementation of  
<font face="sans-serif"> MPI_INTERCOMM_CREATE</font>, except  
that contexts private to the input inter-communicator  
are used for  
communication between group leaders rather than contexts inside a  
bridge communicator.   (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node167.htm#Node167"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node166.htm#Node166"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node169.htm#Node169"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node166.htm#Node166"> Inter-Communication</a>
<b>Next: </b><a href="node169.htm#Node169"> Inter-Communication Examples</a>
<b>Previous: </b><a href="node167.htm#Node167"> Inter-communicator Accessors</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>One-Sided Communications Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node507">433. One-Sided Communications Fortran Bindings</span></h2>
<a href="node506.htm#Node506"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node508.htm#Node508"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node508.htm#Node508"> External Interfaces Fortran Bindings</a>
<b>Previous: </b><a href="node506.htm#Node506"> Process Creation and Management Fortran Bindings</a>
<p>
 <tt> MPI_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE,  OP, WIN, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE,TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE,  OP, WIN, IERROR <br></tt>  
 <tt> MPI_COMPARE_AND_SWAP(ORIGIN_ADDR, COMPARE_ADDR, RESULT_ADDR, DATATYPE, TARGET_RANK, TARGET_DISP, WIN, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*), COMPARE_ADDR(*), RESULT_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER DATATYPE, TARGET_RANK, WIN, IERROR <br></tt>  
 <tt> MPI_FETCH_AND_OP(ORIGIN_ADDR, RESULT_ADDR, DATATYPE, TARGET_RANK, TARGET_DISP, OP, WIN, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*), RESULT_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER DATATYPE, TARGET_RANK, OP, WIN, IERROR <br></tt>  
 <tt> MPI_GET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR)<br> &lt;type&gt; ORIGIN_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR <br></tt>  
 <tt> MPI_GET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*), RESULT_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR <br></tt>  
 <tt> MPI_PUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR)<br> &lt;type&gt; ORIGIN_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE,  WIN, IERROR <br></tt>  
 <tt> MPI_RACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR <br></tt>  
 <tt> MPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR)<br> &lt;type&gt; ORIGIN_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR <br></tt>  
 <tt> MPI_RGET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br> &lt;type&gt; ORIGIN_ADDR(*), RESULT_ADDR(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR <br></tt>  
 <tt> MPI_RPUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR)<br> &lt;type&gt; ORIGIN_ADDR(*)<br>INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP <br>INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE,  WIN, REQUEST, IERROR <br></tt>  
 <tt> MPI_WIN_ALLOCATE(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR)<br> INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR  <br></tt>  
 <tt> MPI_WIN_ALLOCATE_SHARED(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR)<br> INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR  <br></tt>  
 <tt> MPI_WIN_ATTACH(WIN, BASE, SIZE, IERROR)<br> INTEGER WIN, IERROR<br>&lt;type&gt; BASE(*)<br>INTEGER (KIND=MPI_ADDRESS_KIND) SIZE <br></tt>  
 <tt> MPI_WIN_COMPLETE(WIN, IERROR)<br> INTEGER WIN,  IERROR <br></tt>  
 <tt> MPI_WIN_CREATE(BASE, SIZE, DISP_UNIT, INFO, COMM, WIN, IERROR)<br>  &lt;type&gt; BASE(*) <br>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE  <br>INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_CREATE_DYNAMIC(INFO, COMM, WIN, IERROR)<br>  INTEGER INFO, COMM, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_DETACH(WIN, BASE, IERROR)<br> INTEGER WIN, IERROR<br>&lt;type&gt; BASE(*) <br></tt>  
 <tt> MPI_WIN_FENCE(ASSERT, WIN, IERROR)<br> INTEGER ASSERT, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_FLUSH(RANK, WIN, IERROR)<br> INTEGER RANK, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_FLUSH_ALL(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
 <tt> MPI_WIN_FLUSH_LOCAL(RANK, WIN, IERROR)<br> INTEGER RANK, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_FLUSH_LOCAL_ALL(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
 <tt> MPI_WIN_FREE(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
 <tt> MPI_WIN_GET_GROUP(WIN, GROUP, IERROR)<br> INTEGER WIN, GROUP, IERROR <br></tt>  
 <tt> MPI_WIN_GET_INFO(WIN, INFO_USED, IERROR)<br> INTEGER WIN, INFO_USED, IERROR <br></tt>  
 <tt> MPI_WIN_LOCK(LOCK_TYPE, RANK, ASSERT, WIN, IERROR)<br> INTEGER LOCK_TYPE, RANK, ASSERT, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_LOCK_ALL(ASSERT, WIN, IERROR)<br> INTEGER ASSERT, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_POST(GROUP, ASSERT, WIN, IERROR)<br> INTEGER GROUP, ASSERT, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_SET_INFO(WIN, INFO, IERROR)<br> INTEGER WIN, INFO, IERROR <br></tt>  
 <tt> MPI_WIN_SHARED_QUERY(WIN, RANK, SIZE, DISP_UNIT, BASEPTR, IERROR)<br> INTEGER WIN, RANK, DISP_UNIT, IERROR<br>INTEGER (KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR  <br></tt>  
 <tt> MPI_WIN_START(GROUP, ASSERT, WIN, IERROR)<br> INTEGER GROUP, ASSERT, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_SYNC(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
 <tt> MPI_WIN_TEST(WIN, FLAG, IERROR)<br> INTEGER WIN, IERROR<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_WIN_UNLOCK(RANK, WIN, IERROR)<br> INTEGER RANK, WIN, IERROR <br></tt>  
 <tt> MPI_WIN_UNLOCK_ALL(WIN, IERROR)<br> INTEGER WIN, IERROR <br></tt>  
 <tt> MPI_WIN_WAIT(WIN, IERROR)<br> INTEGER WIN,  IERROR <br></tt>  
<P> 

<P>
<hr>
<a href="node506.htm#Node506"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node508.htm#Node508"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node508.htm#Node508"> External Interfaces Fortran Bindings</a>
<b>Previous: </b><a href="node506.htm#Node506"> Process Creation and Management Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Introduction and Overview</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node95">90. Introduction and Overview</span></h1>
<a href="node94.htm#Node94"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node96.htm#Node96"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node96.htm#Node96"> Communicator Argument</a>
<b>Previous: </b><a href="node94.htm#Node94"> Collective Communication</a>
<p>
   
<P> 
Collective communication is defined as communication that involves  
a group  
or groups  
of processes.  
The functions of this type provided by <font face="sans-serif"> MPI</font> are the following:  
<ul> 
 
<li><font face="sans-serif"> MPI_BARRIER</font>, <font face="sans-serif"> MPI_IBARRIER</font>:  
Barrier synchronization across  
all members of a group  
(Section <a href="node100.htm#Node100">Barrier Synchronization 
</a> and Section <a href="node127.htm#Node127">Nonblocking Barrier Synchronization 
</a>).  
 
<li><font face="sans-serif"> MPI_BCAST</font>, <font face="sans-serif"> MPI_IBCAST</font>:  
Broadcast from one member to all members of a group  
(Section <a href="node101.htm#Node101">Broadcast 
</a> and Section <a href="node128.htm#Node128">Nonblocking Broadcast 
</a>).  
This is shown  
as ``broadcast''  
in Figure <a href="node95.htm#Figure1">1 
</a>.  
 
<li><font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_IGATHER</font>,  
<font face="sans-serif"> MPI_GATHERV</font>, <font face="sans-serif"> MPI_IGATHERV</font>:  
Gather data from  
all members of a group  
to one member  
(Section <a href="node103.htm#Node103">Gather 
</a> and Section <a href="node130.htm#Node130">Nonblocking Gather 
</a>).  
This is shown  
as ``gather''  
in Figure <a href="node95.htm#Figure1">1 
</a>.  
 
<li><font face="sans-serif"> MPI_SCATTER</font>, <font face="sans-serif"> MPI_ISCATTER</font>,  
<font face="sans-serif"> MPI_SCATTERV</font>, <font face="sans-serif"> MPI_ISCATTERV</font>:  
Scatter data from one member to all members of a group  
(Section <a href="node105.htm#Node105">Scatter 
</a> and Section <a href="node131.htm#Node131">Nonblocking Scatter 
</a>).  
This is shown  
as ``scatter''  
in Figure <a href="node95.htm#Figure1">1 
</a>.  
 
<li><font face="sans-serif"> MPI_ALLGATHER</font>, <font face="sans-serif"> MPI_IALLGATHER</font>,   
<font face="sans-serif"> MPI_ALLGATHERV</font>, <font face="sans-serif"> MPI_IALLGATHERV</font>:  
A variation on Gather where all members of  
a  
group receive the result  
(Section <a href="node107.htm#Node107">Gather-to-all 
</a> and Section <a href="node132.htm#Node132">Nonblocking Gather-to-all 
</a>).  
This is shown as ``allgather'' in Figure <a href="node95.htm#Figure1">1 
</a>.  
 
<li><font face="sans-serif"> MPI_ALLTOALL</font>, <font face="sans-serif"> MPI_IALLTOALL</font>,   
<font face="sans-serif"> MPI_ALLTOALLV</font>, <font face="sans-serif"> MPI_IALLTOALLV</font>,   
<font face="sans-serif"> MPI_ALLTOALLW</font>, <font face="sans-serif"> MPI_IALLTOALLW</font>:  
Scatter/Gather data from all members to all members of a group  
(also called complete exchange)  
(Section <a href="node109.htm#Node109">All-to-All Scatter/Gather 
</a> and Section <a href="node133.htm#Node133">Nonblocking All-to-All Scatter/Gather 
</a>).  
This is shown as ``complete exchange'' in Figure <a href="node95.htm#Figure1">1 
</a>.  
 
<li><font face="sans-serif"> MPI_ALLREDUCE</font>, <font face="sans-serif"> MPI_IALLREDUCE</font>,  
<font face="sans-serif"> MPI_REDUCE</font>, <font face="sans-serif"> MPI_IREDUCE</font>:  
Global reduction operations such as sum, max, min, or user-defined functions,  
where the result  
is returned to  
all members of a   
group (Section <a href="node117.htm#Node117">All-Reduce 
</a> and Section <a href="node135.htm#Node135">Nonblocking All-Reduce 
</a>)  
and a variation where the result is  
returned to only one member  
(Section <a href="node110.htm#Node110">Global Reduction Operations 
</a> and Section <a href="node134.htm#Node134">Nonblocking Reduce 
</a>).  
 
<li><font face="sans-serif"> MPI_REDUCE_SCATTER_BLOCK</font>, <font face="sans-serif"> MPI_IREDUCE_SCATTER_BLOCK</font>, <font face="sans-serif"> MPI_REDUCE_SCATTER</font>, <font face="sans-serif"> MPI_IREDUCE_SCATTER</font>:  
A combined reduction and scatter operation  
(Section <a href="node119.htm#Node119">Reduce-Scatter 
</a>,   
Section <a href="node136.htm#Node136">Nonblocking Reduce-Scatter with Equal Blocks 
</a>, and Section <a href="node137.htm#Node137">Nonblocking Reduce-Scatter 
</a>).  
 
<li><font face="sans-serif"> MPI_SCAN</font>, <font face="sans-serif"> MPI_ISCAN</font>,   
<font face="sans-serif"> MPI_EXSCAN</font>, <font face="sans-serif"> MPI_IEXSCAN</font>:  
Scan across all members of a group (also called prefix)  
(Section <a href="node122.htm#Node122">Scan 
</a>,  
Section <a href="node124.htm#Node124">Exclusive Scan 
</a>, Section <a href="node138.htm#Node138">Nonblocking Inclusive Scan 
</a>, and  
Section <a href="node139.htm#Node139">Nonblocking Exclusive Scan 
</a>).  
</ul> 
<br> 
  <div style=\"text-align:center\"><P><img width=352 height=584 src="coll-fig1-22.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 1: </b><span id="Figure1">Collective move functions illustrated
  for a group of six processes. In each case, each row of boxes
  represents data locations in one process. Thus, in the broadcast,
  initially just the first process contains the data $A_0$, but after the
  broadcast all processes contain it.</span><P> 
  
    
One of the key arguments  
in a call to a collective routine  
is a communicator that defines the group  
or groups  
of participating processes and provides a context for the operation.  
This is discussed further in Section <a href="node96.htm#Node96">Communicator Argument 
</a>.  
The syntax and semantics of the collective operations are  
defined to be consistent with the syntax and semantics of the  
point-to-point operations. Thus, general datatypes are allowed  
and must match between sending and receiving processes as specified  
in  
Chapter <a href="node76.htm#Node76">Datatypes 
</a>.  
Several collective routines such as broadcast and gather have  
a single originating or receiving process.   
Such a process is  
called the <em> root</em>.  
Some arguments in the collective functions are specified as  
``significant only at root,'' and are ignored for all  
participants except the root.  
The reader is referred to Chapter <a href="node76.htm#Node76">Datatypes 
</a>  
for information concerning communication buffers,  
general datatypes and type matching rules, and to  
Chapter <a href="node141.htm#Node141">Groups, Contexts, Communicators, and Caching 
</a> for information on how to define groups and  
create communicators.  
<P> 
The type-matching conditions for the collective operations are more  
strict than the corresponding conditions between sender and receiver  
in point-to-point.  Namely, for collective operations,  
the amount of data sent must exactly  
match the amount of data specified by the receiver.  
Different  
type maps (the layout in memory, see Section <a href="node77.htm#Node77">Derived Datatypes 
</a>)  
between sender and receiver are still allowed.  
<P> 
Collective operations can (but are not required to)  
complete as soon as the  
caller's  
participation in the collective communication is  
finished.  A blocking operation is  
complete as soon as the call returns. A nonblocking (immediate) call  
requires a separate completion call (cf. Section <a href="node61.htm#Node61">Nonblocking Communication 
</a>).  
The completion  
of a collective operation indicates that the caller  
is free to modify locations in the  
communication buffer.  It does not indicate that other processes in  
the group have completed or even  
started the operation (unless otherwise  
implied by   
the description of the operation).  
Thus, a collective communication operation may, or may not,  
have the effect of synchronizing all calling processes. This statement  
excludes, of course, the barrier operation.  
<P> 
Collective communication calls may use the same  
communicators as point-to-point communication; <font face="sans-serif"> MPI</font> guarantees that  
messages generated on behalf of collective communication calls will not  
be confused with messages generated by point-to-point communication.  
The collective operations do not have a message tag argument.  
A more detailed discussion of correct use of collective  
routines is found in Section <a href="node140.htm#Node140">Correctness 
</a>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The equal-data restriction (on type matching) was made so  
as to avoid the complexity  
of providing a facility analogous to the status  
argument of <font face="sans-serif"> MPI_RECV</font> for discovering the amount of data sent.  
Some of the collective routines would require an array of status values.  
<P> 
The statements about synchronization are made so as to allow a variety  
of implementations of the collective functions.  
<P> 
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
It is dangerous to rely on synchronization  
side-effects of the collective operations for program correctness.  
For example, even though a particular implementation may  
provide a broadcast routine  
with a side-effect of synchronization, the standard does not require  
this, and a program that relies on this will not be portable.  
<P> 
On the other hand, a correct, portable program must allow for the fact  
that a collective call <em> may</em> be synchronizing.  Though one cannot  
rely on any synchronization side-effect, one must program so as to allow  
it.  These issues are discussed further in Section <a href="node140.htm#Node140">Correctness 
</a>.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
While vendors may write optimized collective routines matched to  
their architectures, a complete library of the collective communication  
routines can be written entirely using the <font face="sans-serif"> MPI</font> point-to-point communication  
functions and a few auxiliary functions.  If implementing on top of  
point-to-point, a hidden, special communicator   
might   
be created for the  
collective operation so as to avoid interference with any on-going  
point-to-point communication at the time of the collective call.  This  
is discussed further in Section <a href="node140.htm#Node140">Correctness 
</a>.  
 (<em> End of advice to implementors.</em>) <br> 
Many of the descriptions of the collective routines provide illustrations in  
terms of blocking <font face="sans-serif"> MPI</font> point-to-point routines.  These are intended solely to   
indicate what data is sent or received by what process.  Many of these  
examples    
are <em> not</em> correct <font face="sans-serif"> MPI</font> programs; for purposes of simplicity, they often  
assume infinite buffering.  
 <P> 

<P>
<hr>
<a href="node94.htm#Node94"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node96.htm#Node96"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node96.htm#Node96"> Communicator Argument</a>
<b>Previous: </b><a href="node94.htm#Node94"> Collective Communication</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

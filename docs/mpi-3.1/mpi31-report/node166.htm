<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Inter-Communication</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node166">159. Inter-Communication</span></h1>
<a href="node165.htm#Node165"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node167.htm#Node167"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node167.htm#Node167"> Inter-communicator Accessors</a>
<b>Previous: </b><a href="node165.htm#Node165"> Library Example #2</a>
<p>
  
This section introduces the concept of inter-communication and  
describes the portions of <font face="sans-serif"> MPI</font> that support it.  It describes support for  
writing programs that contain user-level servers.  
<P> 
All communication described thus far has involved  
communication between processes that are members of the same group.  This type  
of communication is called ``<b> intra-communication</b>'' and the  
communicator used is called an ``<b> intra-communicator</b>,'' as we have noted  
earlier in the chapter.  
<P> 
In modular and multi-disciplinary applications, different process groups  
execute distinct modules and processes within different modules communicate  
with one another in a pipeline or a more general module graph.  In these  
applications, the most natural way for a process to specify a target process  
is by the rank of the target process within the target group.  In applications  
that contain internal user-level servers, each server may be a process group  
that provides services to one or more clients, and each client may be a  
process group that uses the services of one or more servers.  It is again most  
natural to specify the target process by rank within the target group in these  
applications.  This type of communication is called  
``<b> inter-communication</b>'' and the communicator used is called an  
``<b> inter-communicator</b>,'' as introduced earlier.  
<P> 
An <b> inter-communication</b>  is a point-to-point communication  
between processes in different groups.  The group containing a process that  
initiates an inter-communication operation is called the ``local  
group,'' that is, the sender in a send and the receiver in a receive.  The  
group containing the target process is called the ``remote group,'' that is,  
the receiver in a send and the sender in a receive.  As in  
intra-communication, the target process is specified using a  
<font face="sans-serif"> (communicator, rank)</font> pair.  Unlike intra-communication, the  
rank is relative to a second, remote group.  
<P> 
All inter-communicator constructors are blocking  
except for <font face="sans-serif"> MPI_COMM_IDUP</font> and  
require that the local and remote groups be disjoint.    
 
<br> 
<em> Advice to users.</em>  
<P> 
The groups must be disjoint for several reasons.  Primarily, this is the  
  intent of the intercommunicators --- to provide a communicator for  
  communication between disjoint groups.  This is reflected in the  
  definition of <font face="sans-serif"> MPI_INTERCOMM_MERGE</font>, which allows the user to  
  control the ranking of the processes in the created intracommunicator;  
  this ranking makes little sense if the groups are not disjoint.  In  
  addition, the natural extension of collective operations to  
  intercommunicators makes the most sense when  
  the groups are disjoint.  
 (<em> End of advice to users.</em>) <br> 
Here is a summary of the properties of inter-communication and  
inter-communicators:  
<ul> 
  
<li>The syntax of point-to-point   
and collective  
communication is  
the same for both inter- and intra-communication.  The same  
communicator can be used both for send and for receive operations.  
<P> 
 
<li>A target process is addressed by its rank in the remote group, both for sends  
and for receives.  
<P> 
 
<li>Communications  using  an  inter-communicator are guaranteed not  to  
conflict with any communications that use a different communicator.  
<P> 
 
<li>A  communicator  will provide  either  intra- or  
inter-communication, never both.  
</ul> 
<br> 
 The routine <font face="sans-serif"> MPI_COMM_TEST_INTER</font> may be used to determine if  
a communicator is an inter- or intra-communicator.  Inter-communicators can be  
used as arguments to some of the other communicator access routines.  
Inter-communicators cannot be used as input to some of the constructor routines  
for intra-communicators (for instance, <font face="sans-serif"> MPI_CART_CREATE</font>).  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
For the purpose of point-to-point communication,  
communicators can be represented in each process by a tuple consisting of:  
<dl> 
 
<dt> 
<b>group</b><dd> 
  
 
<dt> 
<b>send_context</b><dd> 
  
 
<dt> 
<b>receive_context</b><dd> 
  
 
<dt> 
<b>source</b><dd> 
  
</dl> 
<br> 
 For inter-communicators, <em> group</em> describes the remote group,   
and  
<em> source</em> is the rank of the process in the local group.  
For intra-communicators, <em> group</em> is the communicator group  
(remote=local), <em> source</em> is the rank of the process in this group,  
and <em> send context</em> and <em> receive context</em> are identical.  
A group   
can be  
represented by a rank-to-absolute-address translation table.  
<P> 
The inter-communicator cannot be discussed sensibly without  
considering processes in both the local and remote groups.  Imagine a  
process <b> P</b> in group <img width=8 height=7 src="img140.gif" alt="Image file">
, which has an inter-communicator  
<b> <img width=14 height=9 src="img141.gif" alt="Image file">
</b>, and a process  
<b> Q</b> in group <img width=7 height=9 src="img142.gif" alt="Image file">
, which has an inter-communicator  
<b> <img width=14 height=10 src="img143.gif" alt="Image file">
</b>.  
Then  
<ul> 
 
<li><b> <img width=14 height=9 src="img144.gif" alt="Image file">
.group</b> describes the group <img width=7 height=9 src="img145.gif" alt="Image file">
 and <b> <img width=14 height=10 src="img146.gif" alt="Image file">
.group</b>  
describes the group <img width=8 height=7 src="img147.gif" alt="Image file">
.  
 
<li><b> <img width=14 height=9 src="img148.gif" alt="Image file">
.send_context = <img width=14 height=10 src="img149.gif" alt="Image file">
.receive_context</b> and the context is  
unique in <img width=7 height=9 src="img150.gif" alt="Image file">
; <br>  
<b> <img width=14 height=9 src="img151.gif" alt="Image file">
.receive_context =  <img width=14 height=10 src="img152.gif" alt="Image file">
.send_context</b> and this context is  
unique in <img width=8 height=7 src="img153.gif" alt="Image file">
.  
 
<li><b> <img width=14 height=9 src="img154.gif" alt="Image file">
.source</b> is rank of <b> P</b> in <img width=8 height=7 src="img155.gif" alt="Image file">
 and <b> <img width=14 height=10 src="img156.gif" alt="Image file">
.source</b> is  
rank of <b> Q</b> in <img width=7 height=9 src="img157.gif" alt="Image file">
.  
</ul> 
<br> 
Assume that <b> P</b> sends a message to <b> Q</b> using the  
inter-communicator.  Then <b> P</b> uses the <b> group</b> table to find  
the absolute address of <b> Q</b>; <b> source</b> and <b> send_context</b>  
are appended to the message.  
<P> 
Assume that <b> Q</b> posts a receive with an explicit source argument  
using the inter-communicator.  Then <b> Q</b> matches   
<b> receive_context</b> to the message context and source argument to the  
message source.  
<P> 
The same algorithm is appropriate for intra-communicators as well.  
<P> 
In order to support inter-communicator accessors and constructors, it  
is necessary to supplement this model with additional structures, that  
store information about the local communication group, and additional  
safe contexts.  
 (<em> End of advice to implementors.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node165.htm#Node165"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node167.htm#Node167"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node167.htm#Node167"> Inter-communicator Accessors</a>
<b>Previous: </b><a href="node165.htm#Node165"> Library Example #2</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Groups, Contexts, Communicators, and Caching Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node502">428. Groups, Contexts, Communicators, and Caching Fortran Bindings</span></h2>
<a href="node501.htm#Node501"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node503.htm#Node503"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node503.htm#Node503"> Process Topologies Fortran Bindings</a>
<b>Previous: </b><a href="node501.htm#Node501"> Collective Communication Fortran Bindings</a>
<p>
 <tt> MPI_COMM_COMPARE(COMM1, COMM2, RESULT, IERROR)<br> INTEGER COMM1, COMM2, RESULT, IERROR <br></tt>  
 <tt> MPI_COMM_CREATE(COMM, GROUP, NEWCOMM, IERROR)<br> INTEGER COMM, GROUP, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_CREATE_GROUP(COMM, GROUP, TAG, NEWCOMM, IERROR)<br> INTEGER COMM, GROUP, TAG, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN, COMM_KEYVAL, EXTRA_STATE, IERROR)<br> EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN<br>INTEGER COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br></tt>  
 <tt> MPI_COMM_DELETE_ATTR(COMM, COMM_KEYVAL, IERROR)<br> INTEGER COMM, COMM_KEYVAL, IERROR <br></tt>    
 <tt> MPI_COMM_DUP(COMM, NEWCOMM, IERROR)<br> INTEGER COMM, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_DUP_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_COMM_DUP_WITH_INFO(COMM, INFO, NEWCOMM, IERROR)<br> INTEGER COMM, INFO, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_FREE(COMM, IERROR)<br> INTEGER COMM, IERROR <br></tt>  
 <tt> MPI_COMM_FREE_KEYVAL(COMM_KEYVAL, IERROR)<br> INTEGER COMM_KEYVAL, IERROR <br></tt>   
 <tt> MPI_COMM_GET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<br> INTEGER COMM, COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<br>LOGICAL FLAG <br></tt>    
 <tt> MPI_COMM_GET_INFO(COMM, INFO_USED, IERROR)<br> INTEGER COMM, INFO_USED, IERROR <br></tt>  
 <tt> MPI_COMM_GET_NAME(COMM, COMM_NAME, RESULTLEN, IERROR) <br> INTEGER COMM, RESULTLEN, IERROR<br>CHARACTER*(*) COMM_NAME <br></tt>  
 <tt> MPI_COMM_GROUP(COMM, GROUP, IERROR)<br> INTEGER COMM, GROUP, IERROR <br></tt>  
 <tt> MPI_COMM_IDUP(COMM, NEWCOMM, REQUEST, IERROR)<br> INTEGER COMM, NEWCOMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_COMM_NULL_COPY_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDCOMM, COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_COMM_NULL_DELETE_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<br> INTEGER COMM, COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <br></tt>  
 <tt> MPI_COMM_RANK(COMM, RANK, IERROR)<br> INTEGER COMM, RANK, IERROR <br></tt>  
 <tt> MPI_COMM_REMOTE_GROUP(COMM, GROUP, IERROR)<br> INTEGER COMM, GROUP, IERROR <br></tt>  
 <tt> MPI_COMM_REMOTE_SIZE(COMM, SIZE, IERROR)<br> INTEGER COMM, SIZE, IERROR <br></tt>  
 <tt> MPI_COMM_SET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, IERROR)<br> INTEGER COMM, COMM_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <br></tt>   
 <tt> MPI_COMM_SET_INFO(COMM, INFO, IERROR)<br> INTEGER COMM, INFO, IERROR <br></tt>  
 <tt> MPI_COMM_SET_NAME(COMM, COMM_NAME, IERROR) <br> INTEGER COMM, IERROR<br>CHARACTER*(*) COMM_NAME <br></tt>  
 <tt> MPI_COMM_SIZE(COMM, SIZE, IERROR)<br> INTEGER COMM, SIZE, IERROR <br></tt>  
 <tt> MPI_COMM_SPLIT(COMM, COLOR, KEY, NEWCOMM, IERROR)<br> INTEGER COMM, COLOR, KEY, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_SPLIT_TYPE(COMM, SPLIT_TYPE, KEY, INFO, NEWCOMM, IERROR)<br> INTEGER COMM, SPLIT_TYPE, KEY, INFO, NEWCOMM, IERROR <br></tt>  
 <tt> MPI_COMM_TEST_INTER(COMM, FLAG, IERROR)<br> INTEGER COMM, IERROR<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_GROUP_COMPARE(GROUP1, GROUP2, RESULT, IERROR)<br> INTEGER GROUP1, GROUP2, RESULT, IERROR <br></tt>  
 <tt> MPI_GROUP_DIFFERENCE(GROUP1, GROUP2, NEWGROUP, IERROR)<br> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_EXCL(GROUP, N, RANKS, NEWGROUP, IERROR)<br> INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_FREE(GROUP, IERROR)<br> INTEGER GROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_INCL(GROUP, N, RANKS, NEWGROUP, IERROR)<br> INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_INTERSECTION(GROUP1, GROUP2, NEWGROUP, IERROR)<br> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_RANGE_EXCL(GROUP, N, RANGES, NEWGROUP, IERROR)<br> INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_RANGE_INCL(GROUP, N, RANGES, NEWGROUP, IERROR)<br> INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR <br></tt>  
 <tt> MPI_GROUP_RANK(GROUP, RANK, IERROR)<br> INTEGER GROUP, RANK, IERROR <br></tt>  
 <tt> MPI_GROUP_SIZE(GROUP, SIZE, IERROR)<br> INTEGER GROUP, SIZE, IERROR <br></tt>  
 <tt> MPI_GROUP_TRANSLATE_RANKS(GROUP1, N, RANKS1, GROUP2, RANKS2, IERROR)<br> INTEGER GROUP1, N, RANKS1(*), GROUP2, RANKS2(*), IERROR <br></tt>  
 <tt> MPI_GROUP_UNION(GROUP1, GROUP2, NEWGROUP, IERROR)<br> INTEGER GROUP1, GROUP2, NEWGROUP, IERROR <br></tt>  
 <tt> MPI_INTERCOMM_CREATE(LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR)<br> INTEGER LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR <br></tt>  
 <tt> MPI_INTERCOMM_MERGE(INTERCOMM, HIGH, NEWINTRACOMM, IERROR)<br> INTEGER INTERCOMM, NEWINTRACOMM, IERROR <br>LOGICAL HIGH <br></tt>  
 <tt> MPI_TYPE_CREATE_KEYVAL(TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN, TYPE_KEYVAL, EXTRA_STATE, IERROR)<br> EXTERNAL TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN<br>INTEGER TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br></tt>  
 <tt> MPI_TYPE_DELETE_ATTR(DATATYPE, TYPE_KEYVAL, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR <br></tt>    
 <tt> MPI_TYPE_DUP_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_TYPE_FREE_KEYVAL(TYPE_KEYVAL, IERROR)<br> INTEGER TYPE_KEYVAL, IERROR <br></tt>   
 <tt> MPI_TYPE_GET_ATTR(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<br>LOGICAL FLAG <br></tt>    
 <tt> MPI_TYPE_GET_NAME(DATATYPE, TYPE_NAME, RESULTLEN, IERROR) <br> INTEGER DATATYPE, RESULTLEN, IERROR<br>CHARACTER*(*) TYPE_NAME <br></tt>  
 <tt> MPI_TYPE_NULL_COPY_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_TYPE_NULL_DELETE_FN(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <br></tt>  
 <tt> MPI_TYPE_SET_ATTR(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <br></tt>   
 <tt> MPI_TYPE_SET_NAME(DATATYPE, TYPE_NAME, IERROR) <br> INTEGER DATATYPE, IERROR<br>CHARACTER*(*) TYPE_NAME <br></tt>  
 <tt> MPI_WIN_CREATE_KEYVAL(WIN_COPY_ATTR_FN, WIN_DELETE_ATTR_FN, WIN_KEYVAL, EXTRA_STATE, IERROR)<br> EXTERNAL WIN_COPY_ATTR_FN, WIN_DELETE_ATTR_FN<br>INTEGER WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br></tt>  
 <tt> MPI_WIN_DELETE_ATTR(WIN, WIN_KEYVAL, IERROR)<br> INTEGER WIN, WIN_KEYVAL, IERROR <br></tt>    
 <tt> MPI_WIN_DUP_FN(OLDWIN, WIN_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDWIN, WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_WIN_FREE_KEYVAL(WIN_KEYVAL, IERROR)<br> INTEGER WIN_KEYVAL, IERROR <br></tt>   
 <tt> MPI_WIN_GET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<br> INTEGER WIN, WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<br>LOGICAL FLAG <br></tt>    
 <tt> MPI_WIN_GET_NAME(WIN, WIN_NAME, RESULTLEN, IERROR) <br> INTEGER WIN, RESULTLEN, IERROR<br>CHARACTER*(*) WIN_NAME <br></tt>  
 <tt> MPI_WIN_NULL_COPY_FN(OLDWIN, WIN_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDWIN, WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,<br>    ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
 <tt> MPI_WIN_NULL_DELETE_FN(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<br> INTEGER WIN, WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <br></tt>  
 <tt> MPI_WIN_SET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, IERROR)<br> INTEGER WIN, WIN_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <br></tt>   
 <tt> MPI_WIN_SET_NAME(WIN, WIN_NAME, IERROR) <br> INTEGER WIN, IERROR<br>CHARACTER*(*) WIN_NAME <br></tt>  
<P> 

<P>
<hr>
<a href="node501.htm#Node501"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node503.htm#Node503"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node503.htm#Node503"> Process Topologies Fortran Bindings</a>
<b>Previous: </b><a href="node501.htm#Node501"> Collective Communication Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Process Topologies Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node503">429. Process Topologies Fortran Bindings</span></h2>
<a href="node502.htm#Node502"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node504.htm#Node504"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node504.htm#Node504"> MPI Environmental Management Fortran Bindings</a>
<b>Previous: </b><a href="node502.htm#Node502"> Groups, Contexts, Communicators, and Caching Fortran Bindings</a>
<p>
 <tt> MPI_CARTDIM_GET(COMM, NDIMS, IERROR)<br> INTEGER COMM, NDIMS, IERROR <br></tt>  
 <tt> MPI_CART_COORDS(COMM, RANK, MAXDIMS, COORDS, IERROR)<br> INTEGER COMM, RANK, MAXDIMS, COORDS(*), IERROR <br></tt>  
 <tt> MPI_CART_CREATE(COMM_OLD, NDIMS, DIMS, PERIODS, REORDER, COMM_CART, IERROR)<br> INTEGER COMM_OLD, NDIMS, DIMS(*), COMM_CART, IERROR <br>LOGICAL PERIODS(*), REORDER <br></tt>  
 <tt> MPI_CART_GET(COMM, MAXDIMS, DIMS, PERIODS, COORDS, IERROR)<br> INTEGER COMM, MAXDIMS, DIMS(*), COORDS(*), IERROR <br>LOGICAL PERIODS(*) <br></tt>  
 <tt> MPI_CART_MAP(COMM, NDIMS, DIMS, PERIODS, NEWRANK, IERROR)<br> INTEGER COMM, NDIMS, DIMS(*), NEWRANK, IERROR <br>LOGICAL PERIODS(*) <br></tt>  
 <tt> MPI_CART_RANK(COMM, COORDS, RANK, IERROR)<br> INTEGER COMM, COORDS(*), RANK, IERROR <br></tt>  
 <tt> MPI_CART_SHIFT(COMM, DIRECTION, DISP, RANK_SOURCE, RANK_DEST, IERROR)<br> INTEGER COMM, DIRECTION, DISP, RANK_SOURCE, RANK_DEST, IERROR <br></tt>  
 <tt> MPI_CART_SUB(COMM, REMAIN_DIMS, NEWCOMM, IERROR)<br> INTEGER COMM, NEWCOMM, IERROR <br>LOGICAL REMAIN_DIMS(*) <br></tt>  
 <tt> MPI_DIMS_CREATE(NNODES, NDIMS, DIMS, IERROR)<br> INTEGER NNODES, NDIMS, DIMS(*), IERROR <br></tt>  
 <tt> MPI_DIST_GRAPH_CREATE(COMM_OLD, N, SOURCES, DEGREES, DESTINATIONS, WEIGHTS, INFO, REORDER, COMM_DIST_GRAPH, IERROR)<br> INTEGER COMM_OLD, N, SOURCES(*), DEGREES(*), DESTINATIONS(*),<br>    WEIGHTS(*), INFO, COMM_DIST_GRAPH, IERROR <br>LOGICAL REORDER <br></tt>  
 <tt> MPI_DIST_GRAPH_CREATE_ADJACENT(COMM_OLD, INDEGREE, SOURCES, SOURCEWEIGHTS, OUTDEGREE, DESTINATIONS, DESTWEIGHTS, INFO, REORDER, COMM_DIST_GRAPH, IERROR)<br> INTEGER COMM_OLD, INDEGREE, SOURCES(*), SOURCEWEIGHTS(*), OUTDEGREE, <br>    DESTINATIONS(*), DESTWEIGHTS(*), INFO, COMM_DIST_GRAPH, IERROR <br>LOGICAL REORDER <br></tt>  
 <tt> MPI_DIST_GRAPH_NEIGHBORS(COMM, MAXINDEGREE, SOURCES, SOURCEWEIGHTS, MAXOUTDEGREE, DESTINATIONS, DESTWEIGHTS, IERROR)<br> INTEGER COMM, MAXINDEGREE, SOURCES(*), SOURCEWEIGHTS(*), MAXOUTDEGREE, <br>    DESTINATIONS(*), DESTWEIGHTS(*), IERROR <br></tt>  
 <tt> MPI_DIST_GRAPH_NEIGHBORS_COUNT(COMM, INDEGREE, OUTDEGREE, WEIGHTED, IERROR)<br> INTEGER COMM, INDEGREE, OUTDEGREE, IERROR <br>LOGICAL WEIGHTED <br></tt>  
 <tt> MPI_GRAPHDIMS_GET(COMM, NNODES, NEDGES, IERROR)<br> INTEGER COMM, NNODES, NEDGES, IERROR <br></tt>  
 <tt> MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER, COMM_GRAPH, IERROR)<br> INTEGER COMM_OLD, NNODES, INDEX(*), EDGES(*), COMM_GRAPH, IERROR <br>LOGICAL REORDER <br></tt>  
 <tt> MPI_GRAPH_GET(COMM, MAXINDEX, MAXEDGES, INDEX, EDGES, IERROR)<br> INTEGER COMM, MAXINDEX, MAXEDGES, INDEX(*), EDGES(*), IERROR <br></tt>  
 <tt> MPI_GRAPH_MAP(COMM, NNODES, INDEX, EDGES, NEWRANK, IERROR)<br> INTEGER COMM, NNODES, INDEX(*), EDGES(*), NEWRANK, IERROR <br></tt>  
 <tt> MPI_GRAPH_NEIGHBORS(COMM, RANK, MAXNEIGHBORS, NEIGHBORS, IERROR)<br> INTEGER COMM, RANK, MAXNEIGHBORS, NEIGHBORS(*), IERROR <br></tt>  
 <tt> MPI_GRAPH_NEIGHBORS_COUNT(COMM, RANK, NNEIGHBORS, IERROR)<br> INTEGER COMM, RANK, NNEIGHBORS, IERROR <br></tt>  
 <tt> MPI_INEIGHBOR_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_INEIGHBOR_ALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, REQUEST, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, COMM,<br>    REQUEST, IERROR <br></tt>  
 <tt> MPI_INEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_INEIGHBOR_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, REQUEST, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE, RECVCOUNTS(*), RDISPLS(*),<br>    RECVTYPE, COMM, REQUEST, IERROR <br></tt>  
 <tt> MPI_INEIGHBOR_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, REQUEST, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER(KIND=MPI_ADDRESS_KIND) SDISPLS(*), RDISPLS(*)<br>INTEGER SENDCOUNTS(*), SENDTYPES(*), RECVCOUNTS(*), RECVTYPES(*), COMM,<br>    REQUEST, IERROR <br></tt>  
 <tt> MPI_NEIGHBOR_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_NEIGHBOR_ALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, COMM,<br>    IERROR <br></tt>  
 <tt> MPI_NEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_NEIGHBOR_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS,<br>    RECVTYPE, COMM, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE, RECVCOUNTS(*), RDISPLS(*), RECVTYPE, COMM, IERROR <br></tt>  
 <tt> MPI_NEIGHBOR_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, IERROR)<br> <i>&lt;</i>type<i>&gt;</i> SENDBUF(*), RECVBUF(*)<br>INTEGER(KIND=MPI_ADDRESS_KIND) SDISPLS(*), RDISPLS(*)<br>INTEGER SENDCOUNTS(*), SENDTYPES(*), RECVCOUNTS(*), RECVTYPES(*), COMM,<br>    IERROR <br></tt>  
 <tt> MPI_TOPO_TEST(COMM, STATUS, IERROR)<br> INTEGER COMM, STATUS, IERROR <br></tt>  
<P> 

<P>
<hr>
<a href="node502.htm#Node502"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node504.htm#Node504"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node504.htm#Node504"> MPI Environmental Management Fortran Bindings</a>
<b>Previous: </b><a href="node502.htm#Node502"> Groups, Contexts, Communicators, and Caching Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

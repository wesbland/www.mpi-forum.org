<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Attributes Example</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node178">169. Attributes Example</span></h2>
<a href="node177.htm#Node177"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node172.htm#Node172"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node179.htm#Node179"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node172.htm#Node172"> Caching</a>
<b>Next: </b><a href="node179.htm#Node179"> Naming Objects</a>
<b>Previous: </b><a href="node177.htm#Node177"> Error Class for Invalid Keyval</a>
<p>
  
 
<br> 
<em> Advice to users.</em>  
<P> 
This example shows how to write a collective communication operation  
that uses caching to be more efficient after the first call.  
 (<em> End of advice to users.</em>) <br> 
<br> 
<pre><tt>   /* key for this module's stuff: */ 
   static int gop_key = MPI_KEYVAL_INVALID; 
 
   typedef struct 
   { 
      int ref_count;          /* reference count */ 
      /* other stuff, whatever else we want */ 
   } gop_stuff_type; 
 
   void Efficient_Collective_Op (MPI_Comm comm, ...) 
   { 
     gop_stuff_type *gop_stuff; 
     MPI_Group       group; 
     int             foundflag; 
 
     MPI_Comm_group(comm, &amp;group); 
 
     if (gop_key == MPI_KEYVAL_INVALID) /* get a key on first call ever */ 
     { 
       if ( ! MPI_Comm_create_keyval( gop_stuff_copier, 
                                gop_stuff_destructor, 
                                &amp;gop_key, (void *)0) ) { 
       /* get the key while assigning its copy and delete callback 
          behavior. */ 
       } else 
           MPI_Abort (comm, 99); 
     } 
 
     MPI_Comm_get_attr (comm, gop_key, &amp;gop_stuff, &amp;foundflag); 
     if (foundflag) 
     { /* This module has executed in this group before. 
          We will use the cached information */ 
     } 
     else 
     { /* This is a group that we have not yet cached anything in. 
          We will now do so. 
       */ 
 
       /* First, allocate storage for the stuff we want, 
          and initialize the reference count */ 
 
       gop_stuff = (gop_stuff_type *) malloc (sizeof(gop_stuff_type)); 
       if (gop_stuff == NULL) { /* abort on out-of-memory error */ } 
 
       gop_stuff -&gt; ref_count = 1; 
 
       /* Second, fill in *gop_stuff with whatever we want. 
          This part isn't shown here */ 
 
       /* Third, store gop_stuff as the attribute value */ 
       MPI_Comm_set_attr (comm, gop_key, gop_stuff); 
     } 
     /* Then, in any case, use contents of *gop_stuff 
        to do the global op ... */ 
   } 
 
   /* The following routine is called by MPI when a group is freed */ 
 
   int gop_stuff_destructor (MPI_Comm comm, int keyval, void *gop_stuffP,  
                         void *extra) 
   { 
     gop_stuff_type *gop_stuff = (gop_stuff_type *)gop_stuffP; 
     if (keyval != gop_key) { /* abort -- programming error */ } 
 
     /* The group's being freed removes one reference to gop_stuff */ 
     gop_stuff -&gt; ref_count -= 1; 
 
     /* If no references remain, then free the storage */ 
     if (gop_stuff -&gt; ref_count == 0) { 
       free((void *)gop_stuff); 
     } 
     return MPI_SUCCESS; 
   } 
 
   /* The following routine is called by MPI when a group is copied */ 
   int gop_stuff_copier (MPI_Comm comm, int keyval, void *extra,  
    void *gop_stuff_inP, void *gop_stuff_outP, int *flag) 
   { 
     gop_stuff_type *gop_stuff_in = (gop_stuff_type *)gop_stuff_inP; 
     gop_stuff_type **gop_stuff_out = (gop_stuff_type **)gop_stuff_outP; 
     if (keyval != gop_key) { /* abort -- programming error */ } 
 
     /* The new group adds one reference to this gop_stuff */ 
     gop_stuff_in -&gt; ref_count += 1; 
     *gop_stuff_out = gop_stuff_in; 
     return MPI_SUCCESS; 
   } 
</tt></pre> 

<P>
<hr>
<a href="node177.htm#Node177"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node172.htm#Node172"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node179.htm#Node179"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node172.htm#Node172"> Caching</a>
<b>Next: </b><a href="node179.htm#Node179"> Naming Objects</a>
<b>Previous: </b><a href="node177.htm#Node177"> Error Class for Invalid Keyval</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

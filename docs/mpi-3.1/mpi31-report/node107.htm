<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Gather-to-all</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node107">102. Gather-to-all</span></h1>
<a href="node106.htm#Node106"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node108.htm#Node108"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node108.htm#Node108"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<b>Previous: </b><a href="node106.htm#Node106"> Examples using <font face="sans-serif"> MPI_SCATTER</font>, <font face="sans-serif"> MPI_SCATTERV</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLGATHER(sendbuf, sendcount, sendtype, recvbuf,  
recvcount, recvtype, comm)</TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice)</TD></TR>  
<TR><TD> IN  recvcount</TD><TD> number of elements received from any process (non-negative  
integer)</TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of receive buffer elements (handle)</TD></TR>  
<TR><TD> IN  comm</TD><TD>  communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Allgather(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
<P> 
 <tt> MPI_Allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcount <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM, IERROR <br></tt>  
<P> 
  
<P> 
<font face="sans-serif"> MPI_ALLGATHER</font> can be thought of as <font face="sans-serif"> MPI_GATHER</font>, but  
where all processes receive the result, instead of just the root.  
The block of data sent from the   
<font face="sans-serif"> j</font>-th   
process is received by every process and placed in the   
<font face="sans-serif"> j</font>-th   
block of the buffer <font face="sans-serif"> recvbuf</font>.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount, sendtype</font>,  
at a process must be equal to the type signature associated with  
<font face="sans-serif"> recvcount, recvtype</font> at any other process.  
<P> 
If <font face="sans-serif"> comm</font> is an intracommunicator,   
the outcome of a call to <font face="sans-serif"> MPI_ALLGATHER(...)</font> is as if  
all processes executed <font face="sans-serif"> n</font> calls to  
<br> 
<pre><tt>   MPI_Gather(sendbuf,sendcount,sendtype,recvbuf,recvcount, 
                                                 recvtype,root,comm) 
</tt></pre> 
for <tt>root = 0 , ..., n-1</tt>.  The rules for correct usage of  
<font face="sans-serif"> MPI_ALLGATHER</font> are easily found from the corresponding rules  
for <font face="sans-serif"> MPI_GATHER</font>.  
<P> 
The ``in place'' option  for intracommunicators is specified by passing the  
value   
<font face="sans-serif">  MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at all processes.  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored.  Then the input data  
of each process is assumed to be in the area where that  
process would receive its own contribution to the receive  
buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an intercommunicator, then each process  
of one group (group A) contributes <font face="sans-serif"> sendcount</font> data items; these  
data are concatenated and the result  
is stored at each process in the other  
group (group B).  Conversely the concatenation of the  
contributions of the processes in group B is stored at each process in  
group A.   The send buffer arguments in group A must be consistent  
with the receive buffer arguments in group B, and vice versa.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The communication pattern of <font face="sans-serif"> MPI_ALLGATHER</font> executed on an  
intercommunication domain need not be symmetric.  The number of items  
sent by processes in group A (as specified by the arguments  
<font face="sans-serif"> sendcount, sendtype</font> in group A and the arguments  
<font face="sans-serif"> recvcount, recvtype</font> in group B), need not equal the number of  
items sent by processes in group B (as specified by the arguments  
<font face="sans-serif"> sendcount, sendtype</font> in group B and the arguments  
<font face="sans-serif"> recvcount, recvtype</font> in group A).  In particular, one can move  
data in only one direction by specifying <font face="sans-serif"> sendcount = 0</font> for  
the communication in the reverse direction.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLGATHERV(sendbuf, sendcount, sendtype, recvbuf,  
recvcounts, displs, recvtype, comm)</TD></TR>  
<TR><TD> IN  sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN  sendcount</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN  sendtype</TD><TD> data type of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT  recvbuf</TD><TD> address of receive buffer (choice)</TD></TR>  
<TR><TD> IN  recvcounts</TD><TD>non-negative  
integer array (of length group size)  
containing the number of elements that are received from each process</TD></TR>  
<TR><TD> IN  displs</TD><TD> integer array (of length group size).  Entry  
<font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> recvbuf</font>) at  
which to place the incoming data from process <font face="sans-serif"> i</font></TD></TR>  
<TR><TD> IN  recvtype</TD><TD> data type of receive buffer elements (handle)</TD></TR>  
<TR><TD> IN  comm</TD><TD>  communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Allgatherv(const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
<P> 
 <tt> MPI_Allgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*) <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*), RECVTYPE, COMM, IERROR <br></tt>  
<P> 
  
<P> 
<font face="sans-serif"> MPI_ALLGATHERV</font> can be thought of as <font face="sans-serif"> MPI_GATHERV</font>, but  
where all processes receive the result, instead of just the root.  
The block of data sent from the   
<font face="sans-serif"> j</font>-th   
process is received by every process and placed in the   
<font face="sans-serif"> j</font>-th   
block of the buffer <font face="sans-serif"> recvbuf</font>.  
These blocks need not all be the same size.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount, sendtype</font>,  
at process <font face="sans-serif"> j</font> must be equal to the type signature associated with  
<font face="sans-serif"> recvcounts[j], recvtype</font> at any other process.  
<P> 
If <font face="sans-serif"> comm</font> is an intracommunicator,   
the outcome is as if all processes executed calls to  
<br> 
<pre><tt>    MPI_Gatherv(sendbuf,sendcount,sendtype,recvbuf,recvcounts,displs, 
                                                   recvtype,root,comm), 
</tt></pre> 
for <tt>root = 0 , ..., n-1</tt>.  The rules for correct usage of  
<font face="sans-serif"> MPI_ALLGATHERV</font> are easily found from the corresponding rules  
for <font face="sans-serif"> MPI_GATHERV</font>.  
<P> 
The ``in place'' option  for intracommunicators is specified by passing the  
value   
<font face="sans-serif">  MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at all processes.  
In such a case, <font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the input data  
of each process is assumed to be in the area where that  
process would receive its own contribution to the receive   
buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an intercommunicator, then each process  
of one group (group A) contributes <font face="sans-serif"> sendcount</font>  
data items; these data are concatenated and the result  
is stored at each process in the other  
group (group B).  Conversely the concatenation of the  
contributions of the processes in group B is stored at each process in  
group A.   The send buffer arguments in group A must be consistent  
with the receive buffer arguments in group B, and vice versa.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node106.htm#Node106"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node108.htm#Node108"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node108.htm#Node108"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<b>Previous: </b><a href="node106.htm#Node106"> Examples using <font face="sans-serif"> MPI_SCATTER</font>, <font face="sans-serif"> MPI_SCATTERV</font></a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Correct Use of Addresses</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node89">84. Correct Use of Addresses</span></h2>
<a href="node88.htm#Node88"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node90.htm#Node90"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node90.htm#Node90"> Decoding a Datatype</a>
<b>Previous: </b><a href="node88.htm#Node88"> Use of General Datatypes in Communication</a>
<p>
  
  
<P> 
Successively declared variables in C or Fortran are not necessarily  
stored at contiguous locations.  Thus, care must be exercised  
that displacements do not cross from one variable  
to another.  Also, in machines with a segmented address space,  
addresses are not unique and address arithmetic has some peculiar  
properties.   Thus, the use of <b> addresses</b>,  
that is, displacements relative to the  
start address <font face="sans-serif">  MPI_BOTTOM</font>, has to be restricted.  
<P> 
Variables belong  
to the same <b> sequential storage</b> if they belong to the same  
array,  
to the same <tt>COMMON</tt> block in Fortran, or to the same structure in C.  
Valid addresses are defined recursively as follows:  
<P> 
<ol> 
 
1. The function   
<font face="sans-serif"> MPI_GET_ADDRESS</font>   
returns a valid address, when  
passed as argument a variable of the calling program.  
 
<br> 
2. The <font face="sans-serif"> buf</font> argument of a communication function evaluates to a  
valid address, when passed as argument a variable of the calling program.  
 
<br> 
3. If <font face="sans-serif"> v</font> is a valid address, and <font face="sans-serif"> i</font> is an  
integer, then <font face="sans-serif"> v+i</font> is a valid address, provided <font face="sans-serif"> v</font> and  
<font face="sans-serif"> v+i</font> are in the same sequential storage.  
</ol> 
A correct program uses only valid addresses to identify the  
locations of entries in communication buffers.  
Furthermore, if <font face="sans-serif"> u</font> and <font face="sans-serif"> v</font> are two valid addresses, then  
the (integer)  
difference <font face="sans-serif"> u - v</font> can be computed only if both <font face="sans-serif"> u</font> and <font face="sans-serif"> v</font>  
are in the same sequential storage.  
No other arithmetic operations can be meaningfully executed on addresses.  
<P> 
The rules above impose no constraints on the use of derived  
datatypes, as long as they are used to define a communication buffer  
that is wholly contained within the same sequential storage.  
However, the construction of a communication buffer that contains  
variables that are not within the same sequential storage must obey  
certain restrictions.  Basically, a communication buffer with  
variables that are not within the same sequential storage can be used  
only by specifying in the communication call <font face="sans-serif"> buf =  
MPI_BOTTOM</font>, <font face="sans-serif"> count = 1</font>, and using a <font face="sans-serif"> datatype</font>  
argument where all displacements are valid (absolute) addresses.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
It is not expected that <font face="sans-serif"> MPI</font> implementations will be able to detect  
erroneous, ``out of bound'' displacements --- unless those overflow the  
user address space --- since the <font face="sans-serif"> MPI</font> call may not know the extent of the  
arrays and records in the host program.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
There is no need to distinguish (absolute) addresses and (relative)  
displacements on a machine with contiguous address space:  
<font face="sans-serif">  MPI_BOTTOM</font> is  
zero, and both addresses and displacements are integers.  On machines where the  
distinction is required, addresses are recognized as expressions that involve  
<font face="sans-serif">  MPI_BOTTOM</font>.  
 (<em> End of advice to implementors.</em>) <br> 
  

<P>
<hr>
<a href="node88.htm#Node88"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node90.htm#Node90"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node90.htm#Node90"> Decoding a Datatype</a>
<b>Previous: </b><a href="node88.htm#Node88"> Use of General Datatypes in Communication</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

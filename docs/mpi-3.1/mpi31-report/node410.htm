<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Fortran Support Through the <tt>mpi</tt> Module</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node410">357. Fortran Support Through the mpi Module</span></h2>
<a href="node409.htm#Node409"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node411.htm#Node411"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node411.htm#Node411"> Fortran Support Through the <tt>mpif.h</tt> Include File</a>
<b>Previous: </b><a href="node409.htm#Node409"> Fortran Support Through the <tt>mpi_f08</tt> Module</a>
<p>
  
  
<P> 
An <font face="sans-serif"> MPI</font> implementation providing a Fortran interface must provide a module named <tt>mpi</tt> that   
can be used in a Fortran program.   
Within all <font face="sans-serif"> MPI</font> function specifications,  
the second of the set of two Fortran routine interface specifications is provided by this module.  
This module must:  
<ul> 
 
<li>Define all named <font face="sans-serif"> MPI</font> constants  
 
<li>Declare <font face="sans-serif"> MPI</font> functions that return a value.   
 
<li>Provide explicit interfaces according to the Fortran routine interface specifications.  
      This module therefore guarantees compile-time argument checking  
      and allows positional and keyword-based argument lists.  
      If an implementation is paired with a compiler that either does  
      not support <tt>TYPE(*), DIMENSION(..)</tt> from TS 29113, or is  
      otherwise unable to ignore the types of choice buffers, then the  
      implementation must provide explicit interfaces only for <font face="sans-serif"> MPI</font>  
      routines with no choice buffer arguments. See  
      Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a> for more  
      details.  
 
<li>Define all <font face="sans-serif"> MPI</font> handles as type <tt> INTEGER</tt>.   
 
<li>Define the derived type <font face="sans-serif">  MPI_Status</font>  
      and all named handle types that are used in the <tt>mpi_f08</tt> module.  
For these named handle types, overload the   
operators <tt>.EQ.</tt> and <tt>.NE.</tt> to allow handle comparison   
via the <tt>.EQ.</tt>, <tt>.NE.</tt>, <tt>==</tt> and <tt>/=</tt> operators.  
</ul> 
<br> 
 
<br> 
<em> Rationale.</em>  
<P> 
They are needed only when the application   
                             converts old-style <tt> INTEGER</tt>  
                             handles into new-style handles with a named type.  
 (<em> End of rationale.</em>) <br> 
<ul> 
 
<li>A high quality <font face="sans-serif"> MPI</font> implementation may enhance the interface  
by using the <tt> ASYNCHRONOUS</tt> attribute in the same way  
as in the <tt>mpi_f08</tt> module  
if it is supported by the underlying compiler.  
 
<li>Set the  <tt> LOGICAL</tt> compile-time constant  
<font face="sans-serif">  MPI_ASYNC_PROTECTS_NONBLOCKING</font> to <tt> .TRUE.</tt>  
if the <tt> ASYNCHRONOUS</tt> attribute is used in all nonblocking interfaces  
<b> and</b> the underlying Fortran compiler supports the <tt> ASYNCHRONOUS</tt>   
attribute for <font face="sans-serif"> MPI</font> communication (as part of TS 29113),  
otherwise to <tt> .FALSE.</tt>.   
</ul> 
<br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
For an <font face="sans-serif"> MPI</font> implementation that fully supports nonblocking  
calls with the <tt> ASYNCHRONOUS</tt> attribute for choice buffers,  
an existing <font face="sans-serif"> MPI-2.2</font> application may fail to compile even  
if it compiled and executed with expected results with an <font face="sans-serif"> MPI-2.2</font> implementation.  
One reason may be that the application uses ``contiguous'' but not ``simply contiguous''  
<tt> ASYNCHRONOUS</tt> arrays as actual arguments for choice buffers of nonblocking routines,  
e.g., by using subscript triplets with stride one or specifying <tt> (1:n)</tt>  
for a whole dimension instead of using <tt> (:)</tt>. This should be fixed  
to fulfill the Fortran constraints for <tt> ASYNCHRONOUS</tt>   
dummy arguments.  
This is not considered a violation of backward compatibility because  
existing applications can not use the  <tt> ASYNCHRONOUS</tt> attribute   
to protect nonblocking calls.    
Another reason may be that  
the application does not conform either to <font face="sans-serif"> MPI-2.2</font>,   
or to <font face="sans-serif"> MPI-3.0</font>, or to the Fortran standard,  
typically because the program forces the compiler to  
perform copy-in/out for a choice buffer argument in a  
nonblocking <font face="sans-serif"> MPI</font> call.  
This is also not a violation of backward compatibility because  
the application itself is non-conforming.   
See Section <a href="node422.htm#Node422">Problems Due to Data Copying and Sequence Association with Subscript Triplets 
</a> for more details.   
 (<em> End of advice to users.</em>) <br> 
<ul> 
 
<li>A high quality <font face="sans-serif"> MPI</font> implementation may enhance the interface  
by using <tt>TYPE(*), DIMENSION(..)</tt> choice buffer dummy arguments  
instead of using   
non-standardized extensions such as <tt> !$PRAGMA IGNORE_TKR</tt>  
or a set of overloaded functions as described by  
M. Hennecke in [<a href="node522.htm#-Bib28">28</a>], if the compiler  
supports this TS 29113 language feature.  
See Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a>  
for further details.  
 
<li>Set the <tt> LOGICAL</tt> compile-time constant   
<font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> to <tt> .TRUE.</tt>   
if all choice buffer arguments   
in all nonblocking, split collective and persistent communication routines   
are declared with  
<tt>TYPE(*), DIMENSION(..)</tt>, otherwise set it to <tt> .FALSE.</tt>.  
When <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> is defined as <tt> .TRUE.</tt>,   
non-contiguous sub-arrays can be used as buffers  
in nonblocking routines.  
 
<li>Set the <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> compile-time   
constant to <tt> .FALSE.</tt> and  
declare choice buffers with a compiler-dependent mechanism that  
overrides type checking if the underlying Fortran compiler does not  
support the TS 29113 assumed-type and assumed-rank features.  
In this case, the use of non-contiguous sub-arrays  
in nonblocking calls may be disallowed.  
See Section <a href="node413.htm#Node413"><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions 
</a> for details.  
</ul> 
<br> 
An <font face="sans-serif"> MPI</font> implementation may provide other features in the <tt>mpi</tt> module   
that enhance the usability of <font face="sans-serif"> MPI</font> while  
maintaining adherence to the standard. For example, it   
may provide <tt>INTENT</tt> information in these interface blocks.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The appropriate <tt>INTENT</tt> may be different from what is given in the  
<font face="sans-serif"> MPI</font> language-neutral bindings.   
Implementations must choose <tt>INTENT</tt> so that  
the function adheres to the <font face="sans-serif"> MPI</font> standard, e.g., by defining the <tt>INTENT</tt>  
as provided in the <tt>mpi_f08</tt> bindings.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Rationale.</em>  
<P> 
The intent given by the <font face="sans-serif"> MPI</font> generic interface is not precisely  
defined and does not in all cases correspond to the correct Fortran  
<tt>INTENT</tt>. For instance, receiving into a buffer specified by a datatype  
with absolute addresses may require associating <font face="sans-serif">  MPI_BOTTOM</font>  
with a dummy <tt> OUT</tt> argument.  Moreover, ``constants'' such as  
<font face="sans-serif">  MPI_BOTTOM</font> and <font face="sans-serif">  MPI_STATUS_IGNORE</font> are not constants  
as defined by Fortran, but ``special addresses'' used in a nonstandard  
way.  Finally, the <font face="sans-serif"> MPI-1</font> generic intent was changed in several places  
in <font face="sans-serif"> MPI-2</font>.   
For instance, <font face="sans-serif">  MPI_IN_PLACE</font> changes the intent of  
an <tt> OUT</tt> argument to be <tt> INOUT</tt>.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The Fortran 2008 standard illustrates in its Note 5.17 that  
``INTENT(OUT) means that the value of the argument   
after invoking the procedure is entirely the result  
of executing that procedure. If an argument should   
retain its value rather than being redefined, INTENT(INOUT)   
should be used rather than INTENT(OUT), even if there is   
no explicit reference to the value of the dummy argument.  
Furthermore,    
INTENT(INOUT) is not equivalent to omitting the INTENT attribute,  
because INTENT(INOUT) always requires that   
the associated actual argument is definable.''   
Applications that include <tt>mpif.h</tt> may not expect  
that <tt> INTENT(OUT)</tt> is used. In particular, output array  
arguments are expected to keep their content as long as the   
<font face="sans-serif"> MPI</font> routine does not modify them.  
To keep this behavior, it is recommended that implementations   
not use <tt> INTENT(OUT)</tt>  
in the <tt>mpi</tt> module and the <tt>mpif.h</tt> include file,  
even though <tt> INTENT(OUT)</tt> is specified in   
an interface description of the <tt>mpi_f08</tt> module.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node409.htm#Node409"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node411.htm#Node411"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node411.htm#Node411"> Fortran Support Through the <tt>mpif.h</tt> Include File</a>
<b>Previous: </b><a href="node409.htm#Node409"> Fortran Support Through the <tt>mpi_f08</tt> Module</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-CNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Datatypes C Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node470">396. Datatypes C Bindings</span></h2>
<a href="node469.htm#Node469"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node471.htm#Node471"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node471.htm#Node471"> Collective Communication C Bindings</a>
<b>Previous: </b><a href="node469.htm#Node469"> Point-to-Point Communication C Bindings</a>
<p>
 <tt> MPI_Aint MPI_Aint_add(MPI_Aint base, MPI_Aint disp) <br></tt>  
 <tt> MPI_Aint MPI_Aint_diff(MPI_Aint addr1, MPI_Aint addr2) <br></tt>  
 <tt> int MPI_Get_address(const void *location, MPI_Aint *address) <br></tt>  
 <tt> int MPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count) <br></tt>  
 <tt> int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) <br></tt>  
 <tt> int MPI_Pack(const void* inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position) <br></tt>  
 <tt> int MPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size) <br></tt>  
 <tt> int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size) <br></tt>  
 <tt> int MPI_Type_commit(MPI_Datatype *datatype) <br></tt>  
 <tt> int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_darray(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_hindexed(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_hindexed_block(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_struct(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_create_subarray(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_dup(MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_free(MPI_Datatype *datatype) <br></tt>  
 <tt> int MPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) <br></tt>  
 <tt> int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner) <br></tt>  
 <tt> int MPI_Type_get_extent(MPI_Datatype datatype, MPI_Aint *lb, MPI_Aint *extent) <br></tt>  
 <tt> int MPI_Type_get_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) <br></tt>  
 <tt> int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent) <br></tt>  
 <tt> int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent) <br></tt>  
 <tt> int MPI_Type_indexed(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Type_size(MPI_Datatype datatype, int *size) <br></tt>  
 <tt> int MPI_Type_size_x(MPI_Datatype datatype, MPI_Count *size) <br></tt>  
 <tt> int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype) <br></tt>  
 <tt> int MPI_Unpack(const void* inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm) <br></tt>  
 <tt> int MPI_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype) <br></tt>  
<P> 

<P>
<hr>
<a href="node469.htm#Node469"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node468.htm#Node468"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node471.htm#Node471"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node468.htm#Node468"> C Bindings</a>
<b>Next: </b><a href="node471.htm#Node471"> Collective Communication C Bindings</a>
<b>Previous: </b><a href="node469.htm#Node469"> Point-to-Point Communication C Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

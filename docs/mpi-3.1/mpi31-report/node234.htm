<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>The Runtime Environment</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node234">217. The Runtime Environment</span></h2>
<a href="node233.htm#Node233"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node232.htm#Node232"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node235.htm#Node235"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node232.htm#Node232"> The Dynamic Process Model</a>
<b>Next: </b><a href="node235.htm#Node235"> Process Manager Interface</a>
<b>Previous: </b><a href="node233.htm#Node233"> Starting Processes</a>
<p>
The <font face="sans-serif"> MPI_COMM_SPAWN</font> and  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>   
routines provide an interface between <font face="sans-serif"> MPI</font> and  
the <em> runtime environment</em> of an <font face="sans-serif"> MPI</font> application.   
The difficulty is that there is an enormous range of runtime  
environments and application requirements, and <font face="sans-serif"> MPI</font> must not be  
tailored to any particular one.  Examples of such environments are:  
<P> 
<ul> 
 
<li><b> MPP managed by a batch queueing system</b>. Batch queueing   
systems generally allocate resources before an application begins,   
enforce limits on resource use (CPU time, memory use, etc.), and do   
not allow a change in resource allocation after a job begins.  
Moreover, many MPPs have special limitations or extensions, such as a  
limit on the number of processes that may run on one processor, or  
the ability to gang-schedule processes of a parallel application.   
<P> 
 
<li><b> Network of workstations with PVM</b>. PVM (Parallel Virtual  
Machine) allows a user to create a ``virtual machine'' out of   
a network of workstations. An application may extend the virtual   
machine or manage processes (create, kill, redirect output, etc.)  
through the PVM library. Requests to manage the machine or processes  
may be intercepted and handled by an external resource manager.   
 <P> 
 
<li><b> Network of workstations managed by a load balancing system</b>.  
A load balancing system may choose the location of spawned processes  
based on dynamic quantities, such as load average. It may  
transparently migrate processes from one machine to another when a  
resource becomes unavailable.  
<P> 
 
<li><b> Large SMP with Unix</b>. Applications are run directly  
by the user. They are scheduled at a low level by the operating  
system. Processes may have special scheduling characteristics  
(gang-scheduling, processor affinity, deadline scheduling, processor  
locking, etc.) and be subject to OS resource limits (number of  
processes, amount of memory, etc.).  
<P> 
</ul> 
<br> 
<font face="sans-serif"> MPI</font> assumes, implicitly, the existence of an environment in which an  
application runs. It does not provide ``operating system'' services,  
such as a general ability to query what processes are running, to kill  
arbitrary processes, to find out properties of the runtime environment  
(how many processors, how much memory, etc.).   
<P> 
Complex interaction of an  
MPI application with its runtime environment should  
be done through an environment-specific API.  
An example of such an API would be the PVM task and machine management  
routines --- <tt>pvm_addhosts</tt>, <tt>pvm_config</tt>, <tt>pvm_tasks</tt>,  
etc.,  possibly modified to return an <font face="sans-serif"> MPI</font> (group, rank) when possible.   
A Condor or PBS API would be another possibility.   
<P> 
At some low level, obviously, <font face="sans-serif"> MPI</font> must be able to interact with the  
runtime system, but the interaction is not visible at the application  
level and the details of the interaction are not specified by the <font face="sans-serif"> MPI</font>  
standard.  
<P> 
In many cases, it is impossible to keep environment-specific  
information out of the <font face="sans-serif"> MPI</font> interface without seriously compromising  
<font face="sans-serif"> MPI</font> functionality. To permit applications to take advantage of  
environment-specific functionality, many <font face="sans-serif"> MPI</font> routines take  
an <font face="sans-serif"> info</font> argument that allows an application to   
specify environment-specific information. There is a tradeoff   
between functionality and portability: applications that   
make use of <font face="sans-serif"> info</font> are not portable.  
<P> 
<font face="sans-serif"> MPI</font> does not require the existence of an underlying ``virtual machine''   
model, in which there is a consistent global view of an <font face="sans-serif"> MPI</font>  
application and an implicit ``operating system'' managing resources  
and processes. For instance, processes spawned by one task may not be  
visible to another; additional hosts added to the runtime environment  
by one process may not be visible in another process; tasks spawned by   
different processes may not be automatically distributed over available  
resources.   
<P> 
Interaction between <font face="sans-serif"> MPI</font> and the runtime environment is limited to the  
following areas:  
<P> 
<ul> 
 
<li>A process may start new processes with <font face="sans-serif"> MPI_COMM_SPAWN</font> and  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>.  
<P> 
 
<li>When a process spawns a child process, it may optionally use an  
<font face="sans-serif"> info</font> argument to tell the runtime environment where or how to   
start the process. This extra information may be opaque to <font face="sans-serif"> MPI</font>.  
<P> 
 
<li>An attribute <font face="sans-serif">  MPI_UNIVERSE_SIZE</font>   
(See Section <a href="node253.htm#Node253">Universe Size 
</a>)  
 on <font face="sans-serif">  MPI_COMM_WORLD</font>  
  tells a program how ``large'' the initial runtime environment  
  is, namely how many processes can  
  usefully be started in all.  One can subtract the size of  
  <font face="sans-serif">  MPI_COMM_WORLD</font> from this value to find out how many processes  
  might usefully be started in addition to those already running.  
<P> 
</ul> 
<br> 

<P>
<hr>
<a href="node233.htm#Node233"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node232.htm#Node232"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node235.htm#Node235"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node232.htm#Node232"> The Dynamic Process Model</a>
<b>Next: </b><a href="node235.htm#Node235"> Process Manager Interface</a>
<b>Previous: </b><a href="node233.htm#Node233"> Starting Processes</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

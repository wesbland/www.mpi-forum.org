<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Decoding a Datatype</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node90">85. Decoding a Datatype</span></h2>
<a href="node89.htm#Node89"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node91.htm#Node91"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node91.htm#Node91"> Examples</a>
<b>Previous: </b><a href="node89.htm#Node89"> Correct Use of Addresses</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font>   
datatype objects   
allow users to specify  
an arbitrary layout of data in memory.  
There are several cases  
where accessing the layout information in  
opaque datatype objects would be useful.   
The opaque datatype  
object has found a number of uses outside <font face="sans-serif"> MPI</font>.  Furthermore, a  
number of tools wish to display internal information about a datatype.  
To achieve this, datatype decoding functions are provided.  
The two functions in this section are used together to decode datatypes  
to recreate the calling sequence used in their initial definition.  
These can be used to allow a user to determine the type map and type  
signature of a datatype.  
<P> 
<P><img width=402 height=209 src="img92.gif" alt="Image file"><P>
 <tt> int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner) <br></tt>  
<P> 
 <tt> MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_datatypes, combiner, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(OUT) :: num_integers, num_addresses, num_datatypes, combiner <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_GET_ENVELOPE(DATATYPE, NUM_INTEGERS, NUM_ADDRESSES, NUM_DATATYPES, COMBINER, IERROR)<br> INTEGER DATATYPE, NUM_INTEGERS, NUM_ADDRESSES, NUM_DATATYPES, COMBINER, IERROR <br></tt>  
<P> 
  
<P> 
For the given <font face="sans-serif"> datatype</font>,  
<font face="sans-serif"> MPI_TYPE_GET_ENVELOPE</font> returns information on the  
number and type of input arguments used in the call that created the  
<font face="sans-serif"> datatype</font>.  The number-of-arguments values returned can be  
used to provide sufficiently large arrays in the decoding routine  
<font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font>.  This call and the meaning of the  
returned values is described below.  The <font face="sans-serif"> combiner</font> reflects  
the <font face="sans-serif"> MPI</font> datatype constructor call that was used in creating  
<font face="sans-serif"> datatype</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
By requiring that the <font face="sans-serif"> combiner</font> reflect the constructor used  
in the creation  
of the <font face="sans-serif"> datatype</font>, the decoded information can be used  
to effectively recreate the calling sequence used in the original  
creation.  
This is the most useful information and    
was  
felt to be reasonable even though it constrains implementations to  
remember the original constructor sequence even if the internal  
representation is different.  
<P> 
The decoded information keeps track of datatype duplications.  This is  
important as one needs to distinguish between a predefined datatype  
and a dup of a predefined datatype.  The former is a constant object  
that cannot be freed, while the latter is a derived datatype that can  
be freed.  
 (<em> End of rationale.</em>) <br> 
The list in Table <a href="node90.htm#Table4">4 
</a> has the values that can be returned in  
<font face="sans-serif"> combiner</font> on the left and the call associated with them on the  
right.  
<P> 
<div style="text-align:center">   
<TABLE><TR><TD ALIGN="LEFT"><font face="sans-serif">  MPI_COMBINER_NAMED</font></TD><TD ALIGN="LEFT"> a named predefined datatype </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_DUP</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_DUP</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_CONTIGUOUS</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CONTIGUOUS</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_VECTOR</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_VECTOR</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_HVECTOR</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_HVECTOR</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_INDEXED</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_INDEXED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_HINDEXED</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_HINDEXED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_INDEXED_BLOCK</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_INDEXED_BLOCK</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_HINDEXED_BLOCK</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_HINDEXED_BLOCK</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_STRUCT</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_STRUCT</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_SUBARRAY</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_SUBARRAY</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_DARRAY</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_F90_REAL</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_F90_REAL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_F90_COMPLEX</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_F90_COMPLEX</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_F90_INTEGER</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_F90_INTEGER</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COMBINER_RESIZED</font></TD><TD ALIGN="LEFT"> <font face="sans-serif"> MPI_TYPE_CREATE_RESIZED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD></TR></TABLE> 
</div>   
<br> 
<b>Table 4: </b><span id="Table4"><font face="sans-serif"> combiner</font> values returned from <font face="sans-serif"> MPI_TYPE_GET_ENVELOPE</font>
</span><P> 
   
  
If <font face="sans-serif"> combiner</font> is <font face="sans-serif">  MPI_COMBINER_NAMED</font> then <font face="sans-serif"> datatype</font> is a  
named predefined datatype.   
<P> 
The actual arguments used in the creation call for a <font face="sans-serif"> datatype</font>  
can be obtained using <font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font>.  
<P> 
<P><img width=401 height=326 src="img93.gif" alt="Image file"><P>
 <tt> int MPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) <br></tt>  
<P> 
 <tt> MPI_Type_get_contents(datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: max_integers, max_addresses, max_datatypes <br>INTEGER, INTENT(OUT) :: array_of_integers(max_integers) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses) <br>TYPE(MPI_Datatype), INTENT(OUT) :: array_of_datatypes(max_datatypes) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_GET_CONTENTS(DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES, ARRAY_OF_INTEGERS, ARRAY_OF_ADDRESSES, ARRAY_OF_DATATYPES, IERROR)<br> INTEGER DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES, ARRAY_OF_INTEGERS(*), ARRAY_OF_DATATYPES(*), IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_ADDRESSES(*) <br></tt>  
<P> 
  
<P> 
<font face="sans-serif"> datatype</font> must be a predefined unnamed or a derived datatype;  
the call is erroneous if <font face="sans-serif"> datatype</font> is a predefined named  
datatype.  
<P> 
The values given for <font face="sans-serif"> max_integers</font>, <font face="sans-serif"> max_addresses</font>, and  
<font face="sans-serif"> max_datatypes</font> must be at least as large as the value  
returned in <font face="sans-serif"> num_integers</font>, <font face="sans-serif"> num_addresses</font>, and  
<font face="sans-serif"> num_datatypes</font>, respectively, in the call <font face="sans-serif"> MPI_TYPE_GET_ENVELOPE</font>  
for the same <font face="sans-serif"> datatype</font> argument.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The arguments <font face="sans-serif"> max_integers</font>, <font face="sans-serif"> max_addresses</font>, and  
<font face="sans-serif"> max_datatypes</font> allow for error checking in the   
call.  
 (<em> End of rationale.</em>) <br> 
The datatypes returned in <font face="sans-serif"> array_of_datatypes</font> are handles to  
datatype objects that are equivalent to the datatypes used in the  
original construction call.  If these were derived datatypes, then  
the returned datatypes are new datatype objects, and the  
user is responsible for freeing these datatypes with  
<font face="sans-serif"> MPI_TYPE_FREE</font>.    
If these were predefined datatypes, then  
the returned datatype is equal to that (constant) predefined datatype  
and cannot be freed.  
<P> 
The committed state of returned derived datatypes is undefined,   
i.e., the datatypes may or  
may not be committed.  Furthermore, the content of attributes of  
returned datatypes is undefined.  
<P> 
Note that <font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font> can be invoked with a   
<font face="sans-serif"> datatype</font> argument that was constructed using  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_REAL</font>,  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_INTEGER</font>, or  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_COMPLEX</font>  (an unnamed predefined datatype).  
In such a case, an empty <font face="sans-serif"> array_of_datatypes</font> is returned.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The definition of datatype equivalence implies that equivalent  
predefined datatypes are equal.  
By requiring the same handle for named predefined datatypes, it is  
possible to use the <tt>==</tt> or <tt>.EQ.</tt> comparison operator to determine the  
datatype involved.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The datatypes returned in <font face="sans-serif"> array_of_datatypes</font> must appear to the  
user as if each is an equivalent copy of the datatype used in the type  
constructor call.  
Whether this is done by  
creating a new datatype or via another mechanism such as a reference  
count mechanism is up to the implementation as long as the semantics  
are preserved.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Rationale.</em>  
<P> 
The committed state and attributes of the returned datatype is  
deliberately left vague.  The datatype used in the original  
construction may have been modified since its use in the constructor  
call.  Attributes can be added, removed, or modified as well as having  
the datatype committed.  The semantics given allow for a  
reference count implementation without having to track these changes.  
 (<em> End of rationale.</em>) <br> 
In the  
deprecated  
 datatype constructor calls, the address arguments in Fortran are of  
type <tt> INTEGER</tt>.  In the   
preferred  
calls, the address arguments are of  
type <tt> INTEGER(KIND=MPI_ADDRESS_KIND)</tt>.  The call  
<font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font> returns all addresses in an argument  
of type <tt> INTEGER(KIND=MPI_ADDRESS_KIND)</tt>.  This is true even if the  
deprecated  
 calls were used.  Thus, the location of values returned can  
be thought of as being returned by the C bindings.  It can also be  
determined by examining the  
preferred  
 calls for datatype constructors  
for the   
deprecated   
calls that involve addresses.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
By having all address arguments returned in the  
<font face="sans-serif"> array_of_addresses</font> argument, the result from a C and Fortran  
decoding of a <font face="sans-serif"> datatype</font> gives the result in the same   
argument.  It is assumed that an integer  
of type <tt> INTEGER(KIND=MPI_ADDRESS_KIND)</tt> will be at least as large as   
the <tt> INTEGER</tt> argument used in datatype construction with the old <font face="sans-serif"> MPI-1</font>  
calls so no loss of information will occur.  
 (<em> End of rationale.</em>) <br> 
The following defines what values are placed in each entry of the  
returned arrays depending on the datatype constructor used for  
<font face="sans-serif"> datatype</font>.  It also specifies the size of the arrays needed  
which is the values returned by <font face="sans-serif"> MPI_TYPE_GET_ENVELOPE</font>.  
In Fortran, the following calls were made:  
<P> 
<br> 
<pre><tt>      PARAMETER (LARGE = 1000) 
      INTEGER TYPE, NI, NA, ND, COMBINER, I(LARGE), D(LARGE), IERROR 
      INTEGER (KIND=MPI_ADDRESS_KIND) A(LARGE) 
!     CONSTRUCT DATATYPE TYPE (NOT SHOWN) 
      CALL MPI_TYPE_GET_ENVELOPE(TYPE, NI, NA, ND, COMBINER, IERROR) 
      IF ((NI .GT. LARGE) .OR. (NA .GT. LARGE) .OR. (ND .GT. LARGE)) THEN 
        WRITE (*, *) "NI, NA, OR ND = ", NI, NA, ND, &amp; 
        " RETURNED BY MPI_TYPE_GET_ENVELOPE IS LARGER THAN LARGE = ", LARGE 
        CALL MPI_ABORT(MPI_COMM_WORLD, 99, IERROR) 
      ENDIF 
      CALL MPI_TYPE_GET_CONTENTS(TYPE, NI, NA, ND, I, A, D, IERROR) 
</tt></pre> 
  
or in C the analogous calls of:  
<P> 
<br> 
<pre><tt>#define LARGE 1000 
int ni, na, nd, combiner, i[LARGE]; 
MPI_Aint a[LARGE]; 
MPI_Datatype type, d[LARGE]; 
/* construct datatype type (not shown) */ 
MPI_Type_get_envelope(type, &amp;ni, &amp;na, &amp;nd, &amp;combiner); 
if ((ni &gt; LARGE) || (na &gt; LARGE) || (nd &gt; LARGE)) { 
    fprintf(stderr, "ni, na, or nd = %d %d %d returned by ", ni, na, nd); 
    fprintf(stderr, "MPI_Type_get_envelope is larger than LARGE = %d\n",  
            LARGE); 
    MPI_Abort(MPI_COMM_WORLD, 99); 
}; 
MPI_Type_get_contents(type, ni, na, nd, i, a, d); 
</tt></pre> 
In the descriptions that follow, the lower case name   
of arguments  
is used.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_NAMED</font> then  
it is erroneous to call <font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font>.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_DUP</font> then   
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">  C</TD><TD ALIGN="CENTER">    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
oldtype</TD><TD ALIGN="CENTER">               d[0]</TD><TD ALIGN="CENTER">          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 0, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_CONTIGUOUS</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">  C</TD><TD ALIGN="CENTER">    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">                 i[0]</TD><TD ALIGN="CENTER">          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">               d[0]</TD><TD ALIGN="CENTER">          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 1, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_VECTOR</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">  C</TD><TD ALIGN="CENTER">    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">                 i[0]</TD><TD ALIGN="CENTER">          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
blocklength</TD><TD ALIGN="CENTER">           i[1]</TD><TD ALIGN="CENTER">          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
stride</TD><TD ALIGN="CENTER">                i[2]</TD><TD ALIGN="CENTER">          I(3)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">               d[0]</TD><TD ALIGN="CENTER">          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 3, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_HVECTOR</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">  C</TD><TD ALIGN="CENTER">    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">                 i[0]</TD><TD ALIGN="CENTER">          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
blocklength</TD><TD ALIGN="CENTER">           i[1]</TD><TD ALIGN="CENTER">          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
stride</TD><TD ALIGN="CENTER">                a[0]</TD><TD ALIGN="CENTER">          A(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">               d[0]</TD><TD ALIGN="CENTER">          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 2, na = 1, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_INDEXED</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">       i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_blocklengths</TD><TD ALIGN="CENTER">       i[1] to i[i[0]]</TD><TD ALIGN="CENTER">               I(2) to I(I(1)+1)               </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_displacements</TD><TD ALIGN="CENTER">      i[i[0]+1] to i[2*i[0]]</TD><TD ALIGN="CENTER">        I(I(1)+2) to I(2*I(1)+1)        </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 2*count+1, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_HINDEXED</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">       i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_blocklengths</TD><TD ALIGN="CENTER">       i[1] to i[i[0]]</TD><TD ALIGN="CENTER">               I(2) to I(I(1)+1)               </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_displacements</TD><TD ALIGN="CENTER">      a[0] to a[i[0]-1]</TD><TD ALIGN="CENTER">             A(1) to A(I(1))                 </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = count+1, na = count, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_INDEXED_BLOCK</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">       i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
blocklength</TD><TD ALIGN="CENTER">       i[1]</TD><TD ALIGN="CENTER">                          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_displacements</TD><TD ALIGN="CENTER">      i[2] to i[i[0]+1]</TD><TD ALIGN="CENTER">             I(3) to I(I(1)+2)    </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = count+2, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_HINDEXED_BLOCK</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">       i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
blocklength</TD><TD ALIGN="CENTER">       i[1]</TD><TD ALIGN="CENTER">                          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_displacements</TD><TD ALIGN="CENTER">      a[0] to a[i[0]-1]</TD><TD ALIGN="CENTER">             A(1) to A(I(1))                 </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 2, na = count, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_STRUCT</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
count</TD><TD ALIGN="CENTER">                         i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_blocklengths</TD><TD ALIGN="CENTER">       i[1] to i[i[0]]</TD><TD ALIGN="CENTER">               I(2) to I(I(1)+1)               </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_displacements</TD><TD ALIGN="CENTER">      a[0] to a[i[0]-1]</TD><TD ALIGN="CENTER">             A(1) to A(I(1))                 </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_types</TD><TD ALIGN="CENTER">              d[0] to d[i[0]-1]</TD><TD ALIGN="CENTER">             D(1) to D(I(1))                 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = count+1, na = count, nd = count.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_SUBARRAY</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
ndims</TD><TD ALIGN="CENTER">                         i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_sizes</TD><TD ALIGN="CENTER">              i[1] to i[i[0]]</TD><TD ALIGN="CENTER">               I(2) to I(I(1)+1)               </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_subsizes</TD><TD ALIGN="CENTER">           i[i[0]+1] to i[2*i[0]]</TD><TD ALIGN="CENTER">        I(I(1)+2) to I(2*I(1)+1)        </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_starts</TD><TD ALIGN="CENTER">             i[2*i[0]+1] to i[3*i[0]]</TD><TD ALIGN="CENTER">      I(2*I(1)+2) to I(3*I(1)+1)      </TD></TR> 
<TR><TD ALIGN="LEFT">  
order</TD><TD ALIGN="CENTER">                         i[3*i[0]+1]</TD><TD ALIGN="CENTER">                   I(3*I(1)+2]                     </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 3*ndims+2, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_DARRAY</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
size</TD><TD ALIGN="CENTER">                          i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
rank</TD><TD ALIGN="CENTER">                          i[1]</TD><TD ALIGN="CENTER">                          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
ndims</TD><TD ALIGN="CENTER">                         i[2]</TD><TD ALIGN="CENTER">                          I(3)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_gsizes</TD><TD ALIGN="CENTER">             i[3] to i[i[2]+2]</TD><TD ALIGN="CENTER">             I(4) to I(I(3)+3)               </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_distribs</TD><TD ALIGN="CENTER">           i[i[2]+3] to i[2*i[2]+2]</TD><TD ALIGN="CENTER">      I(I(3)+4) to I(2*I(3)+3)        </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_dargs</TD><TD ALIGN="CENTER">              i[2*i[2]+3] to i[3*i[2]+2]</TD><TD ALIGN="CENTER">    I(2*I(3)+4) to I(3*I(3)+3)      </TD></TR> 
<TR><TD ALIGN="LEFT">  
array_of_psizes</TD><TD ALIGN="CENTER">             i[3*i[2]+3] to i[4*i[2]+2]</TD><TD ALIGN="CENTER">    I(3*I(3)+4) to I(4*I(3)+3)      </TD></TR> 
<TR><TD ALIGN="LEFT">  
order</TD><TD ALIGN="CENTER">                         i[4*i[2]+3]</TD><TD ALIGN="CENTER">                   I(4*I(3)+4)                     </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 4*ndims+4, na = 0, nd = 1.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_F90_REAL</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
p</TD><TD ALIGN="CENTER">                             i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
r</TD><TD ALIGN="CENTER">                             i[1]</TD><TD ALIGN="CENTER">                          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 2, na = 0, nd = 0.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_F90_COMPLEX</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
p</TD><TD ALIGN="CENTER">                             i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
r</TD><TD ALIGN="CENTER">                             i[1]</TD><TD ALIGN="CENTER">                          I(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 2, na = 0, nd = 0.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_F90_INTEGER</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
r</TD><TD ALIGN="CENTER">                             i[0]</TD><TD ALIGN="CENTER">                          I(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 1, na = 0, nd = 0.  
<P> 
If combiner is <font face="sans-serif">  MPI_COMBINER_RESIZED</font> then  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
Constructor argument</TD><TD ALIGN="CENTER">          C</TD><TD ALIGN="CENTER">                    Fortran location                </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
lb</TD><TD ALIGN="CENTER">                            a[0]</TD><TD ALIGN="CENTER">                          A(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
extent</TD><TD ALIGN="CENTER">                        a[1]</TD><TD ALIGN="CENTER">                          A(2)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
oldtype</TD><TD ALIGN="CENTER">                       d[0]</TD><TD ALIGN="CENTER">                          D(1)                            </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br>  
and ni = 0, na = 2, nd = 1.  
<P> 

<P>
<hr>
<a href="node89.htm#Node89"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node91.htm#Node91"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node91.htm#Node91"> Examples</a>
<b>Previous: </b><a href="node89.htm#Node89"> Correct Use of Addresses</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-topol/topol.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Introduction</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node187">175. Introduction</span></h1>
<a href="node186.htm#Node186"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node188.htm#Node188"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node188.htm#Node188"> Virtual Topologies</a>
<b>Previous: </b><a href="node186.htm#Node186"> Process Topologies</a>
<p>
This chapter discusses the <font face="sans-serif"> MPI</font> topology mechanism.  A topology is an extra,  
optional attribute that one can give to an intra-communicator; topologies  
cannot be added to inter-communicators.  A topology can provide a convenient  
naming mechanism for the processes of a group (within a communicator), and  
additionally, may assist the runtime system in mapping the processes onto  
hardware.  
<P> 
As stated in Chapter <a href="node141.htm#Node141">Groups, Contexts, Communicators, and Caching 
</a>,  
a process group in <font face="sans-serif"> MPI</font> is a collection of <font face="sans-serif"> n</font> processes. Each process in  
the group is assigned a rank between <font face="sans-serif"> 0</font> and <font face="sans-serif"> n-1</font>. In many parallel  
applications a linear ranking of processes does not adequately reflect the logical  
communication pattern of the processes (which is usually determined by the  
underlying problem geometry and the numerical algorithm used).  Often the  
processes are arranged in topological patterns such as two- or  
three-dimensional grids. More generally, the logical process arrangement is  
described by a graph.  In this chapter we will refer to this logical process  
arrangement as the ``virtual topology.''  
<P> 
A clear distinction must be made between the virtual process topology and the  
topology of the underlying, physical hardware.  The virtual topology can be  
exploited by the system in the assignment of processes to physical processors,  
if this helps to improve the communication performance on a given machine. How  
this mapping is done, however, is outside the scope of <font face="sans-serif"> MPI</font>.  The description  
of the virtual topology, on the other hand, depends only on the application,  
and is machine-independent.   
The functions that are described in this chapter  
deal with machine-independent   
mapping and communication on virtual process topologies.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Though physical mapping is not discussed, the  
existence of the virtual topology information may be used as advice by  
the runtime system.  
There are well-known techniques for mapping grid/torus structures to  
hardware topologies such as hypercubes or grids. For more  
complicated graph structures good heuristics often yield nearly optimal  
results [<a href="node522.htm#-Bib44">44</a>]. On the other hand,  
if there is no way for the user to specify the logical process  
arrangement as a ``virtual topology,'' a random mapping is most  
likely to result. On some machines, this will lead to  
unnecessary contention in the interconnection network.  
Some details about predicted and measured  
performance improvements that result from good process-to-processor  
mapping on modern wormhole-routing architectures can be found in  
[<a href="node522.htm#-Bib11">11</a>,<a href="node522.htm#-Bib12">12</a>].  
<P> 
Besides possible performance benefits, the virtual topology can  
function as a convenient, process-naming structure, with   
significant  
benefits for program readability and notational power in  
message-passing programming.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node186.htm#Node186"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node188.htm#Node188"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node188.htm#Node188"> Virtual Topologies</a>
<b>Previous: </b><a href="node186.htm#Node186"> Process Topologies</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

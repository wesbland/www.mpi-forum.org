<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Example #4</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node163">156. Example #4</span></h2>
<a href="node162.htm#Node162"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node159.htm#Node159"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node164.htm#Node164"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node159.htm#Node159"> Motivating Examples</a>
<b>Next: </b><a href="node164.htm#Node164"> Library Example #1</a>
<b>Previous: </b><a href="node162.htm#Node162"> (Approximate) Current Practice #3</a>
<p>
  
The following example is meant to illustrate ``safety'' between  
point-to-point and collective communication.  <font face="sans-serif"> MPI</font> guarantees that a single  
communicator can do safe point-to-point and collective communication.  
<br> 
<pre><tt>   #define TAG_ARBITRARY 12345 
   #define SOME_COUNT       50 
 
   int main(int argc, char *argv[]) 
   { 
     int me; 
     MPI_Request request[2]; 
     MPI_Status status[2]; 
     MPI_Group group_world, subgroup; 
     int ranks[] = {2, 4, 6, 8}; 
     MPI_Comm the_comm; 
     ... 
     MPI_Init(&amp;argc, &amp;argv); 
     MPI_Comm_group(MPI_COMM_WORLD, &amp;group_world); 
 
     MPI_Group_incl(group_world, 4, ranks, &amp;subgroup); /* local */ 
     MPI_Group_rank(subgroup, &amp;me);     /* local */ 
 
     MPI_Comm_create(MPI_COMM_WORLD, subgroup, &amp;the_comm); 
 
     if(me != MPI_UNDEFINED) 
     { 
         MPI_Irecv(buff1, count, MPI_DOUBLE, MPI_ANY_SOURCE, TAG_ARBITRARY, 
                           the_comm, request); 
         MPI_Isend(buff2, count, MPI_DOUBLE, (me+1)%4, TAG_ARBITRARY, 
                           the_comm, request+1); 
         for(i = 0; i &lt; SOME_COUNT; i++) 
           MPI_Reduce(..., the_comm); 
         MPI_Waitall(2, request, status); 
     
         MPI_Comm_free(&amp;the_comm); 
     } 
  
     MPI_Group_free(&amp;group_world); 
     MPI_Group_free(&amp;subgroup); 
     MPI_Finalize(); 
     return 0; 
   } 
</tt></pre> 

<P>
<hr>
<a href="node162.htm#Node162"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node159.htm#Node159"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node164.htm#Node164"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node159.htm#Node159"> Motivating Examples</a>
<b>Next: </b><a href="node164.htm#Node164"> Library Example #1</a>
<b>Previous: </b><a href="node162.htm#Node162"> (Approximate) Current Practice #3</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

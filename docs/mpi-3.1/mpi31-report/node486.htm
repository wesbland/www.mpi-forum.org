<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Datatypes Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node486">412. Datatypes Fortran 2008 Bindings</span></h2>
<a href="node485.htm#Node485"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node487.htm#Node487"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node487.htm#Node487"> Collective Communication Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node485.htm#Node485"> Point-to-Point Communication Fortran 2008 Bindings</a>
<p>
 <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_Aint_add(base, disp) <br> INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: base, disp <br></tt>  
 <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_Aint_diff(addr1, addr2) <br> INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: addr1, addr2 <br></tt>  
 <tt> MPI_Get_address(location, address, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: location <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: address <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Get_elements(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: status <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(OUT) :: count <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Get_elements_x(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: status <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER, INTENT(IN) :: incount, outsize <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(INOUT) :: position <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: datarep <br>TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER, INTENT(IN) :: incount <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: outsize <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: incount <br>CHARACTER(LEN=*), INTENT(IN) :: datarep <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Pack_size(incount, datatype, comm, size, ierror) <br> INTEGER, INTENT(IN) :: incount <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_commit(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_contiguous(count, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_darray(size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: size, rank, ndims, array_of_gsizes(ndims),<br>    array_of_distribs(ndims), array_of_dargs(ndims),<br>    array_of_psizes(ndims), order <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_hindexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, array_of_blocklengths(count) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <br>    array_of_displacements(count) <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_hindexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, blocklength <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <br>    array_of_displacements(count) <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_hvector(count, blocklength, stride, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, blocklength <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: stride <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_indexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, blocklength,<br>    array_of_displacements(count) <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_resized(oldtype, lb, extent, newtype, ierror) <br> INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: lb, extent <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_struct(count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, array_of_blocklengths(count) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <br>    array_of_displacements(count) <br>TYPE(MPI_Datatype), INTENT(IN) :: array_of_types(count) <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_subarray(ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: ndims, array_of_sizes(ndims), <br>    array_of_subsizes(ndims), array_of_starts(ndims), order <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_dup(oldtype, newtype, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_free(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_contents(datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: max_integers, max_addresses, max_datatypes <br>INTEGER, INTENT(OUT) :: array_of_integers(max_integers) <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses) <br>TYPE(MPI_Datatype), INTENT(OUT) :: array_of_datatypes(max_datatypes) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_datatypes, combiner, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(OUT) :: num_integers, num_addresses, num_datatypes, combiner <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_extent(datatype, lb, extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: lb, extent <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_extent_x(datatype, lb, extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: lb, extent <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_true_extent(datatype, true_lb, true_extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: true_lb, true_extent <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_true_extent_x(datatype, true_lb, true_extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_lb, true_extent <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_indexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, array_of_blocklengths(count),<br>    array_of_displacements(count) <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_size(datatype, size, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_size_x(datatype, size, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_vector(count, blocklength, stride, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: count, blocklength, stride <br>TYPE(MPI_Datatype), INTENT(IN) :: oldtype <br>TYPE(MPI_Datatype), INTENT(OUT) :: newtype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Unpack(inbuf, insize, position, outbuf, outcount, datatype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER, INTENT(IN) :: insize, outcount <br>INTEGER, INTENT(INOUT) :: position <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: datarep <br>TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: insize <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position <br>INTEGER, INTENT(IN) :: outcount <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
<P> 

<P>
<hr>
<a href="node485.htm#Node485"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node487.htm#Node487"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node487.htm#Node487"> Collective Communication Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node485.htm#Node485"> Point-to-Point Communication Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

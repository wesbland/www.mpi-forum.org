<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Definitions</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node306">281. Definitions</span></h2>
<a href="node305.htm#Node305"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node305.htm#Node305"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node307.htm#Node307"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node305.htm#Node305"> Introduction</a>
<b>Next: </b><a href="node307.htm#Node307"> File Manipulation</a>
<b>Previous: </b><a href="node305.htm#Node305"> Introduction</a>
<p>
  
<dl> 
 
<dt> 
<b> file</b><dd> 
  
An <font face="sans-serif"> MPI</font> file is an ordered collection of typed data items.  
<font face="sans-serif"> MPI</font> supports random or sequential access to any integral set of these items.  
A file is opened collectively by a group of processes.  
All collective I/O calls on a file are collective over this group.  
<P> 
 
<dt> 
<b> displacement</b><dd> 
  
A file <em> displacement</em> is an absolute byte position  
relative to the beginning of a file.  
The displacement defines the location where a <em> view</em> begins.  
Note that a ``file displacement'' is distinct from a ``typemap displacement.''  
<P> 
 
<dt> 
<b> etype</b><dd> 
  
An <em> etype</em> (<em> elementary</em> datatype)  
is the unit of data access and positioning.  
It can be any <font face="sans-serif"> MPI</font> predefined or derived datatype.  
Derived etypes can be constructed  
using any of the <font face="sans-serif"> MPI</font> datatype constructor routines,  
provided all resulting typemap displacements are non-negative  
and monotonically nondecreasing.  
Data access is performed in etype units,  
reading or writing whole data items of type etype.  
Offsets are expressed as a count of etypes;  
file pointers point to the beginning of etypes.  
Depending on context,  
the term ``etype'' is used to describe one of three aspects  
of an elementary datatype:  
a particular <font face="sans-serif"> MPI</font> type,  
a data item of that type,  
or the extent of that type.  
<P> 
 
<dt> 
<b> filetype</b><dd> 
  
A <em> filetype</em> is the basis for partitioning a file among processes  
and defines a template for accessing the file.  
A filetype is either a single etype or a derived <font face="sans-serif"> MPI</font> datatype  
constructed from multiple instances of the same etype.  
In addition,  
the extent of any hole in the filetype  
must be a multiple of the etype's extent.  
The displacements in the typemap of the filetype are not required to be distinct,  
but they must be non-negative and monotonically nondecreasing.  
<P> 
 
<dt> 
<b> view</b><dd> 
  
A <em> view</em> defines the current set of data visible  
and accessible from an open file as an ordered set of etypes.  
Each process has its own view of the file,  
defined by three quantities:  
a displacement, an etype, and a filetype.  
The pattern described by a filetype is repeated,  
beginning at the displacement, to define the view.  
The pattern of repetition is defined to be the same pattern  
that <font face="sans-serif"> MPI_TYPE_CONTIGUOUS</font> would produce if it were passed  
the filetype and an arbitrarily large count.  
Figure <a href="node306.htm#Figure28">28 
</a> shows how the tiling works; note   
that the filetype in this example must have explicit   
lower and upper bounds set in order for the initial and final holes to be  
repeated in the view.  
Views can be changed by the user during program execution.  
The default view is a linear byte stream  
(displacement is zero, etype and filetype equal to <font face="sans-serif"> MPI_BYTE</font>).  
<P> 
  <div style=\"text-align:center\"><P><img width=600 height=202 src="io-filetype.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 28: </b><span id="Figure28">Etypes and filetypes</span><P> 
  
    
A group of processes can use complementary views to  
achieve a global data distribution such as a scatter/gather pattern  
(see Figure <a href="node306.htm#Figure29">29 
</a>).  
<P> 
  <div style=\"text-align:center\"><P><img width=598 height=241 src="io-comp-filetypes.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 29: </b><span id="Figure29">Partitioning a file among parallel processes</span><P> 
  
    
 
<dt> 
<b> offset</b><dd> 
  
An <em> offset</em> is a position  
in the file  
relative to the current view,  
expressed as a count of etypes.  
Holes in the view's filetype are skipped when calculating this position.  
Offset 0 is the location of the first etype visible in the view  
(after skipping the displacement and any initial holes in the view).  
For example, an offset of 2 for process 1  
in Figure <a href="node306.htm#Figure29">29 
</a> is the position  
of the eighth etype in the file after the displacement.  
An ``explicit offset'' is an offset that is used as an argument  
in explicit data access routines.  
<P> 
 
<dt> 
<b> file size and <b> end of file</b></b><dd> 
  
The <em> size</em> of an <font face="sans-serif"> MPI</font> file is measured in bytes from the   
beginning of the file.  A newly created file has a size of zero   
bytes.  Using the size as an absolute displacement gives   
the position of the byte immediately following the last byte in   
the file.  For any given view, the <em> end of file</em> is the   
offset of the first etype accessible in the current view starting  
after the last byte in the file.  
<P> 
 
<dt> 
<b> file pointer</b><dd> 
  
A <em> file pointer</em> is an implicit offset maintained by <font face="sans-serif"> MPI</font>.  
``Individual file pointers'' are file pointers that are local to  
each process that opened the file.  
A ``shared file pointer'' is a file pointer that is shared by  
the group of processes that opened the file.  
<P> 
 
<dt> 
<b> file handle</b><dd> 
  
A <em> file handle</em> is an opaque object created by <font face="sans-serif"> MPI_FILE_OPEN</font>  
and freed by <font face="sans-serif"> MPI_FILE_CLOSE</font>.  
All operations on an open file  
reference the file through the file handle.  
<P> 
</dl> 
<br> 

<P>
<hr>
<a href="node305.htm#Node305"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node305.htm#Node305"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node307.htm#Node307"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node305.htm#Node305"> Introduction</a>
<b>Next: </b><a href="node307.htm#Node307"> File Manipulation</a>
<b>Previous: </b><a href="node305.htm#Node305"> Introduction</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

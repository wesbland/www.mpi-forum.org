<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node488">414. Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</span></h2>
<a href="node487.htm#Node487"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node489.htm#Node489"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node489.htm#Node489"> Process Topologies Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node487.htm#Node487"> Collective Communication Fortran 2008 Bindings</a>
<p>
  
 <tt> MPI_COMM_DUP_FN(oldcomm, comm_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Comm) :: oldcomm <br>INTEGER :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_COMM_NULL_COPY_FN(oldcomm, comm_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Comm) :: oldcomm <br>INTEGER :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_COMM_NULL_DELETE_FN(comm, comm_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Comm) :: comm <br>INTEGER :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val, extra_state <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_Comm_compare(comm1, comm2, result, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm1, comm2 <br>INTEGER, INTENT(OUT) :: result <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_create(comm, group, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Group), INTENT(IN) :: group <br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_create_group(comm, group, tag, newcomm, ierror)<br> TYPE(MPI_Comm), INTENT(IN) :: comm<br>TYPE(MPI_Group), INTENT(IN) :: group<br>INTEGER, INTENT(IN) :: tag<br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm<br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_create_keyval(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Comm_copy_attr_function) :: comm_copy_attr_fn <br>PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn <br>INTEGER, INTENT(OUT) :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_delete_attr(comm, comm_keyval, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: comm_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_dup(comm, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_dup_with_info(comm, info, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Info), INTENT(IN) :: info<br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm<br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_free(comm, ierror) <br> TYPE(MPI_Comm), INTENT(INOUT) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_free_keyval(comm_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: comm_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_get_attr(comm, comm_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_get_info(comm, info_used, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm<br>TYPE(MPI_Info), INTENT(OUT) :: info_used<br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_get_name(comm, comm_name, resultlen, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: comm_name <br>INTEGER, INTENT(OUT) :: resultlen <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_group(comm, group, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Group), INTENT(OUT) :: group <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_idup(comm, newcomm, request, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: newcomm <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_rank(comm, rank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: rank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_remote_group(comm, group, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Group), INTENT(OUT) :: group <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_remote_size(comm, size, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_set_attr(comm, comm_keyval, attribute_val, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: comm_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_set_info(comm, info, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm<br>TYPE(MPI_Info), INTENT(IN) :: info<br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_set_name(comm, comm_name, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>CHARACTER(LEN=*), INTENT(IN) :: comm_name <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_size(comm, size, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_split(comm, color, key, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: color, key <br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_split_type(comm, split_type, key, info, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: split_type, key <br>TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(OUT) :: newcomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Comm_test_inter(comm, flag, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_compare(group1, group2, result, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>INTEGER, INTENT(OUT) :: result <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_difference(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_excl(group, n, ranks, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: n, ranks(n) <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_free(group, ierror) <br> TYPE(MPI_Group), INTENT(INOUT) :: group <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_incl(group, n, ranks, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: n, ranks(n) <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_intersection(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_range_excl(group, n, ranges, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: n, ranges(3,n) <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_range_incl(group, n, ranges, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: n, ranges(3,n) <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_rank(group, rank, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(OUT) :: rank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_size(group, size, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_translate_ranks(group1, n, ranks1, group2, ranks2, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>INTEGER, INTENT(IN) :: n, ranks1(n) <br>INTEGER, INTENT(OUT) :: ranks2(n) <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Group_union(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group1, group2 <br>TYPE(MPI_Group), INTENT(OUT) :: newgroup <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: local_comm, peer_comm <br>INTEGER, INTENT(IN) :: local_leader, remote_leader, tag <br>TYPE(MPI_Comm), INTENT(OUT) :: newintercomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Intercomm_merge(intercomm, high, newintracomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: intercomm <br>LOGICAL, INTENT(IN) :: high <br>TYPE(MPI_Comm), INTENT(OUT) :: newintracomm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_DUP_FN(oldtype, type_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Datatype) :: oldtype <br>INTEGER :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_TYPE_NULL_COPY_FN(oldtype, type_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Datatype) :: oldtype <br>INTEGER :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_TYPE_NULL_DELETE_FN(datatype, type_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Datatype) :: datatype <br>INTEGER :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val, extra_state <br>INTEGER, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_create_keyval(type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Type_copy_attr_function) :: type_copy_attr_fn <br>PROCEDURE(MPI_Type_delete_attr_function) :: type_delete_attr_fn <br>INTEGER, INTENT(OUT) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_delete_attr(datatype, type_keyval, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_free_keyval(type_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: type_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_attr(datatype, type_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_get_name(datatype, type_name, resultlen, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: type_name <br>INTEGER, INTENT(OUT) :: resultlen <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_set_attr(datatype, type_keyval, attribute_val, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Type_set_name(datatype, type_name, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>CHARACTER(LEN=*), INTENT(IN) :: type_name <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_WIN_DUP_FN(oldwin, win_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Win) :: oldwin <br>INTEGER :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_WIN_NULL_COPY_FN(oldwin, win_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Win) :: oldwin <br>INTEGER :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val_out <br>LOGICAL :: flag <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_WIN_NULL_DELETE_FN(win, win_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Win) :: win <br>INTEGER :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val, extra_state <br>INTEGER :: ierror <br></tt>  
 <tt> MPI_Win_create_keyval(win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Win_copy_attr_function) :: win_copy_attr_fn <br>PROCEDURE(MPI_Win_delete_attr_function) :: win_delete_attr_fn <br>INTEGER, INTENT(OUT) :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_delete_attr(win, win_keyval, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, INTENT(IN) :: win_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_free_keyval(win_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: win_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_get_attr(win, win_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, INTENT(IN) :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_get_name(win, win_name, resultlen, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: win_name <br>INTEGER, INTENT(OUT) :: resultlen <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_set_attr(win, win_keyval, attribute_val, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, INTENT(IN) :: win_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_set_name(win, win_name, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>CHARACTER(LEN=*), INTENT(IN) :: win_name <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
<P> 

<P>
<hr>
<a href="node487.htm#Node487"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node489.htm#Node489"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node489.htm#Node489"> Process Topologies Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node487.htm#Node487"> Collective Communication Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Communication Calls</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node268">247. Communication Calls</span></h1>
<a href="node267.htm#Node267"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node269.htm#Node269"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node269.htm#Node269"> Put</a>
<b>Previous: </b><a href="node267.htm#Node267"> Window Info</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> supports the following <font face="sans-serif"> RMA</font> communication calls: <font face="sans-serif"> MPI_PUT</font>  
and <font face="sans-serif"> MPI_RPUT</font> transfer data from the  
caller memory (origin) to the target memory;  
<font face="sans-serif"> MPI_GET</font> and <font face="sans-serif"> MPI_RGET</font> transfer data from the target memory to the caller  
memory;  
<font face="sans-serif"> MPI_ACCUMULATE</font> and <font face="sans-serif"> MPI_RACCUMULATE</font> update locations in the target memory,  
e.g., by adding to these locations values sent from the caller  
memory; <font face="sans-serif"> MPI_GET_ACCUMULATE</font>, <font face="sans-serif"> MPI_RGET_ACCUMULATE</font>, and  
<font face="sans-serif"> MPI_FETCH_AND_OP</font> perform atomic read-modify-write and return the data  
before the accumulate operation; and  
<font face="sans-serif"> MPI_COMPARE_AND_SWAP</font> performs a remote atomic compare and swap  
operation.  
These operations are <em> nonblocking</em>: the call initiates  
the transfer, but the transfer may continue after the call returns.  
The transfer is completed, at the origin or both the origin and the target, when  
a subsequent <em> synchronization</em> call is issued by the caller on  
the involved window object.  These synchronization calls are described in  
Section <a href="node279.htm#Node279">Synchronization Calls 
</a>.  
Transfers can also be completed with calls to flush routines; see  
Section <a href="node283.htm#Node283">Flush and Sync 
</a> for details. For the  
<font face="sans-serif"> MPI_RPUT</font>, <font face="sans-serif"> MPI_RGET</font>,  
<font face="sans-serif"> MPI_RACCUMULATE</font>, and  
<font face="sans-serif"> MPI_RGET_ACCUMULATE</font> calls, the transfer can be locally  
completed by using the <font face="sans-serif"> MPI</font> test or wait operations described in  
Section <a href="node64.htm#Node64">Communication Completion 
</a>.  
<P> 
The local communication buffer of an <font face="sans-serif"> RMA</font> call should not be updated,  
and the local communication buffer of a get call should not be accessed  
after the <font face="sans-serif"> RMA</font>  
call until the operation completes at the origin.  
<P> 
The resulting data values, or outcome, of concurrent conflicting  
accesses to the same memory locations is undefined;  
if a location is updated by a put or accumulate operation, then   
the outcome of loads or other <font face="sans-serif"> RMA</font> operations is undefined  
until the updating operation has completed at the target.  
There is one exception to this rule; namely, the same location can be  
updated by several concurrent accumulate calls, the outcome being as  
if these updates occurred in some order.  In addition,   
the outcome of concurrent load/store and <font face="sans-serif"> RMA</font> updates to the same memory location is undefined.  
These restrictions  
are described in more detail in  
Section <a href="node289.htm#Node289">Semantics and Correctness 
</a>.  
<P> 
The calls use general datatype arguments to specify communication  
buffers at the origin and at the target.  Thus, a transfer operation  
may also gather data at the source and scatter it at the destination.  
However, all arguments specifying both communication buffers are  
provided by the caller.  
<P> 
For all <font face="sans-serif"> RMA</font> calls, the target process may be identical with the  
origin process;  
i.e., a  
process may use an <font face="sans-serif"> RMA</font> operation to move data in its memory.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The choice of supporting ``self-communication'' is the same as for  
message-passing.  
It simplifies some coding, and is very useful with accumulate  
operations, to allow atomic updates of local variables.  
 (<em> End of rationale.</em>) <br> 
<font face="sans-serif">  MPI_PROC_NULL</font> is a valid target rank in all <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> communication calls.    
The effect is the same as for <font face="sans-serif">  MPI_PROC_NULL</font> in <font face="sans-serif"> MPI</font> point-to-point  
communication.  
After any <font face="sans-serif"> RMA</font> operation with rank <font face="sans-serif">  MPI_PROC_NULL</font>, it is still necessary to  
finish the <font face="sans-serif"> RMA</font> epoch with the synchronization method that started the epoch.   
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node267.htm#Node267"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node269.htm#Node269"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node269.htm#Node269"> Put</a>
<b>Previous: </b><a href="node267.htm#Node267"> Window Info</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

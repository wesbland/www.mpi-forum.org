<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Datatype System</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node377">336. Datatype System</span></h2>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Previous: </b><a href="node376.htm#Node376"> Initialization and Finalization</a>
<p>
  
<P> 
All variables managed through the <font face="sans-serif"> MPI</font> tool information interface   
represent their  
values through typed buffers of a given length and type using an  
<font face="sans-serif"> MPI</font> datatype (similar to regular send/receive buffers).  Since the  
initialization of the <font face="sans-serif"> MPI</font> tool information interface is separate   
from the initialization of  
<font face="sans-serif"> MPI</font>, <font face="sans-serif"> MPI</font> tool information interface routines can be called before   
<font face="sans-serif"> MPI_INIT</font>. Consequently, these routines can  
also use <font face="sans-serif"> MPI</font> datatypes before <font face="sans-serif"> MPI_INIT</font>. Therefore,  
within the context of the <font face="sans-serif"> MPI</font> tool information interface, it is   
permissible to use a subset of  
<font face="sans-serif"> MPI</font> datatypes as specified below before a call to  
<font face="sans-serif"> MPI_INIT</font> (or equivalent).  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT"><font face="sans-serif">  MPI_INT</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_UNSIGNED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_UNSIGNED_LONG</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_UNSIGNED_LONG_LONG</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_COUNT</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_CHAR</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif">  MPI_DOUBLE</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD></TR></TABLE> 
</div>  
<br> 
<b>Table 14: </b><span id="Table14"><font face="sans-serif"> MPI</font> datatypes that can be used by the <font face="sans-serif"> MPI</font> tool information interface</span><P> 
  
   
 
<br> 
<em> Rationale.</em>  
<P> 
The <font face="sans-serif"> MPI</font> tool information interface relies mainly on unsigned  
datatypes for integer values since most variables are expected  
to represent counters or resource sizes. <font face="sans-serif">  MPI_INT</font> is  
provided for additional flexibility and is expected to be used  
mainly for control variables and enumeration types (see below).  
<P> 
Providing all basic datatypes, in particular providing all signed  
and unsigned variants of integer types, would lead to a larger  
number of types, which tools need to interpret. This would  
cause unnecessary complexity in the implementation of tools  
based on the <font face="sans-serif"> MPI</font> tool information interface.  
 (<em> End of rationale.</em>) <br> 
The <font face="sans-serif"> MPI</font> tool information interface only relies on a subset of the basic <font face="sans-serif"> MPI</font>  
datatypes and does not use any derived <font face="sans-serif"> MPI</font> datatypes.   
Table <a href="node377.htm#Table14">14 
</a> lists all <font face="sans-serif"> MPI</font> datatypes that  
can be returned by the <font face="sans-serif"> MPI</font> tool information interface to represent   
its variables.  
<P> 
The use of the datatype <font face="sans-serif">  MPI_CHAR</font> in the <font face="sans-serif"> MPI</font> tool information  
interface implies a null-terminated character array, i.e., a string in the C   
language.   
If a variable has type <font face="sans-serif">  MPI_CHAR</font>, the value of the <font face="sans-serif"> count</font>   
parameter returned by   
<font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font> and <font face="sans-serif"> MPI_T_PVAR_HANDLE_ALLOC</font>   
must  be large enough to include any valid value, including its terminating null  
character.  
The contents of returned <font face="sans-serif">  MPI_CHAR</font> arrays are only defined from index 0 through  
the location of the first null character.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The <font face="sans-serif"> MPI</font> tool information interface requires a significantly simpler  
type system than <font face="sans-serif"> MPI</font> itself. Therefore, only its required subset  
must be present before  
<font face="sans-serif"> MPI_INIT</font> (or equivalent) and <font face="sans-serif"> MPI</font> implementations   
do not need to initialize the complete <font face="sans-serif"> MPI</font>  
datatype system.  
 (<em> End of rationale.</em>) <br> 
For variables of type <font face="sans-serif">  MPI_INT</font>, an <font face="sans-serif"> MPI</font> implementation can  
provide additional information by associating names with a fixed  
number of values.  
We refer to  
this information in the following as an enumeration.  In this case, the respective  
calls that provide additional metadata for each control or performance  
variable, i.e., <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>  
(Section <a href="node378.htm#Node378">Control Variables 
</a>) and <font face="sans-serif"> MPI_T_PVAR_GET_INFO</font>  
(Section <a href="node384.htm#Node384">Performance Variables 
</a>), return a handle of type  
<font face="sans-serif"> MPI_T_enum</font>   
that can be passed to the following functions to  
extract additional information.  
Thus, the <font face="sans-serif"> MPI</font> implementation can describe variables with a  
fixed set of values that each represents a particular state.  
Each enumeration type can have <i>N</i> different values, with a  
fixed <i>N</i> that can be queried using <font face="sans-serif"> MPI_T_ENUM_GET_INFO</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_ENUM_GET_INFO(enumtype, num, name, name_len)</TD></TR>  
<TR><TD> IN enumtype</TD><TD>enumeration to be queried (handle)</TD></TR>  
<TR><TD> OUT num</TD><TD>number of discrete values represented by this enumeration (integer)</TD></TR>  
 <TR><TD> OUT name</TD><TD>buffer to return the string containing the name of the enumeration (string)</TD></TR> <TR><TD> INOUT name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>   
</TABLE>  
<P> 
  
 <tt> int MPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len) <br></tt>  
<P> 
If <font face="sans-serif"> enumtype</font> is a valid enumeration, this routine returns the  
number of items represented by this enumeration type as well as its name.  
<i>N</i> must be greater than  
<i>0</i>, i.e., the enumeration must represent at least one value.    
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the enumeration as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
The routine is required to return a name of at least length one. This  
name must be unique with respect to all other names for   
enumerations that the <font face="sans-serif"> MPI</font> implementation uses.  
<P> 
Names associated with individual values in each enumeration <font face="sans-serif"> enumtype</font> can be  
queried using <font face="sans-serif"> MPI_T_ENUM_GET_ITEM</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_ENUM_GET_ITEM(enumtype, index, value, name, name_len)</TD></TR>  
<TR><TD> IN enumtype</TD><TD>enumeration to be queried (handle)</TD></TR>  
<TR><TD> IN index</TD><TD>number of the value to be queried in this enumeration (integer)</TD></TR>  
<TR><TD> OUT value</TD><TD>variable value (integer)</TD></TR>  
 <TR><TD> OUT name</TD><TD>buffer to return the string containing the name of the enumeration item (string)</TD></TR> <TR><TD> INOUT name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>   
</TABLE>  
<P> 
  
 <tt> int MPI_T_enum_get_item(MPI_T_enum enumtype, int index, int *value, char *name, int *name_len) <br></tt>  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the enumeration item as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
If completed successfully, the routine returns the name/value pair  
that describes the enumeration at the specified index.  
The  
call is further required to return a name of  
at least length one. This name must be unique with respect to all  
other names of items for the same enumeration.  
<P> 

<P>
<hr>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node378.htm#Node378"> Control Variables</a>
<b>Previous: </b><a href="node376.htm#Node376"> Initialization and Finalization</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title><font face="sans-serif"> MPI</font> for Different Fortran Standard Versions</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node413">360.  MPI for Different Fortran Standard Versions</span></h2>
<a href="node412.htm#Node412"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node414.htm#Node414"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node414.htm#Node414"> Requirements on Fortran Compilers</a>
<b>Previous: </b><a href="node412.htm#Node412"> Interface Specifications, Procedure Names, and the Profiling Interface</a>
<p>
  
<P> 
This section describes which Fortran interface functionality   
can be provided for different versions of the Fortran standard.  
<ul> 
 
<li><em> For Fortran 77</em> with some extensions:   
   <ul> 
     
<li><font face="sans-serif"> MPI</font> identifiers may be up to 30 characters (31 with the  
      profiling interface).  
     
<li><font face="sans-serif"> MPI</font> identifiers may contain underscores after the first character.  
     
<li>An <font face="sans-serif"> MPI</font> subroutine with a choice argument may be  
          called with different argument types.  
     
<li>Although not required by the <font face="sans-serif"> MPI</font> standard, the <tt> INCLUDE</tt> statement  
          should be available for including <tt>mpif.h</tt> into the   
          user application source code.   
   </ul> 
<br> 
Only <font face="sans-serif"> MPI-1.1</font>, <font face="sans-serif"> MPI-1.2</font>, and <font face="sans-serif"> MPI-1.3</font> can be implemented.  
  The use of absolute addresses from <font face="sans-serif"> MPI_ADDRESS</font>  
  and <font face="sans-serif">  MPI_BOTTOM</font> may cause problems if an address does not  
  fit into the memory space provided by an <tt> INTEGER</tt>.  
  (In <font face="sans-serif"> MPI-2.0</font> this problem is solved with <font face="sans-serif"> MPI_GET_ADDRESS</font>,  
   but not for Fortran 77.)   
 
<li><em> For Fortran 90:</em> <br>  
  The major additional features that are needed from Fortran 90 are:  
   <ul> 
    
<li>The <tt> MODULE</tt> and <tt> INTERFACE</tt> concept.  
    
<li>The <tt> KIND=</tt> and <tt> SELECTED_..._KIND</tt> concept.   
    
<li>Fortran derived <tt> TYPE</tt>s and the <tt> SEQUENCE</tt> attribute.  
    
<li>The <tt> OPTIONAL</tt> attribute for dummy arguments.  
    
<li>Cray pointers, which are a non-standard compiler extension,  
         are needed for the use of <font face="sans-serif"> MPI_ALLOC_MEM</font>.   
   </ul> 
<br> 
With these features, <font face="sans-serif"> MPI-1.1</font> -- <font face="sans-serif"> MPI-2.2</font> can be implemented  
  without restrictions.  
  <font face="sans-serif"> MPI-3.0</font> can be implemented with some restrictions.  
  The Fortran support methods are abbreviated with  
   <font face="sans-serif"> S1</font> = the <tt>mpi_f08</tt> module,  
   <font face="sans-serif"> S2</font> = the <tt>mpi</tt> module, and  
   <font face="sans-serif"> S3</font> = the <tt>mpif.f</tt> include file.   
  If not stated otherwise, restrictions exist for each method  
  which prevent implementing the complete semantics of <font face="sans-serif"> MPI-3.0</font>.  
<P> 
<ul> 
    
<li><font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> equals <tt> .FALSE.</tt>,  
       i.e., subscript triplets and noncontiguous subarrays cannot be used  
       as buffers in nonblocking routines, RMA, or split-collective I/O.  
    
<li><font face="sans-serif"> S1</font>, <font face="sans-serif"> S2</font>, and <font face="sans-serif"> S3</font> can be implemented,  
       but for <font face="sans-serif"> S1</font>, only a preliminary implementation is possible.  
    
<li>In this preliminary interface of <font face="sans-serif"> S1</font>, the following changes are   
       necessary:  
       <ul> 
         
<li><tt>TYPE(*), DIMENSION(..)</tt> is substituted by   
              non-standardized extensions like <tt> !$PRAGMA IGNORE_TKR</tt>.  
         
<li>The <tt> ASYNCHRONOUS</tt> attribute is omitted.    
         
<li><tt> PROCEDURE(...)</tt> callback declarations are   
              substituted by <tt> EXTERNAL</tt>.    
       </ul> 
<br> 
 
<li>The specific procedure names are specified in Section <a href="node412.htm#Node412">Interface Specifications, Procedure Names, and the Profiling Interface 
</a>.  
    
<li>Due to the rules specified in Section <a href="node412.htm#Node412">Interface Specifications, Procedure Names, and the Profiling Interface 
</a>,  
       choice buffer declarations should be implemented only with  
       non-standardized extensions like <tt> !$PRAGMA IGNORE_TKR</tt>  
       (as long as F2008+TS 29113 is not available).  
<P> 
In <font face="sans-serif"> S2</font> and <font face="sans-serif"> S3</font>:  
       Without such extensions, routines with choice buffers   
       should be provided with an implicit interface,   
       instead of overloading with a different <font face="sans-serif"> MPI</font> function   
       for each possible buffer type (as mentioned in  
       Section <a href="node421.htm#Node421">Problems Due to Strong Typing 
</a>).  
       Such overloading would also imply restrictions  
       for passing Fortran derived types as choice buffer, see also  
       Section <a href="node425.htm#Node425">Fortran Derived Types 
</a>.  
  <P> 
Only in <font face="sans-serif"> S1</font>:  
       The implicit interfaces for routines with choice buffer arguments imply   
       that the <font face="sans-serif"> ierror</font> argument cannot be defined as <tt> OPTIONAL</tt>.  
       For this reason, it is recommended not to provide the <tt>mpi_f08</tt>  
       module if such an extension is not available.  
    
<li>The <tt> ASYNCHRONOUS</tt> attribute can <b> not</b> be used in applications  
       to protect buffers in nonblocking <font face="sans-serif"> MPI</font> calls (<font face="sans-serif"> S1</font>--<font face="sans-serif"> S3</font>).  
    
<li>The <tt> TYPE(C_PTR)</tt> binding of the  
       <font face="sans-serif"> MPI_ALLOC_MEM</font> and <font face="sans-serif"> MPI_WIN_ALLOCATE</font> routines  
       is not available.  
    
<li>In <font face="sans-serif"> S1</font> and <font face="sans-serif"> S2</font>,  
       the definition of the handle types (e.g., <tt> TYPE(MPI_Comm)</tt>  
       and the status type <tt> TYPE(MPI_Status)</tt>   
       must be modified: The <tt> SEQUENCE</tt> attribute must be used  
       instead of <tt> BIND(C)</tt> (which is not available in Fortran 90/95).    
       This restriction implies that the application must be fully recompiled  
       if one switches to an <font face="sans-serif"> MPI</font> library for Fortran 2003 and later   
       because the internal memory size of the handles may have changed.     
       For this reason, an implementor may choose not to provide  
       the <tt>mpi_f08</tt> module for Fortran 90 compilers.   
       In this case, the <tt>mpi_f08</tt> handle types and all routines, constants and  
       types related to <tt> TYPE(MPI_Status)</tt>   
       (see Section <a href="node447.htm#Node447">Status 
</a>)   
       are also not available in the <tt>mpi</tt> module and <tt>mpif.h</tt>.    
  </ul> 
<br> 
 
<li><em> For Fortran 95:</em> <br>  
  The quality of the <font face="sans-serif"> MPI</font> interface and the restrictions   
  are the same as with Fortran 90.   
 
<li><em> For Fortran 2003:</em> <br>  
  The major features that are needed from Fortran 2003 are:  
   <ul> 
    
<li>Interoperability with C, i.e.,  
    <ul> 
      
<li><tt> BIND(C)</tt> derived types.  
      
<li>The <tt> ISO_C_BINDING</tt> intrinsic type <tt> C_PTR</tt>   
           and routine <tt> C_F_POINTER</tt>.   
    </ul> 
<br> 
 
<li>The ability to define an <tt> ABSTRACT INTERFACE</tt>  
         and to use it for <tt> PROCEDURE</tt> dummy arguments.   
    
<li>The ability to overload the operators <tt>.EQ.</tt> and  
         <tt>.NE.</tt> to allow the comparison of derived types (used in  
         <font face="sans-serif"> MPI-3.0</font> for <font face="sans-serif"> MPI</font> handles).  
    
<li>The <tt> ASYNCHRONOUS</tt> attribute is available to protect  
         Fortran asynchronous I/O.  
         This feature is not yet used by <font face="sans-serif"> MPI</font>, but it is the basis  
         for the enhancement for <font face="sans-serif"> MPI</font> communication in the TS 29113.   
   </ul> 
<br> 
With these features (but still without the features of TS 29113),   
  <font face="sans-serif"> MPI-1.1</font> -- <font face="sans-serif"> MPI-2.2</font> can be implemented  
  without restrictions, but with one enhancement:  
   <ul> 
    
<li>The user application can use <tt> TYPE(C_PTR)</tt> together with   
         <font face="sans-serif"> MPI_ALLOC_MEM</font> as long as <font face="sans-serif"> MPI_ALLOC_MEM</font>  
         is defined with an implicit interface because a   
         <tt> C_PTR</tt> and an <tt> INTEGER(KIND=MPI_ADDRESS_KIND)</tt>   
         argument must both map to a <tt> void *</tt> argument.   
   </ul> 
<br> 
<font face="sans-serif"> MPI-3.0</font> can be implemented with the following restrictions:  
   <ul> 
    
<li><font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> equals <tt> .FALSE.</tt>.  
    
<li>For <font face="sans-serif"> S1</font>, only a preliminary implementation is possible.  
       The following changes are necessary:  
       <ul> 
         
<li><tt>TYPE(*), DIMENSION(..)</tt> is substituted by   
              non-standardized extensions like <tt> !$PRAGMA IGNORE_TKR</tt>.  
       </ul> 
<br> 
 
<li>The specific procedure names are specified in Section <a href="node412.htm#Node412">Interface Specifications, Procedure Names, and the Profiling Interface 
</a>.  
    
<li>With <font face="sans-serif"> S1</font>, the <tt> ASYNCHRONOUS</tt> is required as specified in  
       the second Fortran interfaces.  
       With <font face="sans-serif"> S2</font> and <font face="sans-serif"> S3</font> the implementation can also add  
       this attribute if explicit interfaces are used.  
    
<li>The <tt> ASYNCHRONOUS</tt> Fortran attribute can be used in applications  
       to <em> try to</em> protect buffers in nonblocking <font face="sans-serif"> MPI</font> calls,  
       but the protection can work only if the compiler   
       is able to protect asynchronous Fortran I/O and makes no difference  
       between such asynchronous Fortran I/O and <font face="sans-serif"> MPI</font> communication.  
    
<li>The <tt> TYPE(C_PTR)</tt> binding of the  
       <font face="sans-serif"> MPI_ALLOC_MEM</font>, <font face="sans-serif"> MPI_WIN_ALLOCATE</font>,  
       <font face="sans-serif"> MPI_WIN_ALLOCATE_SHARED</font>, and  
       <font face="sans-serif"> MPI_WIN_SHARED_QUERY</font> routines   
       can be used only for Fortran types that are C compatible.  
    
<li>The same restriction as for Fortran 90 applies if    
       non-standardized extensions like <tt> !$PRAGMA IGNORE_TKR</tt>  
       are not available.   
   </ul> 
<br> 
 
<li><em> For Fortran 2008 + TS 29113 and later</em> and <br>  
  <em> For Fortran 2003 + TS 29113:</em> <br>  
  The major feature that are needed from TS 29113 are:  
   <ul> 
    
<li><tt>TYPE(*), DIMENSION(..)</tt> is available.  
    
<li>The <tt> ASYNCHRONOUS</tt> attribute is extended to protect also  
         nonblocking <font face="sans-serif"> MPI</font> communication.   
    
<li>The array dummy argument of the <tt> ISO_C_BINDING</tt> intrinsic   
         <tt> C_F_POINTER</tt> is not restricted to Fortran types for which  
         a corresponding type in C exists.  
   </ul> 
<br> 
Using these features, <font face="sans-serif"> MPI-3.0</font> can be implemented without any restrictions.  
   <ul> 
    
<li>With <font face="sans-serif"> S1</font>,  
       <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> equals <tt> .TRUE.</tt>.  
       The <tt>ASYNCHRONOUS</tt> attribute can be used  
       to protect buffers in nonblocking <font face="sans-serif"> MPI</font> calls.   
       The <tt> TYPE(C_PTR)</tt> binding of the  
       <font face="sans-serif"> MPI_ALLOC_MEM</font>, <font face="sans-serif"> MPI_WIN_ALLOCATE</font>,  
       <font face="sans-serif"> MPI_WIN_ALLOCATE_SHARED</font>, and  
       <font face="sans-serif"> MPI_WIN_SHARED_QUERY</font> routines   
       can be used for any Fortran type.  
    
<li>With <font face="sans-serif"> S2</font> and <font face="sans-serif"> S3</font>,  
       the value of <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> is implementation dependent.  
       A high quality implementation will also provide    
       <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font>==<tt> .TRUE.</tt>   
       and will use the <tt> ASYNCHRONOUS</tt>   
       attribute in the same way as in <font face="sans-serif"> S1</font>.  
    
<li>If non-standardized extensions like <tt> !$PRAGMA IGNORE_TKR</tt>  
       are not available then <font face="sans-serif"> S2</font> must be implemented with   
       <tt>TYPE(*), DIMENSION(..)</tt>.  
   </ul> 
<br> 
</ul> 
<br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font>==<tt> .FALSE.</tt>,   
the choice argument may be implemented with an  
explicit interface using compiler directives, for example:  
<br> 
<pre><tt>   INTERFACE 
     SUBROUTINE MPI_...(buf, ...)  
       !DEC$ ATTRIBUTES NO_ARG_CHECK :: buf  
       !$PRAGMA IGNORE_TKR buf  
       !DIR$ IGNORE_TKR buf 
       !IBM* IGNORE_TKR buf 
       REAL, DIMENSION(*) :: buf 
       ... ! declarations of the other arguments 
     END SUBROUTINE 
   END INTERFACE 
</tt></pre> 
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node412.htm#Node412"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node414.htm#Node414"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node414.htm#Node414"> Requirements on Fortran Compilers</a>
<b>Previous: </b><a href="node412.htm#Node412"> Interface Specifications, Procedure Names, and the Profiling Interface</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

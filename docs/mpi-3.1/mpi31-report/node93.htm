<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Canonical <font face="sans-serif"> MPI_PACK</font> and <font face="sans-serif"> MPI_UNPACK</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node93">88. Canonical  MPI_PACK and  MPI_UNPACK</span></h1>
<a href="node92.htm#Node92"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node94.htm#Node94"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node94.htm#Node94"> Collective Communication</a>
<b>Previous: </b><a href="node92.htm#Node92"> Pack and Unpack</a>
<p>
  
  
  
   
<P> 
These functions read/write data to/from the buffer in the ``external32'' data  
format specified in Section <a href="node333.htm#Node333">External Data Representation: ``external32'' 
</a>, and calculate the size needed  
for packing.  Their first arguments specify the data format, for future  
extensibility, but  
currently   
the only valid value of the <font face="sans-serif"> datarep</font>  
argument is ``external32.''  
 
<br> 
<em> Advice to users.</em>  
<P> 
These functions could be used, for example, to send typed data in a portable  
  format from one <font face="sans-serif"> MPI</font> implementation to another.  
 (<em> End of advice to users.</em>) <br> 
The buffer will contain exactly the packed data, without headers.  
<font face="sans-serif">  MPI_BYTE</font> should be used to send and receive data that is packed  
using <font face="sans-serif"> MPI_PACK_EXTERNAL</font>.   
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI_PACK_EXTERNAL</font> specifies that there is no header on the message  
and further   
specifies the exact format of the data.  Since <font face="sans-serif"> MPI_PACK</font> may (and is  
allowed   
to) use a header, the datatype <font face="sans-serif">  MPI_PACKED</font> cannot be used for data  
packed with   
<font face="sans-serif"> MPI_PACK_EXTERNAL</font>.    
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_PACK_EXTERNAL(datarep, inbuf, incount, datatype, outbuf, outsize, position)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string) </TD></TR>  
<TR><TD> IN inbuf</TD><TD>input buffer start (choice) </TD></TR>  
<TR><TD> IN incount</TD><TD>number of input data items (integer) </TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each input data item (handle) </TD></TR>  
<TR><TD> OUT outbuf</TD><TD>output buffer start (choice) </TD></TR>  
<TR><TD> IN outsize</TD><TD>output buffer size, in bytes (integer) </TD></TR>  
<TR><TD> INOUT position</TD><TD>current position in buffer, in bytes (integer) </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position) <br></tt>  
<P> 
 <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: datarep <br>TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER, INTENT(IN) :: incount <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: outsize <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_PACK_EXTERNAL(DATAREP, INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, IERROR)<br> INTEGER INCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) OUTSIZE, POSITION <br>CHARACTER*(*) DATAREP <br>&lt;type&gt; INBUF(*), OUTBUF(*) <br></tt>  
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_UNPACK_EXTERNAL(datarep, inbuf, insize, position, outbuf, outsize, position)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string) </TD></TR>  
<TR><TD> IN inbuf</TD><TD>input buffer start (choice) </TD></TR>  
<TR><TD> IN insize</TD><TD>input buffer size, in bytes (integer) </TD></TR>  
<TR><TD> INOUT position</TD><TD>current position in buffer, in bytes (integer) </TD></TR>  
<TR><TD> OUT outbuf</TD><TD>output buffer start (choice) </TD></TR>  
<TR><TD> IN outcount</TD><TD>number of output data items (integer) </TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of output data item (handle) </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype) <br></tt>  
<P> 
 <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: datarep <br>TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf <br>TYPE(*), DIMENSION(..) :: outbuf <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: insize <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position <br>INTEGER, INTENT(IN) :: outcount <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_UNPACK_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, IERROR)<br> INTEGER OUTCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) INSIZE, POSITION <br>CHARACTER*(*) DATAREP <br>&lt;type&gt; INBUF(*), OUTBUF(*) <br></tt>  
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_PACK_EXTERNAL_SIZE(datarep, incount, datatype, size)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string) </TD></TR>  
<TR><TD> IN incount</TD><TD>number of input data items (integer) </TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each input data item (handle) </TD></TR>  
<TR><TD> OUT size</TD><TD>output buffer size, in bytes (integer) </TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size) <br></tt>  
<P> 
 <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: incount <br>CHARACTER(LEN=*), INTENT(IN) :: datarep <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_PACK_EXTERNAL_SIZE(DATAREP, INCOUNT, DATATYPE, SIZE, IERROR)<br> INTEGER INCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE <br>CHARACTER*(*) DATAREP  <br></tt>  
<P> 
  
<P> 
<P> 
<P> 
  

<P>
<hr>
<a href="node92.htm#Node92"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node94.htm#Node94"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node94.htm#Node94"> Collective Communication</a>
<b>Previous: </b><a href="node92.htm#Node92"> Pack and Unpack</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Commit and Free</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node86">81. Commit and Free</span></h2>
<a href="node85.htm#Node85"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node87.htm#Node87"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node87.htm#Node87"> Duplicating a Datatype</a>
<b>Previous: </b><a href="node85.htm#Node85"> True Extent of Datatypes</a>
<p>
  
<P> 
A datatype object has to be <b> committed</b> before it can be used in a  
communication.  
As an argument in datatype constructors, uncommitted and also  
committed datatypes can be used.  
There is no need to commit basic datatypes. They are ``pre-committed.''  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_COMMIT(datatype)</TD></TR>  
<TR><TD> INOUT datatype</TD><TD>datatype that is committed (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_commit(MPI_Datatype *datatype) <br></tt>  
<P> 
 <tt> MPI_Type_commit(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_COMMIT(DATATYPE, IERROR)<br> INTEGER  DATATYPE, IERROR <br></tt>  
  
<P> 
The commit operation commits the datatype, that is, the formal description of  
a communication buffer, not the content of that buffer.  Thus, after a datatype  
has been committed, it can be repeatedly reused to communicate the changing  
content  
of a buffer or, indeed, the content of different buffers, with different  
starting addresses.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The system may ``compile'' at commit time an internal  
representation for the datatype that facilitates  
communication, e.g.,  
change from a compacted representation to a flat representation of the  
datatype, and select the most convenient transfer mechanism.  
 (<em> End of advice to implementors.</em>) <br> 
<font face="sans-serif"> MPI_TYPE_COMMIT</font>   
will accept a committed datatype;  
in this case, it is equivalent to a no-op.  
<P> 
<br><b> Example</b>  
  
The following code fragment gives examples of using  
<font face="sans-serif"> MPI_TYPE_COMMIT</font>.  
<br> 
<pre><tt>INTEGER type1, type2 
CALL MPI_TYPE_CONTIGUOUS(5, MPI_REAL, type1, ierr) 
              ! new type object created 
CALL MPI_TYPE_COMMIT(type1, ierr) 
              ! now type1 can be used for communication 
type2 = type1 
              ! type2 can be used for communication 
              ! (it is a handle to same object as type1) 
CALL MPI_TYPE_VECTOR(3, 5, 4, MPI_REAL, type1, ierr) 
              ! new uncommitted type object created 
CALL MPI_TYPE_COMMIT(type1, ierr) 
              ! now type1 can be used anew for communication 
</tt></pre> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_FREE(datatype)</TD></TR>  
<TR><TD> INOUT datatype</TD><TD>datatype that is freed (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_free(MPI_Datatype *datatype) <br></tt>  
<P> 
 <tt> MPI_Type_free(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: datatype <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_FREE(DATATYPE, IERROR)<br> INTEGER  DATATYPE, IERROR <br></tt>  
  
<P> 
Marks the datatype object associated with <font face="sans-serif"> datatype</font> for  
deallocation and sets <font face="sans-serif"> datatype</font> to <font face="sans-serif">  MPI_DATATYPE_NULL</font>.  
Any communication that is currently using this datatype will complete   
normally.  
Freeing a datatype does not affect any other datatype that was  
built from the freed datatype.  The system behaves as if  
input datatype arguments to derived datatype constructors are passed by value.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The implementation may keep a reference count of active communications  
that use the datatype, in order to decide when to free it.  
Also, one may implement constructors of derived datatypes so that they keep  
pointers to their datatype arguments, rather then copying them.  In this  
case, one needs to keep track of active datatype definition references in order  
to know when a datatype object can be freed.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node85.htm#Node85"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node77.htm#Node77"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node87.htm#Node87"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node77.htm#Node77"> Derived Datatypes</a>
<b>Next: </b><a href="node87.htm#Node87"> Duplicating a Datatype</a>
<b>Previous: </b><a href="node85.htm#Node85"> True Extent of Datatypes</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

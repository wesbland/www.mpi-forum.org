<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Attributes</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node453">382. Attributes</span></h2>
<a href="node448.htm#Node452"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node454.htm#Node454"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node454.htm#Node454"> Extra-State</a>
<b>Previous: </b><a href="node448.htm#Node452"> Reduce Operations</a>
<p>
  
  
<P> 
Attribute keys can be allocated in one language and freed in another.  
Similarly, attribute values can be set in one language and accessed in  
another.  To achieve this, attribute keys will be allocated in an integer  
range that is valid all languages.  The same holds true for system-defined  
attribute values (such as <font face="sans-serif">  MPI_TAG_UB</font>,  
<font face="sans-serif">  MPI_WTIME_IS_GLOBAL</font>, etc.).  
<P> 
Attribute keys declared in one language are associated with copy and  
delete functions in that language  
(the functions provided by the <font face="sans-serif"> MPI_ {TYPE,COMM,WIN }_CREATE_KEYVAL</font> call).  
When a  
communicator is duplicated, for each attribute, the corresponding copy  
function is called, using the right calling  
convention for the language of that function; and similarly, for the  
delete callback function.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
This requires that attributes be tagged either as   
``C'' or ``Fortran''  
 and that the language tag be checked in order to use  
the right calling convention for the callback function.  
 (<em> End of advice to implementors.</em>) <br> 
The attribute manipulation functions described in   
Section <a href="node172.htm#Node172">Caching 
</a>  
defines  
attributes arguments to be of type <font face="sans-serif">  void*</font> in C, and of type  
<font face="sans-serif">  INTEGER</font>, in Fortran.  On some systems,  
<font face="sans-serif">  INTEGER</font>s will have 32 bits, while   
C pointers will have  
64 bits.  This is a problem if communicator attributes are used to  
move information from a Fortran caller to a   
C callee, or  
vice-versa.  
<P> 
<font face="sans-serif"> MPI</font> behaves as if it stores,  
internally, address sized attributes.  If Fortran <font face="sans-serif">  INTEGER</font>s  
are smaller, then the (deprecated) Fortran function <font face="sans-serif"> MPI_ATTR_GET</font> will  
return the least significant part of the attribute word; the (deprecated) Fortran  
function <font face="sans-serif"> MPI_ATTR_PUT</font> will set the least significant part  
of the attribute word, which will be sign extended to the entire word.  
(These two functions may be invoked explicitly by user code, or  
implicitly, by attribute copying callback functions.)  
<P> 
As for addresses, new functions are provided that manipulate  
Fortran address sized attributes, and have the same functionality as the  
old  
functions in C.  These functions are described in  
Section <a href="node172.htm#Node172">Caching 
</a>.  
Users are encouraged to use these new functions.  
<P> 
<font face="sans-serif"> MPI</font> supports two types of attributes:  address-valued (pointer) attributes,  
and integer-valued attributes.  C  
attribute functions put and get address-valued   
attributes.  Fortran attribute functions put and get integer-valued  
attributes.  When an integer-valued attribute is accessed from   
C,  
then  
<font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_get_attr</font>  
will return the address of (a pointer to) the integer-valued  
attribute, which is a pointer to  
  <font face="sans-serif"> MPI_Aint</font> if the attribute was stored with Fortran  
  <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_SET_ATTR</font>, and a pointer to <font face="sans-serif"> int</font> if it was  
  stored with the deprecated Fortran <font face="sans-serif"> MPI_ATTR_PUT</font>.  When an  
address-valued attribute is accessed from  
Fortran, then <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_GET_ATTR</font>  
will convert the address into an integer and  
return the result of this conversion.  This conversion is lossless if new  
style   
attribute functions are used, and an integer of kind  
<font face="sans-serif">  MPI_ADDRESS_KIND</font>  
is returned.  The conversion may cause truncation if   
deprecated   
attribute functions are used.  
In C, the deprecated routines  
  <font face="sans-serif"> MPI_Attr_put</font> and <font face="sans-serif"> MPI_Attr_get</font> behave identical  
  to <font face="sans-serif"> MPI_Comm_set_attr</font> and <font face="sans-serif"> MPI_Comm_get_attr</font>.  
<P> 
  
<br><b> Example</b>  
  
A. Setting an attribute value in C  
<br> 
<pre><tt>int set_val = 3; 
struct foo set_struct; 
 
/* Set a value that is a pointer to an int */ 
 
MPI_Comm_set_attr(MPI_COMM_WORLD, keyval1, &amp;set_val); 
/* Set a value that is a pointer to a struct */ 
MPI_Comm_set_attr(MPI_COMM_WORLD, keyval2, &amp;set_struct); 
/* Set an integer value */ 
MPI_Comm_set_attr(MPI_COMM_WORLD, keyval3, (void *) 17); 
</tt></pre> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre><tt>int flag, *get_val; 
struct foo *get_struct; 
 
/* Upon successful return, get_val == &amp;set_val  
   (and therefore *get_val == 3) */ 
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval1, &amp;get_val, &amp;flag); 
/* Upon successful return, get_struct == &amp;set_struct */ 
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval2, &amp;get_struct, &amp;flag); 
/* Upon successful return, get_val == (void*) 17 */ 
/*        i.e., (MPI_Aint) get_val == 17 */  
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval3, &amp;get_val, &amp;flag); 
</tt></pre> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR, GET_VAL, GET_STRUCT  
 
! Upon successful return, GET_VAL == &amp;set_val, possibly truncated 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL1, GET_VAL, FLAG, IERR) 
! Upon successful return, GET_STRUCT == &amp;set_struct, possibly truncated 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL2, GET_STRUCT, FLAG, IERR) 
! Upon successful return, GET_VAL == 17 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL3, GET_VAL, FLAG, IERR) 
</tt></pre> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR 
INTEGER (KIND=MPI_ADDRESS_KIND) GET_VAL, GET_STRUCT  
 
! Upon successful return, GET_VAL == &amp;set_val 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL1, GET_VAL, FLAG, IERR) 
! Upon successful return, GET_STRUCT == &amp;set_struct 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL2, GET_STRUCT, FLAG, IERR) 
! Upon successful return, GET_VAL == 17 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL3, GET_VAL, FLAG, IERR) 
</tt></pre> 
  
<P> 
<br><b> Example</b>  
A. Setting an attribute value with the (deprecated) Fortran <font face="sans-serif"> MPI-1</font> call  
<P> 
<br> 
<pre><tt>INTEGER IERR, VAL 
VAL = 7 
CALL MPI_ATTR_PUT(MPI_COMM_WORLD, KEYVAL, VAL, IERR) 
</tt></pre> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre><tt>int flag; 
int *value; 
 
/* Upon successful return, value points to internal MPI storage and 
   *value == (int) 7 */ 
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval, &amp;value, &amp;flag); 
</tt></pre> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR, VALUE 
 
! Upon successful return, VALUE == 7 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL, VALUE, FLAG, IERR) 
</tt></pre> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR 
INTEGER (KIND=MPI_ADDRESS_KIND) VALUE 
 
! Upon successful return, VALUE == 7 (sign extended) 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL, VALUE, FLAG, IERR) 
</tt></pre> 
  
<P> 
  
 <P> 
<br><b> Example</b>  
A. Setting an attribute value via a Fortran <font face="sans-serif"> MPI-2</font> call  
<P> 
<br> 
<pre><tt>INTEGER IERR 
INTEGER(KIND=MPI_ADDRESS_KIND) VALUE1 
INTEGER(KIND=MPI_ADDRESS_KIND) VALUE2 
VALUE1 = 42 
VALUE2 = INT(2, KIND=MPI_ADDRESS_KIND) ** 40 
 
CALL MPI_COMM_SET_ATTR(MPI_COMM_WORLD, KEYVAL1, VALUE1, IERR) 
CALL MPI_COMM_SET_ATTR(MPI_COMM_WORLD, KEYVAL2, VALUE2, IERR) 
</tt></pre> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre><tt>int flag; 
MPI_Aint *value1, *value2; 
 
/* Upon successful return, value1 points to internal MPI storage and 
   *value1 == 42 */ 
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval1, &amp;value1, &amp;flag); 
/* Upon successful return, value2 points to internal MPI storage and 
   *value2 == 2^40 */ 
MPI_Comm_get_attr(MPI_COMM_WORLD, keyval2, &amp;value2, &amp;flag); 
</tt></pre> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR, VALUE1, VALUE2 
 
! Upon successful return, VALUE1 == 42 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL1, VALUE1, FLAG, IERR) 
! Upon successful return, VALUE2 == 2^40, or 0 if truncation 
! needed (i.e., the least significant part of the attribute word) 
CALL MPI_ATTR_GET(MPI_COMM_WORLD, KEYVAL2, VALUE2, FLAG, IERR) 
</tt></pre> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre><tt>LOGICAL FLAG 
INTEGER IERR 
INTEGER (KIND=MPI_ADDRESS_KIND) VALUE1, VALUE2 
 
! Upon successful return, VALUE1 == 42 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL1, VALUE1, FLAG, IERR) 
! Upon successful return, VALUE2 == 2^40 
CALL MPI_COMM_GET_ATTR(MPI_COMM_WORLD, KEYVAL2, VALUE2, FLAG, IERR) 
</tt></pre> 
  
<P> 
The predefined <font face="sans-serif"> MPI</font> attributes can be integer valued or address-valued.  
Predefined integer valued attributes, such as <font face="sans-serif">  MPI_TAG_UB</font>,  
behave as if they  
were put by a call to the  
  deprecated Fortran routine <font face="sans-serif"> MPI_ATTR_PUT</font>,    
i.e.,   
in Fortran,  
<font face="sans-serif"> MPI_COMM_GET_ATTR(MPI_COMM_WORLD, MPI_TAG_UB, val, flag, ierr)</font>  
will return in <font face="sans-serif"> val</font>  
the upper bound for tag value; in C,  
<font face="sans-serif"> MPI_Comm_get_attr(MPI_COMM_WORLD, MPI_TAG_UB, &amp;p, &amp;flag)</font>  
will return in <font face="sans-serif"> p</font>  
a pointer to an int containing the upper bound for tag value.  
<P> 
Address-valued predefined attributes, such as <font face="sans-serif">  MPI_WIN_BASE</font>  
behave as if  
they were put by a C call,  
i.e.,   
in  Fortran,  
<font face="sans-serif"> MPI_WIN_GET_ATTR(win, MPI_WIN_BASE, val, flag, ierror)</font>  
will return in <font face="sans-serif"> val</font> the base address of the window,  
converted to an integer.  In C,  
<font face="sans-serif"> MPI_Win_get_attr(win, MPI_WIN_BASE, &amp;p, &amp;flag)</font>  
will return in <font face="sans-serif"> p</font>  
a pointer to the window base, cast to <tt>(void *)</tt>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The design is consistent with the behavior   
specified  
for predefined  
attributes, and ensures that no information is lost when attributes are  
passed from language to language.  
Because the language interoperability for  
  predefined attributes was defined based on <font face="sans-serif"> MPI_ATTR_PUT</font>,  
  this definition is kept for compatibility reasons although the  
  routine itself is now deprecated.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Implementations should tag attributes either as  
  (1)  
    address attributes, (2) as  
    <tt>INTEGER(KIND=MPI_ADDRESS_KIND)</tt> attributes or (3) as  
    <tt>INTEGER</tt> attributes, according to whether they were set in  
    (1) C (with <font face="sans-serif"> MPI_Attr_put</font> or  
    <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_set_attr</font>), (2) in Fortran with  
    <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_SET_ATTR</font> or (3) with the deprecated Fortran  
   
    routine <font face="sans-serif"> MPI_ATTR_PUT</font>.  
    Thus, the right choice can be made when the attribute is retrieved.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node448.htm#Node452"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node454.htm#Node454"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node454.htm#Node454"> Extra-State</a>
<b>Previous: </b><a href="node448.htm#Node452"> Reduce Operations</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

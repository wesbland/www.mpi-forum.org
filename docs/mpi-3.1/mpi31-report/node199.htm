<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-topol/topol.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Low-Level Topology Functions</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node199">187. Low-Level Topology Functions</span></h2>
<a href="node198.htm#Node198"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node191.htm#Node191"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node200.htm#Node200"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node191.htm#Node191"> Topology Constructors</a>
<b>Next: </b><a href="node200.htm#Node200"> </a>
<b>Previous: </b><a href="node198.htm#Node198"> Partitioning of Cartesian Structures</a>
<p>
  
The two additional functions introduced in this section can be used to  
implement all other topology functions. In general they will not be  
called by the user directly, unless he or she is creating additional  
virtual topology capability other than that provided by <font face="sans-serif"> MPI</font>.  
The two calls are both local.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CART_MAP(comm, ndims, dims, periods, newrank)</TD></TR>  
<TR><TD> IN  comm</TD><TD> input communicator (handle)</TD></TR>  
<TR><TD> IN  ndims</TD><TD> number of dimensions of Cartesian structure (integer)</TD></TR>  
<TR><TD> IN  dims</TD><TD> integer array of size <font face="sans-serif"> ndims</font> specifying the number of processes in each coordinate direction </TD></TR>  
<TR><TD> IN   periods</TD><TD> logical array of size <font face="sans-serif"> ndims</font> specifying the periodicity specification in each coordinate direction</TD></TR>  
<TR><TD> OUT  newrank</TD><TD> reordered rank of the calling process; <font face="sans-serif">  MPI_UNDEFINED</font> if calling process does not belong to grid (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank) <br></tt>  
<P> 
 <tt> MPI_Cart_map(comm, ndims, dims, periods, newrank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: ndims, dims(ndims) <br>LOGICAL, INTENT(IN) :: periods(ndims) <br>INTEGER, INTENT(OUT) :: newrank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_CART_MAP(COMM, NDIMS, DIMS, PERIODS, NEWRANK, IERROR)<br> INTEGER COMM, NDIMS, DIMS(*), NEWRANK, IERROR <br>LOGICAL PERIODS(*) <br></tt>  
  
<P> 
<font face="sans-serif"> MPI_CART_MAP</font>  
computes an ``optimal'' placement for the calling process on the  
physical machine.  A possible implementation of this function is to always  
return the rank of the calling process, that is, not to perform any reordering.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The function <font face="sans-serif"> MPI_CART_CREATE(comm, ndims, dims,  
periods, reorder, comm_cart)</font>, with <font face="sans-serif"> reorder = true</font> can be implemented by  
calling  
<font face="sans-serif"> MPI_CART_MAP(comm, ndims, dims, periods, newrank)</font>, then calling  
<font face="sans-serif"> MPI_COMM_SPLIT(comm, color, key, comm_cart)</font>, with  
<font face="sans-serif"> color = 0</font> if <font face="sans-serif"> newrank <img width=7 height=9 src="img175.gif" alt="Image file">
  
MPI_UNDEFINED</font>, <font face="sans-serif"> color = MPI_UNDEFINED</font> otherwise,  
and <font face="sans-serif"> key = newrank</font>. If <font face="sans-serif"> ndims</font> is zero  
then a zero-dimensional Cartesian topology is created.  
<P> 
The function <font face="sans-serif"> MPI_CART_SUB(comm, remain_dims, comm_new)</font> can be  
implemented by a call to <font face="sans-serif"> MPI_COMM_SPLIT(comm, color, key, comm_new)</font>,  
using a single number encoding of the lost dimensions as <font face="sans-serif"> color</font> and a  
single number encoding of the preserved dimensions as <font face="sans-serif"> key</font>.  
<P> 
All other Cartesian topology functions can be implemented locally, using  
the topology information that is cached with the communicator.  
 (<em> End of advice to implementors.</em>) <br> 
The corresponding function for  
graph structures is as follows.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_MAP(comm, nnodes, index, edges, newrank)</TD></TR>  
<TR><TD> IN  comm</TD><TD> input communicator (handle)</TD></TR>  
<TR><TD> IN  nnodes</TD><TD> number of graph nodes (integer)</TD></TR>  
<TR><TD> IN  index</TD><TD>integer array specifying the graph structure, see <font face="sans-serif"> MPI_GRAPH_CREATE</font></TD></TR>  
<TR><TD> IN  edges</TD><TD>integer array specifying the graph structure</TD></TR>  
<TR><TD> OUT  newrank</TD><TD> reordered rank of the calling process; <font face="sans-serif">  MPI_UNDEFINED</font> if the calling process does not belong to graph (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank) <br></tt>  
<P> 
 <tt> MPI_Graph_map(comm, nnodes, index, edges, newrank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*) <br>INTEGER, INTENT(OUT) :: newrank <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_GRAPH_MAP(COMM, NNODES, INDEX, EDGES, NEWRANK, IERROR)<br> INTEGER COMM, NNODES, INDEX(*), EDGES(*), NEWRANK, IERROR <br></tt>  
  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The function <font face="sans-serif"> MPI_GRAPH_CREATE(comm, nnodes, index, edges,  
reorder, comm_graph)</font>,  
with <font face="sans-serif"> reorder = true</font> can be implemented by calling  
<font face="sans-serif"> MPI_GRAPH_MAP(comm, nnodes, index, edges, newrank)</font>,  
then calling  
<font face="sans-serif"> MPI_COMM_SPLIT(comm, color, key, comm_graph)</font>, with <font face="sans-serif"> color = 0</font>  
if <font face="sans-serif"> newrank <img width=7 height=9 src="img176.gif" alt="Image file">
  
MPI_UNDEFINED</font>, <font face="sans-serif"> color = MPI_UNDEFINED</font>  
otherwise, and <font face="sans-serif"> key = newrank</font>.  
<P> 
All other graph topology functions can be implemented locally, using the  
topology information that is cached with the communicator.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node198.htm#Node198"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node191.htm#Node191"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node200.htm#Node200"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node191.htm#Node191"> Topology Constructors</a>
<b>Next: </b><a href="node200.htm#Node200"> </a>
<b>Previous: </b><a href="node198.htm#Node198"> Partitioning of Cartesian Structures</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

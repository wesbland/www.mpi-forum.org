<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Transfer of Handles</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node446">379. Transfer of Handles</span></h2>
<a href="node445.htm#Node445"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node447.htm#Node447"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node447.htm#Node447"> Status</a>
<b>Previous: </b><a href="node445.htm#Node445"> Initialization</a>
<p>
  
  
<P> 
Handles are passed between  
Fortran and C  
by using an explicit C wrapper to convert  
Fortran handles to C handles. There is no direct access to   
C  
handles in Fortran.   
<P> 
The type definition <font face="sans-serif">  MPI_Fint</font> is provided in   
C for an  
integer of the size that matches a Fortran <tt> INTEGER</tt>;  
usually, <font face="sans-serif">  MPI_Fint</font> will be equivalent to  
<tt> int</tt>.  
With the Fortran <tt>mpi</tt> module or the <tt>mpif.h</tt> include file,  
a Fortran handle is a Fortran <tt> INTEGER</tt> value  
that can be used in the following conversion functions.  
With the Fortran <tt>mpi_f08</tt> module,  
a Fortran handle is a <tt> BIND(C)</tt> derived type that contains   
an <tt> INTEGER</tt> component named <font face="sans-serif">  MPI_VAL</font>.  
This <tt> INTEGER</tt> value  
can be used in the following conversion functions.   
<P> 
The following functions are provided in C to convert from a  
Fortran communicator handle (which is an integer) to a C communicator handle, and vice versa.   
See also Section <a href="node37.htm#Node37">Functions and Macros 
</a>.  
<P> 
 <tt> MPI_Comm MPI_Comm_f2c(MPI_Fint comm) <br></tt>  
<P> 
If <font face="sans-serif"> comm</font> is a valid Fortran handle to a communicator,  
then <font face="sans-serif"> MPI_Comm_f2c</font> returns a valid C handle to that same  
communicator;  
if <font face="sans-serif"> comm = MPI_COMM_NULL</font> (Fortran value), then  
<font face="sans-serif"> MPI_Comm_f2c</font> returns a null C handle; if <font face="sans-serif"> comm</font>  
is an invalid Fortran handle, then <font face="sans-serif"> MPI_Comm_f2c</font>  
returns an invalid C handle.  
<P> 
 <tt> MPI_Fint MPI_Comm_c2f(MPI_Comm comm) <br></tt>  
<P> 
The function <font face="sans-serif"> MPI_Comm_c2f</font>  
translates a C communicator handle into a Fortran handle to the same  
communicator; it maps a null handle into a null handle and an invalid  
handle into an invalid handle.  
<P> 
Similar functions are provided for the other types of opaque objects.  
<P> 
 <tt> MPI_Datatype MPI_Type_f2c(MPI_Fint datatype) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Type_c2f(MPI_Datatype datatype) <br></tt>  
<P> 
 <tt> MPI_Group MPI_Group_f2c(MPI_Fint group) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Group_c2f(MPI_Group group) <br></tt>  
<P> 
 <tt> MPI_Request MPI_Request_f2c(MPI_Fint request) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Request_c2f(MPI_Request request) <br></tt>  
<P> 
 <tt> MPI_File MPI_File_f2c(MPI_Fint file) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_File_c2f(MPI_File file) <br></tt>  
<P> 
 <tt> MPI_Win MPI_Win_f2c(MPI_Fint win) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Win_c2f(MPI_Win win) <br></tt>  
<P> 
 <tt> MPI_Op MPI_Op_f2c(MPI_Fint op) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Op_c2f(MPI_Op op) <br></tt>  
<P> 
 <tt> MPI_Info MPI_Info_f2c(MPI_Fint info) <br></tt>  
<P> 
 <tt> MPI_Fint MPI_Info_c2f(MPI_Info info) <br></tt>  
 <P> 
 <tt> MPI_Errhandler MPI_Errhandler_f2c(MPI_Fint errhandler) <br></tt>  
 <P> 
 <tt> MPI_Fint MPI_Errhandler_c2f(MPI_Errhandler errhandler) <br></tt>  
<P> 
 <tt> MPI_Message MPI_Message_f2c(MPI_Fint message) <br></tt>  
 <P> 
 <tt> MPI_Fint MPI_Message_c2f(MPI_Message message) <br></tt>  
<P> 
<br><b> Example</b>  
The example below illustrates how the Fortran <font face="sans-serif"> MPI</font> function  
<font face="sans-serif"> MPI_TYPE_COMMIT</font> can be implemented by wrapping the C <font face="sans-serif"> MPI</font>  
function <font face="sans-serif"> MPI_Type_commit</font> with a C wrapper to do handle  
conversions.  
In this example a Fortran-C interface is assumed where a Fortran function is  
all upper case when referred to from C and arguments are passed by addresses.  
<P> 
  
<br> 
<pre><tt>! FORTRAN PROCEDURE 
SUBROUTINE MPI_TYPE_COMMIT( DATATYPE, IERR) 
INTEGER :: DATATYPE, IERR 
CALL MPI_X_TYPE_COMMIT(DATATYPE, IERR) 
RETURN 
END 
</tt></pre> 
<br> 
<pre><tt>/* C wrapper */ 
 
void MPI_X_TYPE_COMMIT( MPI_Fint *f_handle, MPI_Fint *ierr) 
{ 
   MPI_Datatype datatype; 
    
   datatype = MPI_Type_f2c( *f_handle); 
   *ierr = (MPI_Fint)MPI_Type_commit( &amp;datatype); 
   *f_handle = MPI_Type_c2f(datatype); 
   return; 
} 
</tt></pre> 
The same approach can be used for all other <font face="sans-serif"> MPI</font> functions.  
The call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_f2c</font> (resp. <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_c2f</font>)  
can be  
omitted when the handle is an  OUT (resp.  IN) argument, rather than  
 INOUT.  
  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The design here provides a convenient solution for the prevalent case,  
where a C wrapper is used to allow Fortran code to call a C  
library, or C code to call a Fortran library.  
The use of C wrappers is much more likely than the use of Fortran  
wrappers, because it is much more likely that a variable of type  
<font face="sans-serif">  INTEGER</font> can be passed to C,  than a C handle  
can be passed to Fortran.  
<P> 
Returning the converted value as a function value rather than  
through the argument list allows the generation of efficient  
inlined code when these functions are simple (e.g., the identity).  
The conversion function in the wrapper  
does not catch an invalid handle argument.  Instead, an invalid handle  
is passed below to the library function, which, presumably, checks its  
input arguments.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node445.htm#Node445"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node447.htm#Node447"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node447.htm#Node447"> Status</a>
<b>Previous: </b><a href="node445.htm#Node445"> Initialization</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Caching</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node172">163. Caching</span></h1>
<a href="node169.htm#Node171"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node173.htm#Node173"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node173.htm#Node173"> Functionality</a>
<b>Previous: </b><a href="node169.htm#Node171"> Example 2:  Three-Group ``Ring''</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> provides a ``caching'' facility that allows an application to  
attach arbitrary pieces of information, called <b> attributes</b>, to  
three kinds of <font face="sans-serif"> MPI</font> objects, communicators,  
windows, and datatypes.   
More precisely, the caching  
facility allows a portable library to do the following:  
<ul> 
 
<li>pass information between calls by associating it  
  with an <font face="sans-serif"> MPI</font> intra- or inter-communicator,   
window, or datatype,  
 
<li>quickly retrieve that information, and  
 
<li>be guaranteed that out-of-date information is never retrieved, even if  
 the object is freed and its handle subsequently reused by <font face="sans-serif"> MPI</font>.  
</ul> 
<br> 
The caching capabilities, in some form, are required by built-in <font face="sans-serif"> MPI</font> routines  
such as collective communication and application topology.  Defining an  
interface to these capabilities as part of the <font face="sans-serif"> MPI</font> standard is valuable  
because it permits routines like collective communication and application  
topologies to be implemented as portable code, and also because it makes <font face="sans-serif"> MPI</font>  
more extensible by allowing user-written routines to use standard <font face="sans-serif"> MPI</font> calling  
sequences.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The communicator <font face="sans-serif">  MPI_COMM_SELF</font> is a suitable choice for posting  
process-local attributes, via this  
attribute-caching mechanism.   
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Rationale.</em>  
<P> 
In one extreme   
one  
can allow caching on all opaque handles.  The other  
extreme is to only allow it on communicators.  Caching has a cost  
associated with it and should only be allowed when it is clearly needed and  
the increased cost is modest.    
This is the reason that windows and datatypes were  
added but not other handles.  
 (<em> End of rationale.</em>) <br> 
One difficulty  
is the potential for size differences between  
Fortran integers and C pointers.    
For this reason, the   
Fortran versions of these routines   
use integers of kind <font face="sans-serif">  MPI_ADDRESS_KIND</font>.  
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations should raise an error when a keyval  
that was created by a call to <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_CREATE_KEYVAL</font> is  
used with an object of the wrong type with a call to  
<font face="sans-serif"> MPI_YYY_GET_ATTR</font>, <font face="sans-serif"> MPI_YYY_SET_ATTR</font>, <font face="sans-serif"> MPI_YYY_DELETE_ATTR</font>, or  
<font face="sans-serif"> MPI_YYY_FREE_KEYVAL</font>. To do so, it is necessary to maintain, with  
each keyval, information on the type of the associated user  
function.  
 (<em> End of advice to implementors.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node169.htm#Node171"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node173.htm#Node173"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node173.htm#Node173"> Functionality</a>
<b>Previous: </b><a href="node169.htm#Node171"> Example 2:  Three-Group ``Ring''</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

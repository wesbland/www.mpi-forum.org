<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>One-Sided Communications Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node493">419. One-Sided Communications Fortran 2008 Bindings</span></h2>
<a href="node492.htm#Node492"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node494.htm#Node494"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node494.htm#Node494"> External Interfaces Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node492.htm#Node492"> Process Creation and Management Fortran 2008 Bindings</a>
<p>
 <tt> MPI_Accumulate(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Compare_and_swap(origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: compare_addr <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: target_rank <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Fetch_and_op(origin_addr, result_addr, datatype, target_rank, target_disp, op, win, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: target_rank <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Get(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Get_accumulate(origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr <br>INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Put(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Raccumulate(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Rget(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Rget_accumulate(origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr <br>INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Rput(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr <br>INTEGER, INTENT(IN) :: origin_count, target_rank, target_count <br>TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp <br>TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Request), INTENT(OUT) :: request <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_allocate(size, disp_unit, info, comm, baseptr, win, ierror) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size <br>INTEGER, INTENT(IN) :: disp_unit <br>TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(C_PTR), INTENT(OUT) :: baseptr <br>TYPE(MPI_Win), INTENT(OUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_allocate_shared(size, disp_unit, info, comm, baseptr, win, ierror) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size <br>INTEGER, INTENT(IN) :: disp_unit <br>TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(C_PTR), INTENT(OUT) :: baseptr <br>TYPE(MPI_Win), INTENT(OUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_attach(win, base, size, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_complete(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_create(base, size, disp_unit, info, comm, win, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size <br>INTEGER, INTENT(IN) :: disp_unit <br>TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Win), INTENT(OUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_create_dynamic(info, comm, win, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: info <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Win), INTENT(OUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_detach(win, base, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_fence(assert, win, ierror) <br> INTEGER, INTENT(IN) :: assert <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_flush(rank, win, ierror) <br> INTEGER, INTENT(IN) :: rank <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_flush_all(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_flush_local(rank, win, ierror) <br> INTEGER, INTENT(IN) :: rank <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_flush_local_all(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_free(win, ierror) <br> TYPE(MPI_Win), INTENT(INOUT) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_get_group(win, group, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Group), INTENT(OUT) :: group <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_get_info(win, info_used, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Info), INTENT(OUT) :: info_used <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_lock(lock_type, rank, assert, win, ierror) <br> INTEGER, INTENT(IN) :: lock_type, rank, assert <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_lock_all(assert, win, ierror) <br> INTEGER, INTENT(IN) :: assert <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_post(group, assert, win, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: assert <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_set_info(win, info, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>TYPE(MPI_Info), INTENT(IN) :: info <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_shared_query(win, rank, size, disp_unit, baseptr, ierror) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, INTENT(IN) :: rank <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size <br>INTEGER, INTENT(OUT) :: disp_unit <br>TYPE(C_PTR), INTENT(OUT) :: baseptr <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_start(group, assert, win, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: group <br>INTEGER, INTENT(IN) :: assert <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_sync(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_test(win, flag, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_unlock(rank, win, ierror) <br> INTEGER, INTENT(IN) :: rank <br>TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_unlock_all(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_Win_wait(win, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: win <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
<P> 

<P>
<hr>
<a href="node492.htm#Node492"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node484.htm#Node484"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node494.htm#Node494"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node484.htm#Node484"> Fortran 2008 Bindings with the mpi_f08 Module</a>
<b>Next: </b><a href="node494.htm#Node494"> External Interfaces Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node492.htm#Node492"> Process Creation and Management Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

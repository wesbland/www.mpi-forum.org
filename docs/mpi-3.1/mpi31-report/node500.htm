<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Datatypes Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node500">426. Datatypes Fortran Bindings</span></h2>
<a href="node499.htm#Node499"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node501.htm#Node501"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node501.htm#Node501"> Collective Communication Fortran Bindings</a>
<b>Previous: </b><a href="node499.htm#Node499"> Point-to-Point Communication Fortran Bindings</a>
<p>
 <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_AINT_ADD(BASE, DISP) <br> INTEGER(KIND=MPI_ADDRESS_KIND) BASE, DISP <br></tt>  
 <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_AINT_DIFF(ADDR1, ADDR2) <br> INTEGER(KIND=MPI_ADDRESS_KIND) ADDR1, ADDR2 <br></tt>  
 <tt> MPI_GET_ADDRESS(LOCATION, ADDRESS, IERROR)<br> &lt;type&gt; LOCATION(*) <br>INTEGER IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ADDRESS <br></tt>  
 <tt> MPI_GET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)<br> INTEGER  STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERROR <br></tt>  
 <tt> MPI_GET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)<br> INTEGER  STATUS(MPI_STATUS_SIZE), DATATYPE, IERROR<br>INTEGER(KIND=MPI_COUNT_KIND) COUNT <br></tt>  
 <tt> MPI_PACK(INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, COMM, IERROR)<br> &lt;type&gt; INBUF(*), OUTBUF(*)<br>INTEGER INCOUNT, DATATYPE, OUTSIZE, POSITION,  COMM, IERROR <br></tt>  
 <tt> MPI_PACK_EXTERNAL(DATAREP, INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, IERROR)<br> INTEGER INCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) OUTSIZE, POSITION <br>CHARACTER*(*) DATAREP <br>&lt;type&gt; INBUF(*), OUTBUF(*) <br></tt>  
 <tt> MPI_PACK_EXTERNAL_SIZE(DATAREP, INCOUNT, DATATYPE, SIZE, IERROR)<br> INTEGER INCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) SIZE <br>CHARACTER*(*) DATAREP  <br></tt>  
 <tt> MPI_PACK_SIZE(INCOUNT, DATATYPE, COMM, SIZE, IERROR)<br> INTEGER INCOUNT, DATATYPE, COMM, SIZE, IERROR <br></tt>  
 <tt> MPI_TYPE_COMMIT(DATATYPE, IERROR)<br> INTEGER  DATATYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_CONTIGUOUS(COUNT, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER  COUNT, OLDTYPE, NEWTYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_CREATE_DARRAY(SIZE, RANK, NDIMS, ARRAY_OF_GSIZES, ARRAY_OF_DISTRIBS, ARRAY_OF_DARGS, ARRAY_OF_PSIZES, ORDER, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER SIZE, RANK, NDIMS, ARRAY_OF_GSIZES(*), ARRAY_OF_DISTRIBS(*),<br>    ARRAY_OF_DARGS(*), ARRAY_OF_PSIZES(*), ORDER, OLDTYPE, NEWTYPE,<br>    IERROR <br></tt>  
 <tt> MPI_TYPE_CREATE_HINDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), OLDTYPE, NEWTYPE, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_DISPLACEMENTS(*) <br></tt>  
 <tt> MPI_TYPE_CREATE_HINDEXED_BLOCK(COUNT, BLOCKLENGTH, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER COUNT, BLOCKLENGTH, OLDTYPE, NEWTYPE, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_DISPLACEMENTS(*) <br></tt>  
 <tt> MPI_TYPE_CREATE_HVECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER COUNT, BLOCKLENGTH, OLDTYPE, NEWTYPE, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) STRIDE <br></tt>  
 <tt> MPI_TYPE_CREATE_INDEXED_BLOCK(COUNT, BLOCKLENGTH, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR) <br> INTEGER COUNT, BLOCKLENGTH, ARRAY_OF_DISPLACEMENTS(*), OLDTYPE,<br>    NEWTYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_CREATE_RESIZED(OLDTYPE, LB, EXTENT, NEWTYPE, IERROR)<br> INTEGER OLDTYPE,  NEWTYPE, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) LB, EXTENT <br></tt>  
 <tt> MPI_TYPE_CREATE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR)<br> INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_TYPES(*), NEWTYPE,<br>    IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_DISPLACEMENTS(*) <br></tt>  
 <tt> MPI_TYPE_CREATE_SUBARRAY(NDIMS, ARRAY_OF_SIZES, ARRAY_OF_SUBSIZES,<br>    ARRAY_OF_STARTS, ORDER, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER NDIMS, ARRAY_OF_SIZES(*), ARRAY_OF_SUBSIZES(*),<br>    ARRAY_OF_STARTS(*), ORDER, OLDTYPE, NEWTYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_DUP(OLDTYPE, NEWTYPE, IERROR)<br> INTEGER OLDTYPE, NEWTYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_FREE(DATATYPE, IERROR)<br> INTEGER  DATATYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_GET_CONTENTS(DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES, ARRAY_OF_INTEGERS, ARRAY_OF_ADDRESSES, ARRAY_OF_DATATYPES, IERROR)<br> INTEGER DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES, ARRAY_OF_INTEGERS(*), ARRAY_OF_DATATYPES(*), IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_ADDRESSES(*) <br></tt>  
 <tt> MPI_TYPE_GET_ENVELOPE(DATATYPE, NUM_INTEGERS, NUM_ADDRESSES, NUM_DATATYPES, COMBINER, IERROR)<br> INTEGER DATATYPE, NUM_INTEGERS, NUM_ADDRESSES, NUM_DATATYPES, COMBINER, IERROR <br></tt>  
 <tt> MPI_TYPE_GET_EXTENT(DATATYPE, LB, EXTENT, IERROR)<br> INTEGER  DATATYPE,  IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) LB, EXTENT <br></tt>  
 <tt> MPI_TYPE_GET_EXTENT_X(DATATYPE, LB, EXTENT, IERROR)<br> INTEGER  DATATYPE,  IERROR<br>INTEGER(KIND=MPI_COUNT_KIND) LB, EXTENT <br></tt>  
 <tt> MPI_TYPE_GET_TRUE_EXTENT(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR)<br> INTEGER DATATYPE,  IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) TRUE_LB, TRUE_EXTENT <br></tt>  
 <tt> MPI_TYPE_GET_TRUE_EXTENT_X(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR)<br> INTEGER DATATYPE,  IERROR<br>INTEGER(KIND=MPI_COUNT_KIND) TRUE_LB, TRUE_EXTENT <br></tt>  
 <tt> MPI_TYPE_INDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_DISPLACEMENTS(*),<br>    OLDTYPE, NEWTYPE, IERROR <br></tt>  
 <tt> MPI_TYPE_SIZE(DATATYPE, SIZE, IERROR)<br> INTEGER DATATYPE, SIZE, IERROR <br></tt>  
 <tt> MPI_TYPE_SIZE_X(DATATYPE, SIZE, IERROR)<br> INTEGER DATATYPE, IERROR<br>INTEGER(KIND=MPI_COUNT_KIND) SIZE <br></tt>  
 <tt> MPI_TYPE_VECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR)<br> INTEGER  COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR <br></tt>  
 <tt> MPI_UNPACK(INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, COMM, IERROR)<br>  &lt;type&gt; INBUF(*), OUTBUF(*) <br>INTEGER INSIZE, POSITION, OUTCOUNT, DATATYPE, COMM, IERROR <br></tt>  
 <tt> MPI_UNPACK_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, IERROR)<br> INTEGER OUTCOUNT, DATATYPE, IERROR <br>INTEGER(KIND=MPI_ADDRESS_KIND) INSIZE, POSITION <br>CHARACTER*(*) DATAREP <br>&lt;type&gt; INBUF(*), OUTBUF(*) <br></tt>  
<P> 

<P>
<hr>
<a href="node499.htm#Node499"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node498.htm#Node498"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node501.htm#Node501"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node498.htm#Node498"> Fortran Bindings with mpif.h or the mpi Module</a>
<b>Next: </b><a href="node501.htm#Node501"> Collective Communication Fortran Bindings</a>
<b>Previous: </b><a href="node499.htm#Node499"> Point-to-Point Communication Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

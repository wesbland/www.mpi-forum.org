<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Probe</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node69">64. Probe</span></h2>
<a href="node68.htm#Node68"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node70.htm#Node70"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node70.htm#Node70"> Matching Probe</a>
<b>Previous: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<p>
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IPROBE(source, tag, comm, flag, status)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT flag</TD><TD> (logical)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Iprobe(source, tag, comm, flag, status, ierror) <br> INTEGER, INTENT(IN) :: source, tag <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>LOGICAL, INTENT(OUT) :: flag <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR)<br> LOGICAL  FLAG <br>INTEGER  SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_IPROBE(source, tag, comm, flag, status)</font>  
returns <font face="sans-serif"> flag = true</font>  
if there is a message that can be received  
and that matches the pattern specified by the  
arguments <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>, and <font face="sans-serif"> comm</font>.  
The call matches the same message  
that would have been received by a call to <font face="sans-serif"> MPI_RECV(<i>...</i>, source, tag,  
comm, status)</font> executed at the same point in the program, and returns in  
<font face="sans-serif"> status</font> the same  
value that would have been returned by <font face="sans-serif"> MPI_RECV()</font>.  
Otherwise, the call returns <font face="sans-serif"> flag = false</font>, and leaves <font face="sans-serif"> status</font>  
undefined.  
<P> 
If <font face="sans-serif"> MPI_IPROBE</font> returns <font face="sans-serif"> flag = true</font>,  
then the content of the status object can be subsequently  
accessed as described in Section <a href="node51.htm#Node51">Return Status 
</a> to find the  
source, tag and length of the probed message.  
<P> 
A subsequent receive executed with the same communicator, and the source and  
tag returned in status by <font face="sans-serif"> MPI_IPROBE</font> will receive the message that  
was matched by the probe, if no other intervening receive occurs after the  
probe, and the send is not successfully cancelled before the receive.  
If the receiving process is multithreaded, it is the user's  
responsibility to ensure that the last condition holds.  
<P> 
The <font face="sans-serif"> source</font> argument of <font face="sans-serif"> MPI_PROBE</font> can be  
<font face="sans-serif">  MPI_ANY_SOURCE</font>, and the <font face="sans-serif"> tag</font> argument can be  
<font face="sans-serif">  MPI_ANY_TAG</font>, so that one can probe for messages from an arbitrary  
source and/or with  
an arbitrary tag.  However, a specific communication context  
must be provided with the <font face="sans-serif"> comm</font> argument.  
<P> 
It is not necessary to receive a message immediately after it has been  
probed for, and the  
same message may be probed for several times before it is received.  
<P> 
A probe with <font face="sans-serif">  MPI_PROC_NULL</font> as source returns flag = true, and the status object returns source = <font face="sans-serif">  MPI_PROC_NULL</font>,   
tag = <font face="sans-serif">  MPI_ANY_TAG</font>, and count = 0;   
see Section <a href="node75.htm#Node75">Null Processes 
</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_PROBE(source, tag, comm, status)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Probe(source, tag, comm, status, ierror) <br> INTEGER, INTENT(IN) :: source, tag <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_PROBE(SOURCE, TAG, COMM, STATUS, IERROR)<br> INTEGER SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_PROBE</font> behaves like <font face="sans-serif"> MPI_IPROBE</font> except that it is a blocking  
call that returns only after a matching message has been found.  
<P> 
The <font face="sans-serif"> MPI</font> implementation of <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font> needs  
to guarantee progress:  
if a call to <font face="sans-serif"> MPI_PROBE</font> has been issued by a process, and a send that  
matches the probe has been initiated by some process, then the call to  
<font face="sans-serif"> MPI_PROBE</font> will return, unless the message is received by another  
concurrent receive operation (that is executed by another thread at the probing  
process).   Similarly, if a process busy waits with  
<font face="sans-serif"> MPI_IPROBE</font> and a matching message has been issued,  
then the call to  
<font face="sans-serif"> MPI_IPROBE</font> will eventually return <font face="sans-serif"> flag = true</font>  
unless the message is received by another concurrent receive  
operation or matched by a concurrent matched probe.  
<P> 
<br><b> Example</b>  
  
  
  
  
  
<P> 
Use blocking probe to wait for an incoming message.  
<P> 
<br> 
<pre><tt>       CALL MPI_COMM_RANK(comm, rank, ierr) 
       IF (rank.EQ.0) THEN 
           CALL MPI_SEND(i, 1, MPI_INTEGER, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.1) THEN 
           CALL MPI_SEND(x, 1, MPI_REAL, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.2) THEN 
           DO i=1, 2 
              CALL MPI_PROBE(MPI_ANY_SOURCE, 0, 
                             comm, status, ierr) 
              IF (status(MPI_SOURCE) .EQ. 0) THEN 
100               CALL MPI_RECV(i, 1, MPI_INTEGER, 0, 0, comm, status, ierr) 
              ELSE 
200               CALL MPI_RECV(x, 1, MPI_REAL, 1, 0, comm, status, ierr) 
              END IF 
           END DO 
       END IF 
</tt></pre> 
Each message is received with the right type.  
  
<P> 
<br><b> Example</b>  
  
  
  
  
  
A similar program to the previous example, but now it  
has a problem.  
<P> 
<br> 
<pre><tt>       CALL MPI_COMM_RANK(comm, rank, ierr) 
       IF (rank.EQ.0) THEN 
            CALL MPI_SEND(i, 1, MPI_INTEGER, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.1) THEN 
            CALL MPI_SEND(x, 1, MPI_REAL, 2, 0, comm, ierr) 
       ELSE IF (rank.EQ.2) THEN 
           DO i=1, 2 
              CALL MPI_PROBE(MPI_ANY_SOURCE, 0, 
                              comm, status, ierr) 
              IF (status(MPI_SOURCE) .EQ. 0) THEN 
100                CALL MPI_RECV(i, 1, MPI_INTEGER, MPI_ANY_SOURCE, 
                                 0, comm, status, ierr) 
              ELSE 
200                CALL MPI_RECV(x, 1, MPI_REAL, MPI_ANY_SOURCE, 
                                 0, comm, status, ierr) 
              END IF 
           END DO 
       END IF 
</tt></pre> 
In Example <a href="node69.htm#Node69">Probe 
</a>,   
the two receive calls in statements labeled 100 and 200 in   
Example <a href="node69.htm#Node69">Probe 
</a>  
slightly modified,   
using <font face="sans-serif">  MPI_ANY_SOURCE</font> as the <font face="sans-serif"> source</font>  
argument.  
The program is now incorrect: the receive operation may receive a message that  
is distinct from the message probed by the preceding call to  
<font face="sans-serif"> MPI_PROBE</font>.  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In a multithreaded <font face="sans-serif"> MPI</font> program, <font face="sans-serif"> MPI_PROBE</font> and  
<font face="sans-serif"> MPI_IPROBE</font> might need special care.  
If a thread probes for a message and then immediately posts a matching  
receive, the receive may match a message other than that found by the probe since another thread could concurrently receive that original  
message [<a href="node522.htm#-Bib29">29</a>].  
<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> solve this problem by  
matching the incoming message so that it may only be received with  
<font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font> on the corresponding message handle.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A call to <font face="sans-serif"> MPI_PROBE(source, tag, comm, status)</font> will match the  
message that would have been received by a call to <font face="sans-serif"> MPI_RECV(<i>...</i>,  
source, tag, comm, status)</font> executed at the same point.  
Suppose  
that this message has source <font face="sans-serif"> s</font>, tag <font face="sans-serif"> t</font> and communicator  
<font face="sans-serif"> c</font>.  If the  
tag argument in the probe call has value <font face="sans-serif">  MPI_ANY_TAG</font>  
then the message probed  
will be the earliest pending message from source <font face="sans-serif"> s</font>  
with communicator <font face="sans-serif"> c</font> and any tag; in any case, the message probed will be the  
earliest pending message from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and  
communicator  
<font face="sans-serif"> c</font> (this is  
the message that would have been received, so as to preserve message order).  
This message continues as the earliest pending message  
from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and communicator <font face="sans-serif"> c</font>, until it is received.  
A receive operation subsequent to the probe that uses the same communicator as the  
probe and uses the tag and source values returned by the probe, must receive  
this message, unless it has already been received by another receive operation.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node68.htm#Node68"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node68.htm#Node68"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node70.htm#Node70"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<b>Next: </b><a href="node70.htm#Node70"> Matching Probe</a>
<b>Previous: </b><a href="node68.htm#Node68"> Probe and Cancel</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

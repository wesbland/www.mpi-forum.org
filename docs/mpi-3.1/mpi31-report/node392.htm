<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Variable Categorization</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node392">339. Variable Categorization</span></h2>
<a href="node384.htm#Node391"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node393.htm#Node393"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node393.htm#Node393"> Return Codes for the <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Previous: </b><a href="node384.htm#Node391"> Example: Tool to Detect Receives with Long Unexpected Message Queues</a>
<p>
  
<P> 
<font face="sans-serif"> MPI</font> implementations can optionally group performance and control variables into  
categories to express logical relationships between various  
variables. For example, an <font face="sans-serif"> MPI</font> implementation could group all  
control and performance variables that refer to message transfers in  
the <font face="sans-serif"> MPI</font> implementation and thereby distinguish them from variables  
that refer to local resources such as memory allocations or other  
interactions with the operating system.  
<P> 
Categories can also contain other categories to form a hierarchical  
grouping. Categories can never include themselves, either directly or  
transitively within other included categories.  Expanding on the  
example above, this allows <font face="sans-serif"> MPI</font> to refine the grouping of variables  
referring to message transfers into variables to control and to monitor  
message queues, message matching activities and communication  
protocols. Each of these groups of variables would be represented by a  
separate category and these categories would then be listed in a  
single category representing variables for message transfers.  
<P> 
The category information may be queried in a fashion similar to the  
mechanism for querying variable information.  The <font face="sans-serif"> MPI</font> implementation  
exports a set of <i>N</i> categories via the <font face="sans-serif"> MPI</font> tool information interface.  If <i>N=0</i>,  
then the <font face="sans-serif"> MPI</font> implementation does not export any categories,  
otherwise the provided categories are indexed from <i>0</i> to <i>N-1</i>. This  
index number is used in subsequent calls to functions of the  
<font face="sans-serif"> MPI</font> tool information interface to  
identify the individual categories.  
<P> 
An <font face="sans-serif"> MPI</font> implementation is permitted to increase the number of  
categories during the execution of an <font face="sans-serif"> MPI</font> program when new  
categories become available through dynamic loading.  However, <font face="sans-serif"> MPI</font>  
implementations are not allowed to change the index of a category or  
delete it once it has been added to the set.  
<P> 
Similarly, <font face="sans-serif"> MPI</font> implementations are allowed to add variables to  
categories, but they are not allowed to remove variables from  
categories or change the order in which they are returned.  
<P> 
The following function can be used to query the number of categories,  
<i>N</i>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_GET_NUM(num_cat)</TD></TR>  
<TR><TD> OUT num_cat</TD><TD>current number of categories (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_get_num(int *num_cat) <br></tt>  
<P> 
Individual category information can then be queried by calling the  
following function:  
<P> 
<P><img width=358 height=303 src="img218.gif" alt="Image file"><P>
 <tt> int MPI_T_category_get_info(int cat_index, char *name, int *name_len, char *desc, int *desc_len, int *num_cvars, int *num_pvars, int *num_categories) <br></tt>  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the category as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
The routine is required to return a name of at least length one. This  
name must be unique with respect to all other names for   
categories used by the <font face="sans-serif"> MPI</font> implementation.  
<P> 
If any <font face="sans-serif">  OUT</font> parameter to <font face="sans-serif"> MPI_T_CATEGORY_GET_INFO</font> is a <font face="sans-serif">  NULL</font> pointer, the implementation will ignore the parameter and not return a value for the parameter.  
<P> 
 The arguments <font face="sans-serif"> desc</font> and <font face="sans-serif"> desc_len</font> are used to return the description of the category as described in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>.   
<P> 
Returning a description is optional. If an <font face="sans-serif"> MPI</font> implementation  
decides not to return a description, the first character for  
<font face="sans-serif"> desc</font> must be set to the null character and <font face="sans-serif"> desc_len</font>  
must be set to one at the return of this call.  
<P> 
The function returns the number of control variables, performance  
variables and other categories contained in the queried category in  
the arguments <font face="sans-serif"> num_cvars</font>,  
<font face="sans-serif"> num_pvars</font>, and <font face="sans-serif"> num_categories</font>,  
respectively.  
<P> 
If the name of a category is equivalent across connected  
processes, then the returned description must be equivalent.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_GET_INDEX(name, cat_index)</TD></TR>  
<TR><TD> IN name</TD><TD>the name of the category (string)</TD></TR>  
<TR><TD> OUT cat_index</TD><TD>the index of the category (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_get_index(const char *name, int *cat_index) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CATEGORY_GET_INDEX</font> is a function for   
retrieving the index of a category given a known category name. The   
<font face="sans-serif"> name</font> parameter is provided by the caller, and <font face="sans-serif"> cat_index</font>   
is returned by the <font face="sans-serif"> MPI</font> implementation. The <font face="sans-serif"> name</font> parameter   
is a string terminated with a null character.  
<P> 
This routine returns <font face="sans-serif">  MPI_SUCCESS</font> on success and returns   
<font face="sans-serif">  MPI_T_ERR_INVALID_NAME</font> if <font face="sans-serif"> name</font> does not match the   
name of any category provided by the implementation at the time of the call.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This routine is provided to enable fast retrieval of a category index by   
a tool, assuming it knows the name of the category for which it is looking.   
The number of categories exposed by the implementation can change over time,   
so it is not possible for the tool to simply iterate over the list of   
categories once at initialization. Although using <font face="sans-serif"> MPI</font> implementation   
specific category names is not portable across <font face="sans-serif"> MPI</font> implementations,   
tool developers may choose to take this route for lower overhead at runtime   
because the tool will not have to iterate over the entire set of categories to   
find a specific one.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_GET_CVARS(cat_index, len, indices)</TD></TR>  
<TR><TD> IN cat_index</TD><TD>index of the category to be queried, in the range <i>[0,N-1]</i> (integer)</TD></TR>  
<TR><TD> IN len</TD><TD>the length of the indices array (integer)</TD></TR>  
<TR><TD> OUT indices</TD><TD>an integer array of size <font face="sans-serif"> len</font>, indicating control variable indices (array of integers)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_get_cvars(int cat_index, int len, int indices[]) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CATEGORY_GET_CVARS</font> can be used to query which   
control variables are contained in a particular category.  A category  
contains zero or more control variables.    
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_GET_PVARS(cat_index, len, indices)</TD></TR>  
<TR><TD> IN cat_index</TD><TD>index of the category to be queried, in the range <i>[0,N-1]</i> (integer)</TD></TR>  
<TR><TD> IN len</TD><TD>the length of the indices array (integer)</TD></TR>  
<TR><TD> OUT indices</TD><TD>an integer array of size <font face="sans-serif"> len</font>, indicating performance variable indices (array of integers)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_get_pvars(int cat_index, int len, int indices[]) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CATEGORY_GET_PVARS</font> can be used to query which   
performance variables are contained in a particular category.  A  
category contains zero or more performance variables.    
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_GET_CATEGORIES(cat_index, len, indices)</TD></TR>  
<TR><TD> IN cat_index</TD><TD>index of the category to be queried, in the range <i>[0,N-1]</i> (integer)</TD></TR>  
<TR><TD> IN len</TD><TD>the length of the indices array (integer)</TD></TR>  
<TR><TD> OUT indices</TD><TD>an integer array of size <font face="sans-serif"> len</font>, indicating category indices (array of integers)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_get_categories(int cat_index, int len, int indices[]) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CATEGORY_GET_CATEGORIES</font> can be used to query which   
other categories are contained in a particular category.  A category  
contains zero or more other categories.  
<P> 
As mentioned above, <font face="sans-serif"> MPI</font> implementations can grow the number of  
categories as well as the number of variables or other categories within  
a category. In order to allow users of the <font face="sans-serif"> MPI</font> tool information interface to check quickly whether new categories have been added or new variables  
or categories have been added to a category, <font face="sans-serif"> MPI</font> maintains a  
virtual timestamp. This timestamp is monotonically increasing during  
the execution and is returned by the following function:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CATEGORY_CHANGED(stamp)</TD></TR>  
<TR><TD> OUT stamp</TD><TD>a virtual time stamp to indicate the last change to the categories (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_T_category_changed(int *stamp) <br></tt>  
<P> 
If two subsequent calls to this routine return the same timestamp, it  
is guaranteed that the category information has not changed between  
the two calls. If the timestamp retrieved from the second call is higher,  
then some categories have been added or expanded.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The timestamp value is purely virtual and only intended to check for changes in  
the category information. It should not be used for any other purpose.  
 (<em> End of advice to users.</em>) <br> 
The index values returned in <font face="sans-serif"> indices</font> by  
<font face="sans-serif"> MPI_T_CATEGORY_GET_CVARS</font>,   
<font face="sans-serif"> MPI_T_CATEGORY_GET_PVARS</font> and  
<font face="sans-serif"> MPI_T_CATEGORY_GET_CATEGORIES</font>  
can be used as input to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>,  
<font face="sans-serif"> MPI_T_PVAR_GET_INFO</font> and   
<font face="sans-serif"> MPI_T_CATEGORY_GET_INFO</font>, respectively.  
<P> 
The user is responsible for allocating the arrays passed into the   
functions  
<font face="sans-serif"> MPI_T_CATEGORY_GET_CVARS</font>,   
<font face="sans-serif"> MPI_T_CATEGORY_GET_PVARS</font> and  
<font face="sans-serif"> MPI_T_CATEGORY_GET_CATEGORIES</font>.   
Starting from array index <i>0</i>, each function writes up to <font face="sans-serif"> len</font> elements   
into the array. If the category contains more than <font face="sans-serif"> len</font> elements, the   
function returns an arbitrary subset of size len. Otherwise, the entire   
set of elements is returned in the beginning entries of the array, and   
any remaining array entries are not modified.  
<P> 

<P>
<hr>
<a href="node384.htm#Node391"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node372.htm#Node372"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node393.htm#Node393"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node372.htm#Node372"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node393.htm#Node393"> Return Codes for the <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Previous: </b><a href="node384.htm#Node391"> Example: Tool to Detect Receives with Long Unexpected Message Queues</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

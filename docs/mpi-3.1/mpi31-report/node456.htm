<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Interlanguage Communication</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node456">385. Interlanguage Communication</span></h2>
<a href="node455.htm#Node455"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node457.htm#Node457"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node457.htm#Node457"> Language Bindings Summary</a>
<b>Previous: </b><a href="node455.htm#Node455"> Constants</a>
<p>
  
  
The type matching rules for communication in <font face="sans-serif"> MPI</font> are not changed:  
the datatype specification for each item sent should match,  
in type signature, the datatype specification used to receive this item  
(unless one of the types is <font face="sans-serif">  MPI_PACKED</font>).  
Also, the  
type of a message item should match the type declaration for the  
corresponding communication buffer location, unless the type is  
<font face="sans-serif">  MPI_BYTE</font> or <font face="sans-serif">  MPI_PACKED</font>.  Interlanguage  
communication is allowed if it complies with these rules.  
<P> 
  
<br><b> Example</b>  
In the example below, a Fortran array is sent from Fortran and received in  
C.  
<P> 
<br> 
<pre><tt>! FORTRAN CODE 
SUBROUTINE MYEXAMPLE() 
USE mpi_f08 
REAL :: R(5) 
INTEGER :: IERR, MYRANK, AOBLEN(1) 
TYPE(MPI_Datatype) :: TYPE, AOTYPE(1)  
INTEGER (KIND=MPI_ADDRESS_KIND) :: AODISP(1) 
 
! create an absolute datatype for array R 
AOBLEN(1) = 5 
CALL MPI_GET_ADDRESS( R, AODISP(1), IERR) 
AOTYPE(1) = MPI_REAL 
CALL MPI_TYPE_CREATE_STRUCT(1, AOBLEN,AODISP,AOTYPE, TYPE, IERR) 
CALL MPI_TYPE_COMMIT(TYPE, IERR) 
 
CALL MPI_COMM_RANK( MPI_COMM_WORLD, MYRANK, IERR) 
IF (MYRANK.EQ.0) THEN 
   CALL MPI_SEND( MPI_BOTTOM, 1, TYPE, 1, 0, MPI_COMM_WORLD, IERR) 
ELSE 
   CALL C_ROUTINE(TYPE%MPI_VAL) 
END IF 
END SUBROUTINE 
</tt></pre> 
<br> 
<pre><tt>/* C code */ 
 
void C_ROUTINE(MPI_Fint *fhandle) 
{ 
   MPI_Datatype type; 
   MPI_Status status; 
    
   type = MPI_Type_f2c(*fhandle); 
    
   MPI_Recv( MPI_BOTTOM, 1, type, 0, 0, MPI_COMM_WORLD, &amp;status); 
} 
</tt></pre> 
  
<P> 
<font face="sans-serif"> MPI</font> implementors may weaken these type matching rules, and allow  
messages to be sent with Fortran types and received with C types, and  
vice versa, when those types match.  I.e., if the Fortran type  
<tt> INTEGER</tt> is identical to the C type  
<tt> int</tt>, then an <font face="sans-serif"> MPI</font> implementation may allow data to be sent  
with datatype <font face="sans-serif">  MPI_INTEGER</font> and be received with datatype  
<font face="sans-serif">  MPI_INT</font>.  However, such code is not portable.  
<P> 
  
  
<P> 
  
   
 <P> 

<P>
<hr>
<a href="node455.htm#Node455"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node442.htm#Node442"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node457.htm#Node457"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node442.htm#Node442"> Language Interoperability</a>
<b>Next: </b><a href="node457.htm#Node457"> Language Bindings Summary</a>
<b>Previous: </b><a href="node455.htm#Node455"> Constants</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

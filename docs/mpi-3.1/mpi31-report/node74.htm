<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Send-Receive</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node74">69. Send-Receive</span></h1>
<a href="node73.htm#Node73"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node75.htm#Node75"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node75.htm#Node75"> Null Processes</a>
<b>Previous: </b><a href="node73.htm#Node73"> Persistent Communication Requests</a>
<p>
  
  
<P> 
The <b> send-receive</b> operations combine in one call the sending of a  
message to one destination and the receiving of another message, from  
another process.  The two (source and destination) are possibly the same.  
A send-receive operation is  
very useful for executing a shift operation across a chain of  
processes.  If blocking sends and receives are used for such a shift,  
then one needs to order the sends and receives correctly (for  
example, even processes  
send, then receive, odd processes receive first, then send) so as to prevent  
cyclic dependencies that may lead to deadlock.  When a send-receive  
operation is used, the communication subsystem takes care of  
these issues.  The send-receive operation can be used in conjunction  
with the functions described in Chapter <a href="node186.htm#Node186">Process Topologies 
</a> in order to  
perform shifts on various logical topologies.  
Also, a send-receive operation is useful for implementing  
remote procedure calls.  
<P> 
A message sent by a  
send-receive operation can be received by a regular receive  
operation or probed by a probe operation; a send-receive operation can  
receive a message sent by a regular send operation.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_SENDRECV(sendbuf, sendcount, sendtype, dest,  
sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD> IN sendcount</TD><TD>number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN sendtype</TD><TD>type of elements in send buffer (handle)</TD></TR>  
<TR><TD> IN dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD> IN sendtag</TD><TD>send tag (integer)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD> IN recvcount</TD><TD>number of elements in receive buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN recvtype</TD><TD> type of elements in receive buffer (handle)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif">  MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN recvtag</TD><TD>receive tag or <font face="sans-serif">  MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (Status)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Sendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: sendcount, dest, sendtag, recvcount, source,<br>    recvtag <br>TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_SENDRECV(SENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM, STATUS, IERROR)<br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER  SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVCOUNT, RECVTYPE,<br>    SOURCE, RECVTAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
  
  
<P> 
Execute a blocking send and receive operation.  Both send and receive  
use the same communicator, but  
possibly different tags.  The send buffer and receive buffers must be  
disjoint, and may have different lengths and datatypes.  
<P> 
The semantics of a send-receive operation is what would be obtained  
if the caller forked two concurrent threads, one to execute the send,  
and one to execute the receive, followed by a join of these two  
threads.  
<P> 
<P><img width=367 height=267 src="img11.gif" alt="Image file"><P>
 <tt> int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
<P> 
 <tt> MPI_Sendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror) <br> TYPE(*), DIMENSION(..) :: buf <br>INTEGER, INTENT(IN) :: count, dest, sendtag, source, recvtag <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>TYPE(MPI_Status) :: status <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_SENDRECV_REPLACE(BUF, COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM, STATUS, IERROR)<br> &lt;type&gt; BUF(*) <br>INTEGER COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM,<br>    STATUS(MPI_STATUS_SIZE), IERROR <br></tt>  
  
  
<P> 
Execute a blocking send and receive. The same buffer is used both for  
the send and for the receive, so that the message sent is replaced by  
the message received.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Additional intermediate buffering is needed for the  
``replace'' variant.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node73.htm#Node73"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node75.htm#Node75"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node75.htm#Node75"> Null Processes</a>
<b>Previous: </b><a href="node73.htm#Node73"> Persistent Communication Requests</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>All-Reduce</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node117">111. All-Reduce</span></h2>
<a href="node115.htm#Node116"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node110.htm#Node110"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node118.htm#Node118"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node110.htm#Node110"> Global Reduction Operations</a>
<b>Next: </b><a href="node118.htm#Node118"> Process-Local Reduction</a>
<b>Previous: </b><a href="node115.htm#Node116"> Example of User-defined Reduce</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> includes   
a variant  
of the reduce operations  
where the result is returned to all processes in  
a  
group.  
<font face="sans-serif"> MPI</font> requires that all processes  
from the same group  
participating in these operations  
receive identical results.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLREDUCE(sendbuf, recvbuf, count, datatype, op, comm)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD> starting address of send buffer (choice)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD> starting address of receive buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD> number of elements in send buffer (non-negative  
integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD> data type of elements of send buffer (handle)</TD></TR>  
<TR><TD> IN op</TD><TD> operation (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD> communicator (handle)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Allreduce(const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) <br></tt>  
<P> 
 <tt> MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf <br>TYPE(*), DIMENSION(..) :: recvbuf <br>INTEGER, INTENT(IN) :: count <br>TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>TYPE(MPI_Op), INTENT(IN) :: op <br>TYPE(MPI_Comm), INTENT(IN) :: comm <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_ALLREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) <br> &lt;type&gt; SENDBUF(*), RECVBUF(*) <br>INTEGER COUNT, DATATYPE, OP, COMM, IERROR <br></tt>  
<P> 
  
<P> 
If <font face="sans-serif"> comm</font> is an intracommunicator,  
<font face="sans-serif"> MPI_ALLREDUCE</font> behaves the  
same as <font face="sans-serif"> MPI_REDUCE</font> except that the result  
appears in the receive buffer of all the group members.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The all-reduce operations can be implemented as a reduce, followed by a  
broadcast.  However, a direct implementation can lead to better performance.  
 (<em> End of advice to implementors.</em>) <br> 
The ``in place'' option  for intracommunicators is specified by passing the  
value <font face="sans-serif">  MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font>  
at all processes.  
In this case,  
the input data is taken at each process from the receive buffer,  
where it will be replaced by the output data.  
<P> 
If <font face="sans-serif"> comm</font> is an intercommunicator, then the result of the reduction  
of the data provided by processes in group A is stored at each process  
in group B, and vice versa.    
Both groups should  
provide <font face="sans-serif"> count</font> and <font face="sans-serif"> datatype</font> arguments that specify the same type  
signature.  
<P> 
The following example uses an intracommunicator.  
<P> 
<br><b> Example</b>  
  
  
A routine that computes  
the product of a vector and an array that are distributed across a  
group of processes and returns the answer at all nodes (see also  
Example <a href="node112.htm#Node112">Predefined Reduction Operations 
</a>).  
<P> 
<br> 
<pre><tt>SUBROUTINE PAR_BLAS2(m, n, a, b, c, comm) 
REAL a(m), b(m,n)    ! local slice of array 
REAL c(n)            ! result 
REAL sum(n) 
INTEGER n, comm, i, j, ierr 
 
! local sum 
DO j= 1, n 
  sum(j) = 0.0 
  DO i = 1, m 
    sum(j) = sum(j) + a(i)*b(i,j) 
  END DO 
END DO 
 
! global sum 
CALL MPI_ALLREDUCE(sum, c, n, MPI_REAL, MPI_SUM, comm, ierr) 
 
! return result at all nodes 
RETURN 
END 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node115.htm#Node116"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node110.htm#Node110"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node118.htm#Node118"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node110.htm#Node110"> Global Reduction Operations</a>
<b>Next: </b><a href="node118.htm#Node118"> Process-Local Reduction</a>
<b>Previous: </b><a href="node115.htm#Node116"> Example of User-defined Reduce</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Datatypes</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node176">167. Datatypes</span></h2>
<a href="node175.htm#Node175"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node172.htm#Node172"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node177.htm#Node177"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node172.htm#Node172"> Caching</a>
<b>Next: </b><a href="node177.htm#Node177"> Error Class for Invalid Keyval</a>
<b>Previous: </b><a href="node175.htm#Node175"> Windows</a>
<p>
  
<P> 
The new functions for caching on datatypes are:  
<P> 
<P><img width=389 height=135 src="img159.gif" alt="Image file"><P>
 <tt> int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) <br></tt>  
<P> 
 <tt> MPI_Type_create_keyval(type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Type_copy_attr_function) :: type_copy_attr_fn <br>PROCEDURE(MPI_Type_delete_attr_function) :: type_delete_attr_fn <br>INTEGER, INTENT(OUT) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_CREATE_KEYVAL(TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN, TYPE_KEYVAL, EXTRA_STATE, IERROR)<br> EXTERNAL TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN<br>INTEGER TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE <br></tt>  
<P> 
  
<P> 
The argument <font face="sans-serif"> type_copy_attr_fn</font> may be specified as  
<font face="sans-serif"> MPI_TYPE_NULL_COPY_FN</font> or  
<font face="sans-serif"> MPI_TYPE_DUP_FN</font>  
from either C or Fortran.  
<font face="sans-serif"> MPI_TYPE_NULL_COPY_FN</font>  
is a function that does nothing other than returning <font face="sans-serif"> flag = 0</font>  
and <font face="sans-serif">  MPI_SUCCESS</font>.  
<font face="sans-serif"> MPI_TYPE_DUP_FN</font> is a simple-minded  
copy function that sets <font face="sans-serif"> flag = 1</font>,  
returns the value of  
<font face="sans-serif"> attribute_val_in</font> in <font face="sans-serif"> attribute_val_out</font>, and  
returns <font face="sans-serif">  MPI_SUCCESS</font>.  
<P> 
  
<P> 
The argument <font face="sans-serif"> type_delete_attr_fn</font> may be specified as  
<font face="sans-serif"> MPI_TYPE_NULL_DELETE_FN</font> from either C or Fortran.  
<font face="sans-serif"> MPI_TYPE_NULL_DELETE_FN</font> is a function that does nothing, other  
than returning <font face="sans-serif">  MPI_SUCCESS</font>.    
<P> 
  
<P> 
  
The C callback functions are:  
<P> 
 <tt> typedef int MPI_Type_copy_attr_function(MPI_Datatype oldtype, int type_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag); <br></tt>  
<P> 
  
and  
<P> 
 <tt> typedef int MPI_Type_delete_attr_function(MPI_Datatype datatype, int type_keyval, void *attribute_val, void *extra_state); <br></tt>  
<P> 
  
With the <tt>mpi_f08</tt> module, the Fortran callback functions are:   
<P> 
 <tt> SUBROUTINE MPI_Type_copy_attr_function(oldtype, type_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Datatype) :: oldtype <br>INTEGER :: type_keyval, ierror <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: extra_state, attribute_val_in, attribute_val_out <br>LOGICAL :: flag  <br></tt>  
 <P> 
  
and   
<P> 
 <tt> SUBROUTINE MPI_Type_delete_attr_function(datatype, type_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Datatype) :: datatype <br>INTEGER :: type_keyval, ierror <br>INTEGER(KIND=MPI_ADDRESS_KIND) :: attribute_val, extra_state  <br></tt>  
<P> 
  
With the <tt>mpi</tt> module and <tt>mpif.h</tt>, the Fortran callback functions are:  
<P> 
 <tt> SUBROUTINE TYPE_COPY_ATTR_FUNCTION(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)<br> INTEGER OLDTYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE,<br>    ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT<br>LOGICAL FLAG <br></tt>  
<P> 
  
and  
<P> 
 <tt> SUBROUTINE TYPE_DELETE_ATTR_FUNCTION(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE <br></tt>  
<P> 
If an attribute copy function or attribute delete function returns other than  
<font face="sans-serif">  MPI_SUCCESS</font>, then the call that caused it to be invoked (for example,  
<font face="sans-serif"> MPI_TYPE_FREE</font>), is erroneous.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_FREE_KEYVAL(type_keyval)</TD></TR>  
<TR><TD> INOUT type_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_free_keyval(int *type_keyval) <br></tt>  
<P> 
 <tt> MPI_Type_free_keyval(type_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: type_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_FREE_KEYVAL(TYPE_KEYVAL, IERROR)<br> INTEGER TYPE_KEYVAL, IERROR <br></tt>   
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_SET_ATTR(datatype, type_keyval, attribute_val)</TD></TR>  
<TR><TD> INOUT datatype</TD><TD>datatype to which attribute will be attached (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> IN attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_set_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val) <br></tt>  
 <P> 
 <tt> MPI_Type_set_attr(datatype, type_keyval, attribute_val, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_SET_ATTR(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL <br></tt>   
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_GET_ATTR(datatype, type_keyval, attribute_val, flag)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype to which the attribute is attached (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD> OUT attribute_val</TD><TD>attribute value, unless <font face="sans-serif"> flag =  
false</font></TD></TR>  
<TR><TD> OUT flag</TD><TD><font face="sans-serif">  false</font> if no attribute is associated with  
the key (logical)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_get_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val, int *flag) <br></tt>  
<P> 
 <tt> MPI_Type_get_attr(datatype, type_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val <br>LOGICAL, INTENT(OUT) :: flag <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_GET_ATTR(DATATYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR<br>INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL<br>LOGICAL FLAG <br></tt>    
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_DELETE_ATTR(datatype, type_keyval)</TD></TR>  
<TR><TD> INOUT datatype</TD><TD>datatype from which the attribute is deleted (handle)</TD></TR>  
<TR><TD> IN type_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
<P> 
 <tt> int MPI_Type_delete_attr(MPI_Datatype datatype, int type_keyval) <br></tt>  
<P> 
 <tt> MPI_Type_delete_attr(datatype, type_keyval, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: datatype <br>INTEGER, INTENT(IN) :: type_keyval <br>INTEGER, OPTIONAL, INTENT(OUT) :: ierror <br></tt>  
 <tt> MPI_TYPE_DELETE_ATTR(DATATYPE, TYPE_KEYVAL, IERROR)<br> INTEGER DATATYPE, TYPE_KEYVAL, IERROR <br></tt>    
<P> 
  
<P> 

<P>
<hr>
<a href="node175.htm#Node175"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node172.htm#Node172"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node177.htm#Node177"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node172.htm#Node172"> Caching</a>
<b>Next: </b><a href="node177.htm#Node177"> Error Class for Invalid Keyval</a>
<b>Previous: </b><a href="node175.htm#Node175"> Windows</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

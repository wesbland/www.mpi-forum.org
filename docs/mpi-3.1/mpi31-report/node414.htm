<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>Requirements on Fortran Compilers</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node414">361. Requirements on Fortran Compilers</span></h2>
<a href="node413.htm#Node413"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node415.htm#Node415"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node415.htm#Node415"> Additional Support for Fortran Register-Memory-Synchronization</a>
<b>Previous: </b><a href="node413.htm#Node413"> <font face="sans-serif"> MPI</font> for Different Fortran Standard Versions</a>
<p>
  
<P> 
<font face="sans-serif"> MPI-3.0</font> (and later) compliant Fortran bindings are not  
only a property of the <font face="sans-serif"> MPI</font> library itself, but rather  
a property of an <font face="sans-serif"> MPI</font> library together with the Fortran compiler suite  
for which it is compiled.   
 
<br> 
<em> Advice to users.</em>  
 <P> 
Users must take appropriate steps to ensure that proper options are specified   
to compilers. <font face="sans-serif"> MPI</font> libraries must document these options.    
Some <font face="sans-serif"> MPI</font> libraries are shipped together with special compilation scripts   
(e.g., <tt>mpif90</tt>, <tt>mpicc</tt>) that set these options automatically.   
 (<em> End of advice to users.</em>) <br> 
An <font face="sans-serif"> MPI</font> library together with the Fortran compiler suite   
is only compliant with <font face="sans-serif"> MPI-3.0</font> (and later), as referred  
by <font face="sans-serif"> MPI_GET_VERSION</font>, if all the solutions described in  
Sections <a href="node421.htm#Node421">Problems Due to Strong Typing 
</a> through <a href="node440.htm#Node440">Permanent Data Movement 
</a>  
work correctly.   
Based on this rule, major requirements for all three   
Fortran support methods (i.e., the <tt>mpi_f08</tt> and <tt>mpi</tt> modules, and <tt>mpif.h</tt>) are:  
<ul> 
 
<li>The language features assumed-type and assumed-rank   
  from Fortran 2008 TS 29113 [<a href="node522.htm#-Bib41">41</a>] are available.  
  This is required only for <tt>mpi_f08</tt>.   
  As long as this requirement is not supported by the compiler,  
  it is valid to build   
  an <font face="sans-serif"> MPI</font>  
  library that implements the <tt>mpi_f08</tt> module with  
  <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font> set to <tt> .FALSE.</tt>.  
 
<li>``Simply contiguous'' arrays and scalars   
  must be passed to choice buffer dummy arguments of nonblocking routines   
  with call by reference.    
  This is needed only if one of the support methods does not use    
  the <tt> ASYNCHRONOUS</tt> attribute.   
  See Section <a href="node422.htm#Node422">Problems Due to Data Copying and Sequence Association with Subscript Triplets 
</a> for more details.  
<P> 
 
<li><tt> SEQUENCE</tt> and <tt> BIND(C)</tt> derived types    
  are valid as actual arguments passed to choice buffer dummy arguments,  
  and, in the case of <font face="sans-serif">  MPI_SUBARRAYS_SUPPORTED</font>==<tt> .FALSE.</tt>,  
  they are passed with call by reference,   
  and passed by descriptor in the case of <tt> .TRUE.</tt>.  
 
<li>All actual arguments that are allowed for a dummy argument  
  in an implicitly defined and separately compiled Fortran routine   
  with the given compiler (e.g., <tt> CHARACTER(LEN=*)</tt> strings   
  and array of strings) must also be valid for choice buffer  
  dummy arguments with all Fortran support methods.   
 
<li>The array dummy argument of the <tt> ISO_C_BINDING</tt> intrinsic module procedure  
  <tt> C_F_POINTER</tt> is not restricted to Fortran types for which  
  a corresponding type in C exists.  
 
<li>The Fortran compiler shall not provide <tt>TYPE(*)</tt> unless the <tt> ASYNCHRONOUS</tt>    
  attribute protects <font face="sans-serif"> MPI</font> communication as described in TS 29113.  
  Specifically, the TS 29113 must be implemented as a whole.  
</ul> 
<br> 
The following rules are required at least as long as the compiler does not provide  
the extension of the <tt> ASYNCHRONOUS</tt> attribute as part of TS 29113  
and there still exists a Fortran support method with  
<font face="sans-serif">  MPI_ASYNC_PROTECTS_NONBLOCKING</font>==<tt> .FALSE.</tt>.  
Observation of these rules by the <font face="sans-serif"> MPI</font> application developer is  
especially recomended for  
backward compatibility of existing applications that  
use the <tt>mpi</tt> module or the <tt>mpif.h</tt> include file.   
The rules are as follows:  
<ul> 
 
<li>Separately compiled empty Fortran routines with implicit interfaces  
  and separately compiled empty C routines with <tt> BIND(C)</tt> Fortran interfaces  
  (e.g., <font face="sans-serif"> MPI_F_SYNC_REG</font>   
   on page <a href="node427.htm#Node434">Calling MPI_F_SYNC_REG 
</a>  
   and Section <a href="node415.htm#Node415">Additional Support for Fortran Register-Memory-Synchronization 
</a>,  
   and <font face="sans-serif"> DD</font>  
   on page <a href="node427.htm#Node435">A User Defined Routine Instead of MPI_F_SYNC_REG 
</a>)  
  solve the problems described in   
  Section <a href="node427.htm#Node427">Problems with Code Movement and Register Optimization 
</a>.  
 
<li>The problems with temporary data movement   
  (described in detail in Section <a href="node439.htm#Node439">Temporary Data Movement and Temporary Memory Modification 
</a>)  
  are solved as long as the application uses different sets  
  of variables for   
  the nonblocking communication (or nonblocking or split collective I/O)   
  and the computation when overlapping communication and computation.  
 
<li>Problems caused by automatic and permanent data movement   
  (e.g., within a garbage collection, see  
  Section <a href="node440.htm#Node440">Permanent Data Movement 
</a>)  
  are resolved <b> without</b> any further requirements  
  on the application program, neither on the usage of the buffers,  
  nor on the declaration of application routines that are involved  
  in invoking <font face="sans-serif"> MPI</font> procedures.   
</ul> 
<br> 
All of these rules are valid  
for the <tt> mpi_f08</tt> and <tt> mpi</tt>  
modules and  
independently of whether  
<tt> mpif.h</tt> uses explicit interfaces.  
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Some of these rules are already part of the Fortran 2003 standard,  
   some of these requirements require  
   the Fortran TS 29113  [<a href="node522.htm#-Bib41">41</a>],  
   and  
   some of these requirements for <font face="sans-serif"> MPI-3.0</font> are beyond the scope of TS 29113.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node413.htm#Node413"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node407.htm#Node407"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node415.htm#Node415"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node407.htm#Node407"> Fortran Support</a>
<b>Next: </b><a href="node415.htm#Node415"> Additional Support for Fortran Register-Memory-Synchronization</a>
<b>Previous: </b><a href="node413.htm#Node413"> <font face="sans-serif"> MPI</font> for Different Fortran Standard Versions</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>

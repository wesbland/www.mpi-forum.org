<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit.tex -->
<!-- with the command
tohtml -default -basedef mpi3defs.txt -numbers -indexname myindex -dosnl -htables -quietlatex -allgif -endpage mpi3-forum-tail.htm -Wnoredef -o mpi31-report.tex mpi-report.tex 
-->
<title>The <font face="sans-serif"> MPI</font> Tool Information Interface</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node372">331. The  MPI Tool Information Interface</span></h1>
<a href="node371.htm#Node371"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node373.htm#Node373"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node373.htm#Node373"> Verbosity Levels</a>
<b>Previous: </b><a href="node371.htm#Node371"> Multiple Levels of Interception</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> implementations often use internal variables to control their   
operation and performance. Understanding and manipulating these  
variables can provide a more efficient execution environment or improve  
performance for many applications.   
This section describes the <font face="sans-serif"> MPI</font> tool information interface, which  
provides a mechanism for <font face="sans-serif"> MPI</font>  
implementors to expose variables, each of which represents a  
particular property, setting, or performance measurement from within  
the <font face="sans-serif"> MPI</font> implementation.  The interface is split into two parts: the  
first part provides information about and supports the setting of control   
variables through which the <font face="sans-serif"> MPI</font> implementation tunes its configuration.  
The second part  
provides access to performance variables that can provide insight into  
internal performance information of the <font face="sans-serif"> MPI</font>  
implementation.  
<P> 
To avoid restrictions on the <font face="sans-serif"> MPI</font> implementation, the <font face="sans-serif"> MPI</font> tool information  
interface allows the implementation to specify which control and  
performance variables exist.  Additionally, the user of the <font face="sans-serif"> MPI</font> tool information interface can  
obtain metadata about each available variable, such as its datatype,  
and a textual description.  The <font face="sans-serif"> MPI</font> tool information interface provides  
the necessary routines to find all variables that exist in a  
particular <font face="sans-serif"> MPI</font> implementation, to query their properties, to retrieve  
descriptions about their meaning, and to access and, if appropriate, to alter  
their values.  
<P> 
Variables and categories across connected processes with equivalent names are   
required to have the same meaning (see the definition of ``equivalent'' as related  
to strings in Section <a href="node375.htm#Node375">Convention for Returning Strings 
</a>).   
Furthermore, enumerations with equivalent names across connected processes are required to have the same meaning, but are allowed to comprise different enumeration items.  
Enumeration items that have equivalent names across connected processes in enumerations with the same meaning must also have the same meaning.  
In order for variables and categories to have the same meaning,  routines in the tools information interface that return details for those variables and categories have requirements on what parameters   
must be identical.   
These requirements are specified in   
their respective sections.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The intent of requiring the same meaning for entities with equivalent names is to enforce consistency   
across connected processes.  
For example, variables describing the number of packets sent  
on different types of network devices should have different names to reflect their  
potentially different meanings.  
 (<em> End of rationale.</em>) <br> 
The <font face="sans-serif"> MPI</font> tool information interface can be used independently from   
the <font face="sans-serif"> MPI</font> communication functionality. In particular, the routines of this interface can be called   
before <font face="sans-serif"> MPI_INIT</font> (or equivalent) and after <font face="sans-serif"> MPI_FINALIZE</font>.  
In order to support this behavior cleanly,  
the <font face="sans-serif"> MPI</font> tool information interface uses separate initialization   
and finalization routines. All identifiers used in the <font face="sans-serif"> MPI</font> tool information interface have  
the prefix MPI_T_.  
<P> 
On success, all <font face="sans-serif"> MPI</font> tool information interface routines return   
<font face="sans-serif">  MPI_SUCCESS</font>,  
otherwise they return an appropriate and unique return code indicating the reason  
why the call was not successfully completed. Details on return codes  
can be found in Section <a href="node393.htm#Node393">Return Codes for the <font face="sans-serif"> MPI</font> Tool Information Interface 
</a>. However, unsuccessful  
calls to the <font face="sans-serif"> MPI</font> tool information interface are not fatal and do not   
impact the execution of subsequent <font face="sans-serif"> MPI</font> routines.  
<P> 
Since the <font face="sans-serif"> MPI</font> tool information interface primarily focuses on tools and   
support libraries,  
<font face="sans-serif"> MPI</font> implementations are only required to provide C bindings  
for functions and constants  
introduced in this section.  Except where otherwise noted, all conventions  
and principles governing the C bindings of the <font face="sans-serif"> MPI</font> API also apply to  
the <font face="sans-serif"> MPI</font> tool information interface, which is available by including  
the <tt>mpi.h</tt> header file. All routines in this interface have local semantics.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The number and type of control variables and performance variables can  
vary between <font face="sans-serif"> MPI</font> implementations, platforms and different  
builds of the same implementation on the same platform as well as  
between runs. Hence, any  
application relying on a particular variable will not be portable.   
Further, there is no guarantee that the number of variables and   
variable indices are the same across connected processes.  
<P> 
This interface is primarily intended for performance monitoring tools,  
support tools, and libraries controlling the application's  
environment.  When maximum portability is desired, application programmers  
should either avoid using the  
<font face="sans-serif"> MPI</font> tool information interface or avoid being dependent on the existence of a  
particular control or performance variable.  
 (<em> End of advice to users.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node371.htm#Node371"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi31-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node373.htm#Node373"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi31-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node373.htm#Node373"> Verbosity Levels</a>
<b>Previous: </b><a href="node371.htm#Node371"> Multiple Levels of Interception</a>
<p>
<HR>
Return to <A HREF="node523.htm">MPI-3.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-3.1 of June 4, 2015<BR>
HTML Generated on June 4, 2015
</FONT>
</body>
</html>
